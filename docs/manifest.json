{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-05-16T12:55:24.094376Z", "invocation_id": "1e4628aa-2aac-4a5f-9200-6d80a703b057", "env": {}, "project_name": "ton_models", "project_id": "e75ca18edf6e5e4e732dd0c05635c3a5", "user_id": "fa510e35-cde3-4498-9186-9b448647560b", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.ton_models.defi__fact_dex_pools": {"database": "TON", "schema": "defi", "name": "defi__fact_dex_pools", "resource_type": "model", "package_name": "ton_models", "path": "gold/defi/defi__fact_dex_pools.sql", "original_file_path": "models/gold/defi/defi__fact_dex_pools.sql", "unique_id": "model.ton_models.defi__fact_dex_pools", "fqn": ["ton_models", "gold", "defi", "defi__fact_dex_pools"], "alias": "fact_dex_pools", "checksum": {"name": "sha256", "checksum": "f2c78cb27f2f3c8ea6e72c9098b07074e035a5d505accd76cea1fd4b723e6ff7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(pool);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_dex_pools_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp_last_updated::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains history of DEX pools states including static information about pools, reserves, and estimated TVL values. Each state includes information about the jettons in the pool, fees, and liquidity metrics.", "columns": {"block_timestamp_last_updated": {"name": "block_timestamp_last_updated", "description": "Timestamp of when the pool was last updated, converted from last_updated Unix timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp_discovered_at": {"name": "block_timestamp_discovered_at", "description": "Timestamp of when the pool was first discovered (first swap), converted from discovered_at Unix timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "Project name of the DEX (e.g., ston.fi, dedust.io, megaton.fi, tonco).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool": {"name": "pool", "description": "Address of the pool.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Version of the project protocol.", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_liquid": {"name": "is_liquid", "description": "Boolean flag indicating if the pool is liquid. A pool is considered liquid if it has TON, LSD, or a stable coin.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reserves_right": {"name": "reserves_right", "description": "Raw amount of the right jetton in the pool.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reserves_left": {"name": "reserves_left", "description": "Raw amount of the left jetton in the pool.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_right": {"name": "jetton_right", "description": "Address of the right jetton in the pool (fixed for each pool address, cannot be changed).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_left": {"name": "jetton_left", "description": "Address of the left jetton in the pool (fixed for each pool address, cannot be changed).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_supply": {"name": "total_supply", "description": "Total supply of the pool LP-jetton. For TONCO, represents the number of active NFT positions.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "protocol_fee": {"name": "protocol_fee", "description": "Fee percentage allocated to the protocol. Total fee equals lp_fee + protocol_fee + referral_fee (when referral address is present).", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "referral_fee": {"name": "referral_fee", "description": "Fee percentage allocated to referrals when a referral address is specified during a swap. For ston.fi v2, this value is always null.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lp_fee": {"name": "lp_fee", "description": "Fee percentage allocated to liquidity providers.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tvl_ton": {"name": "tvl_ton", "description": "Total Value Locked in the pool denominated in TON. Null for pools with is_liquid=false.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tvl_usd": {"name": "tvl_usd", "description": "Total Value Locked in the pool denominated in USD. Null for pools with is_liquid=false.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_updated": {"name": "last_updated", "description": "Unix timestamp of the pool's last update (swap or pool LP-jetton mint/burn).", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discovered_at": {"name": "discovered_at", "description": "Unix timestamp of when the pool was first discovered through a swap.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_dex_pools_id": {"name": "fact_dex_pools_id", "description": "Unique identifier for the DEX pool record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/defi/gold_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_dex_pools_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp_last_updated::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(pool);"}, "created_at": 1747400127.4496388, "relation_name": "TON.defi.fact_dex_pools", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_dex_pools_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp_last_updated::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(pool);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(last_updated) AS block_timestamp_last_updated,\n    TO_TIMESTAMP(discovered_at) AS block_timestamp_discovered_at,\n    project,\n    pool,\n    version,\n    is_liquid,\n    reserves_right,\n    reserves_left,\n    jetton_right,\n    jetton_left,\n    total_supply,\n    protocol_fee,\n    referral_fee,\n    lp_fee,\n    tvl_ton,\n    tvl_usd,\n    last_updated,\n    discovered_at,\n    dex_pools_id AS fact_dex_pools_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__dex_pools') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__dex_pools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__dex_pools"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "39e3a90901d8448594527b8bc9de5a1ec4efd6b1aa68615f8b9c2d1144be653b"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_dex_pools_id"], "time_spine": null}, "model.ton_models.defi__fact_dex_trades": {"database": "TON", "schema": "defi", "name": "defi__fact_dex_trades", "resource_type": "model", "package_name": "ton_models", "path": "gold/defi/defi__fact_dex_trades.sql", "original_file_path": "models/gold/defi/defi__fact_dex_trades.sql", "unique_id": "model.ton_models.defi__fact_dex_trades", "fqn": ["ton_models", "gold", "defi", "defi__fact_dex_trades"], "alias": "fact_dex_trades", "checksum": {"name": "sha256", "checksum": "b011c5a2971ff46032d1fb388914573b7e591a8608f3f24aef9b5bd8278af70f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,pool_address,trader_address,token_bought_address,token_sold_address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_dex_trades_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains DEX and launchpad trading data, capturing swap events across different decentralized exchanges and launchpad platforms in the TON ecosystem.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the trade event occurred, converted from event_time.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event: 'trade' for normal DEX swaps or 'launch' for when liquidity is collected from a bonding curve and sent to DEX.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "Transaction hash of the trade.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project_type": {"name": "project_type", "description": "Type of project: 'dex' for classical AMM DEXs or 'launchpad' for bonding curve launchpads.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "Name of the project (e.g., ston.fi, dedust.io, megaton.fi, tonco, ton.fun, gaspump).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool_address": {"name": "pool_address", "description": "Address of the pool where the trade occurred. Null if the pool is not known.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Version of the project protocol.", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trader_address": {"name": "trader_address", "description": "Address of the trader who executed the swap.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_bought_address": {"name": "token_bought_address", "description": "Address of the token that was bought. May include special wrapped TON aliases.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_sold_address": {"name": "token_sold_address", "description": "Address of the token that was sold. May include special wrapped TON aliases.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_bought_raw": {"name": "amount_bought_raw", "description": "Raw amount of the token bought without dividing by 10^decimals. To get decimals, use the jetton_metadata table.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_sold_raw": {"name": "amount_sold_raw", "description": "Raw amount of the token sold without dividing by 10^decimals. To get decimals, use the jetton_metadata table.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "router_address": {"name": "router_address", "description": "Address of the router used for the trade. Null if the router is not used by the project.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "volume_ton": {"name": "volume_ton", "description": "Volume of the trade in TON. Calculated based on the amount of tokens traded if the trade involves TON, wrapped TON, USDT, USDC, or LSD (stTON, tsTON, hTON).", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "volume_usd": {"name": "volume_usd", "description": "Volume of the trade in USD. Calculated based on the amount of tokens traded if the trade involves TON, wrapped TON, USDT, USDC, or LSD.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "referral_address": {"name": "referral_address", "description": "Referral address if specified. Null if the referral is not specified or not supported by the project.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "platform_tag": {"name": "platform_tag", "description": "Platform address. Null if the platform is not specified or not supported by the project.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "Trace ID for the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "Query ID of the transaction. Null if query ID is not supported by the project.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_time": {"name": "event_time", "description": "Unix timestamp when the trade event occurred.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_dex_trades_id": {"name": "fact_dex_trades_id", "description": "Unique identifier for the DEX trade record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/defi/gold_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_dex_trades_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,pool_address,trader_address,token_bought_address,token_sold_address);"}, "created_at": 1747400127.4602473, "relation_name": "TON.defi.fact_dex_trades", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_dex_trades_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,pool_address,trader_address,token_bought_address,token_sold_address);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(event_time) AS block_timestamp,\n    event_type,\n    tx_hash,\n    project_type,\n    project,\n    pool_address,\n    version,\n    trader_address,\n    token_bought_address,\n    token_sold_address,\n    amount_bought_raw,\n    amount_sold_raw,\n    router_address,\n    volume_ton,\n    volume_usd,\n    referral_address,\n    platform_tag,\n    trace_id,\n    query_id,\n    event_time,\n    dex_trades_id AS fact_dex_trades_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__dex_trades') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__dex_trades", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__dex_trades"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "c7600dc8b2f07f72207edf17dee997fda8e9c062076428c1c08f2c6a182f600a"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_dex_trades_id"], "time_spine": null}, "model.ton_models.nft__fact_nft_transfers": {"database": "TON", "schema": "nft", "name": "nft__fact_nft_transfers", "resource_type": "model", "package_name": "ton_models", "path": "gold/nft/nft__fact_nft_transfers.sql", "original_file_path": "models/gold/nft/nft__fact_nft_transfers.sql", "unique_id": "model.ton_models.nft__fact_nft_transfers", "fqn": ["ton_models", "gold", "nft", "nft__fact_nft_transfers"], "alias": "fact_nft_transfers", "checksum": {"name": "sha256", "checksum": "1326e37db5a4add27307cf1f0dcad8920c6163eacdbca476b60c5f947f57f5fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,old_owner,new_owner,nft_collection_address,nft_item_address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_nft_transfers_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains history of NFT transfers according to TEP-62 standard.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the NFT transfer occurred, converted from tx_now.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "Transaction hash of the transfer.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_succeeded": {"name": "tx_succeeded", "description": "Boolean flag indicating if the transfer transaction succeeded. Set to FALSE if tx_aborted is TRUE.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_aborted": {"name": "tx_aborted", "description": "Boolean flag indicating if the transfer transaction was aborted.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "old_owner": {"name": "old_owner", "description": "Address of the previous owner of the NFT.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "new_owner": {"name": "new_owner", "description": "Address of the new owner of the NFT.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_collection_address": {"name": "nft_collection_address", "description": "Address of the NFT collection. May be null for standalone NFTs.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_address": {"name": "nft_item_address", "description": "Address of the NFT item being transferred.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_index": {"name": "nft_item_index", "description": "Index of the NFT item within its collection.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "response_destination": {"name": "response_destination", "description": "Destination address for the response message. See TEP-62 standard.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_amount": {"name": "forward_amount", "description": "Amount of TON forwarded with the transfer message.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "custom_payload": {"name": "custom_payload", "description": "Custom payload included in the transfer message. See TEP-62 standard.", "meta": {}, "data_type": "binary", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_payload": {"name": "forward_payload", "description": "Payload of the forward message. See TEP-62 standard.", "meta": {}, "data_type": "binary", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "Text comment extracted from forward_payload.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "Trace ID from the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "Query ID of the transfer.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_now": {"name": "tx_now", "description": "Unix timestamp of the transaction block.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_lt": {"name": "tx_lt", "description": "Logical time of the transaction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_nft_transfers_id": {"name": "fact_nft_transfers_id", "description": "Unique identifier for the NFT transfer record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/nft/gold_nft.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_nft_transfers_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,old_owner,new_owner,nft_collection_address,nft_item_address);"}, "created_at": 1747400127.6349018, "relation_name": "TON.nft.fact_nft_transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_nft_transfers_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,old_owner,new_owner,nft_collection_address,nft_item_address);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(tx_now) AS block_timestamp,\n    tx_hash,\n    CASE\n        WHEN tx_aborted THEN FALSE\n        ELSE TRUE\n    END tx_succeeded,\n    tx_aborted,\n    old_owner,\n    new_owner,\n    nft_collection_address,\n    nft_item_address,\n    nft_item_index,\n    response_destination,\n    forward_amount,\n    custom_payload,\n    forward_payload,\n    COMMENT,\n    trace_id,\n    query_id,\n    tx_now,\n    tx_lt,\n    nft_transfers_id AS fact_nft_transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__nft_transfers') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__nft_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__nft_transfers"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e3d6f0020aa8afdf5458077d93aff01063e4f8d1909c6d2828c3e17866853b25"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_nft_transfers_id"], "time_spine": null}, "model.ton_models.nft__fact_nft_sales": {"database": "TON", "schema": "nft", "name": "nft__fact_nft_sales", "resource_type": "model", "package_name": "ton_models", "path": "gold/nft/nft__fact_nft_sales.sql", "original_file_path": "models/gold/nft/nft__fact_nft_sales.sql", "unique_id": "model.ton_models.nft__fact_nft_sales", "fqn": ["ton_models", "gold", "nft", "nft__fact_nft_sales"], "alias": "fact_nft_sales", "checksum": {"name": "sha256", "checksum": "820ff156fd75736de7cbb2aba0535b288a084c82e1a16ab64689534aa593936a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,nft_address,asset,nft_owner_address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_nft_sales_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains history of NFT sales contracts, including both fixed-price sales and auctions.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the NFT sale state was recorded, converted from timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Address of the NFT sales contract.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_address": {"name": "nft_address", "description": "Address of the NFT item being sold.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Type of sale: 'sale' for fixed price sales or 'auction' for auctions with bids.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "asset": {"name": "asset", "description": "Asset type used for payment, currently only 'TON' is supported.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price of the NFT or current bid for auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee": {"name": "marketplace_fee", "description": "Fee amount charged by the marketplace.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_amount": {"name": "royalty_amount", "description": "Amount of royalty to be paid to the royalty address.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_owner_address": {"name": "nft_owner_address", "description": "Address of the NFT owner who created the sale.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_address": {"name": "marketplace_address", "description": "Address of the marketplace facilitating the sale.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee_address": {"name": "marketplace_fee_address", "description": "Address receiving the marketplace fee.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_address": {"name": "royalty_address", "description": "Address receiving the royalty payment.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_complete": {"name": "is_complete", "description": "Boolean flag indicating if the sale is complete.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_canceled": {"name": "is_canceled", "description": "Boolean flag indicating if the sale is canceled (only for auctions).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_bid": {"name": "min_bid", "description": "Minimum bid amount for an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_bid": {"name": "max_bid", "description": "Maximum bid amount for an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_step": {"name": "min_step", "description": "Minimum step for bids in an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "Time of expiration of the sale.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_bid_at": {"name": "last_bid_at", "description": "Timestamp of the last bid for an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_member": {"name": "last_member", "description": "Address of the last bidder for an auction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp of the NFT sales contract creation.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Unix timestamp of the sale state update.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "Logical time of the sale state update.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_nft_sales_id": {"name": "fact_nft_sales_id", "description": "Unique identifier for the NFT sale record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/nft/gold_nft.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_nft_sales_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,nft_address,asset,nft_owner_address);"}, "created_at": 1747400127.6274202, "relation_name": "TON.nft.fact_nft_sales", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_nft_sales_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,nft_address,asset,nft_owner_address);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(TIMESTAMP) AS block_timestamp,\n    address,\n    nft_address,\n    TYPE,\n    asset,\n    price,\n    marketplace_fee,\n    royalty_amount,\n    nft_owner_address,\n    marketplace_address,\n    marketplace_fee_address,\n    royalty_address,\n    is_complete,\n    is_canceled,\n    min_bid,\n    max_bid,\n    min_step,\n    end_time,\n    last_bid_at,\n    last_member,\n    created_at,\n    TIMESTAMP,\n    lt,\n    nft_sales_id AS fact_nft_sales_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__nft_sales') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__nft_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__nft_sales"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "6b8901719688f3ed3985997207997be46ce9245d17a710d81c734aa5e1ca9e49"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_nft_sales_id"], "time_spine": null}, "model.ton_models.nft__fact_nft_metadata": {"database": "TON", "schema": "nft", "name": "nft__fact_nft_metadata", "resource_type": "model", "package_name": "ton_models", "path": "gold/nft/nft__fact_nft_metadata.sql", "original_file_path": "models/gold/nft/nft__fact_nft_metadata.sql", "unique_id": "model.ton_models.nft__fact_nft_metadata", "fqn": ["ton_models", "gold", "nft", "nft__fact_nft_metadata"], "alias": "fact_nft_metadata", "checksum": {"name": "sha256", "checksum": "970621896ce3d7cf41bc5c7f9fb0d29736de147365adef80cfd46773e0cca2a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,parent_address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_nft_metadata_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["update_timestamp_onchain::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains NFT metadata for both items and collections, including on-chain and off-chain data according to TEP-64 standard.", "columns": {"address": {"name": "address", "description": "NFT item or collection address.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_address": {"name": "parent_address", "description": "Collection owner address if type is 'collection', otherwise collection address for the item.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_timestamp_onchain": {"name": "update_timestamp_onchain", "description": "Timestamp of the last on-chain update, converted from update_time_onchain.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Type of NFT entity: 'item' for individual NFTs or 'collection' for NFT collections.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "TEP-64 NFT name from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "TEP-64 NFT description from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metadata_status": {"name": "metadata_status", "description": "Off-chain metadata update status: 0 - no off-chain metadata, 1 - success, -1 - error.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attributes": {"name": "attributes", "description": "TEP-64 NFT attributes from on-chain, off-chain, or tonapi source. Only available for NFT items, not collections.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image": {"name": "image", "description": "TEP-64 NFT image URL from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_data": {"name": "image_data", "description": "TEP-64 NFT image data from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tonapi_image_url": {"name": "tonapi_image_url", "description": "Cached image URL from tonapi.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "content_onchain": {"name": "content_onchain", "description": "JSON serialized string with on-chain metadata content.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sources": {"name": "sources", "description": "Record with sources of NFT metadata fields (name, description, image, image_data, attributes). Values can be 'onchain', 'offchain', 'tonapi', or '' (not set).", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_onchain": {"name": "update_time_onchain", "description": "Unix timestamp of on-chain update, such as admin address transfer.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_metadata": {"name": "update_time_metadata", "description": "Unix timestamp of off-chain metadata update.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "adding_at": {"name": "adding_at", "description": "Date when the output file was created.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_nft_metadata_id": {"name": "fact_nft_metadata_id", "description": "Unique identifier for the NFT metadata record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/nft/gold_nft.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_nft_metadata_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["update_timestamp_onchain::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,parent_address);"}, "created_at": 1747400127.6182632, "relation_name": "TON.nft.fact_nft_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_nft_metadata_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['update_timestamp_onchain::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,parent_address);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    address,\n    parent_address,\n    TO_TIMESTAMP(update_time_onchain) AS update_timestamp_onchain,\n    TYPE,\n    NAME,\n    description,\n    metadata_status,\n    attributes,\n    image,\n    image_data,\n    tonapi_image_url,\n    content_onchain,\n    sources,\n    update_time_onchain,\n    update_time_metadata,\n    adding_at,\n    nft_metadata_id AS fact_nft_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__nft_metadata') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__nft_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__nft_metadata"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "fddbf458250c0c78e2f22b6b284b64f4f8e1cfb1a6d7134fedc98143e973492a"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_nft_metadata_id"], "time_spine": null}, "model.ton_models.nft__fact_nft_items": {"database": "TON", "schema": "nft", "name": "nft__fact_nft_items", "resource_type": "model", "package_name": "ton_models", "path": "gold/nft/nft__fact_nft_items.sql", "original_file_path": "models/gold/nft/nft__fact_nft_items.sql", "unique_id": "model.ton_models.nft__fact_nft_items", "fqn": ["ton_models", "gold", "nft", "nft__fact_nft_items"], "alias": "fact_nft_items", "checksum": {"name": "sha256", "checksum": "45efc6fdb8c7a29fb02cdd70b5dc3117431cf91ec4a589aeb72151e8c63f242f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,collection_address,owner_address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_nft_items_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains full history of NFT item states according to TEP-62 NFT standard. Includes details about ownership and on-chain metadata.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the NFT state was recorded, converted from timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Address of the NFT item.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index of the NFT item within its collection.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_address": {"name": "collection_address", "description": "Address of the NFT collection. May be null for standalone NFTs.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_address": {"name": "owner_address", "description": "Current owner address of the NFT item.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "content_onchain": {"name": "content_onchain", "description": "NFT metadata extracted from on-chain data in JSON format.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_init": {"name": "is_init", "description": "Boolean flag indicating if the NFT is initialized.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "Logical time of the NFT state update.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Unix timestamp of the NFT state update.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_nft_items_id": {"name": "fact_nft_items_id", "description": "Unique identifier for the NFT item record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/nft/gold_nft.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_nft_items_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,collection_address,owner_address);"}, "created_at": 1747400127.608914, "relation_name": "TON.nft.fact_nft_items", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_nft_items_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,collection_address,owner_address);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(TIMESTAMP) AS block_timestamp,\n    address,\n    INDEX,\n    collection_address,\n    owner_address,\n    content_onchain,\n    is_init,\n    lt,\n    TIMESTAMP,\n    nft_items_id AS fact_nft_items_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__nft_items') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__nft_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__nft_items"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "1b13a2c8a037928e8d3d3a5e21ad437e0825502ddadd7417712c3f9942599888"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_nft_items_id"], "time_spine": null}, "model.ton_models.nft__fact_nft_events": {"database": "TON", "schema": "nft", "name": "nft__fact_nft_events", "resource_type": "model", "package_name": "ton_models", "path": "gold/nft/nft__fact_nft_events.sql", "original_file_path": "models/gold/nft/nft__fact_nft_events.sql", "unique_id": "model.ton_models.nft__fact_nft_events", "fqn": ["ton_models", "gold", "nft", "nft__fact_nft_events"], "alias": "fact_nft_events", "checksum": {"name": "sha256", "checksum": "c58a6d43670c9780be4002760d9e6898de8faf731913d5efafc641f31de89ffe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,nft_item_address,sale_contract,marketplace_address );", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_nft_events_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Comprehensive data mart containing all NFT-related events including mints, transfers, sales, auctions, etc. Built on top of nft_items, nft_transfers, messages, and nft_sales tables.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the NFT event occurred, converted from timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "Transaction hash associated with the NFT event, if applicable.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Type of NFT event: 'mint' (NFT deployment), 'put_on_sale' (NFT listed for sale), 'cancel_sale' (sale canceled), 'sale' (NFT sold), 'transfer' (direct NFT transfer), or 'bid' (auction bid).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_type": {"name": "sale_type", "description": "Type of the sale: 'sale' for fixed price sales or 'auction' for auctions with bids.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_address": {"name": "nft_item_address", "description": "Address of the NFT item involved in the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_index": {"name": "nft_item_index", "description": "Index of the NFT item within its collection.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_asset": {"name": "payment_asset", "description": "Asset type used for payment. Currently only 'TON' is supported.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_price": {"name": "sale_price", "description": "Price of the NFT in a sale event.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_amount": {"name": "forward_amount", "description": "Amount of TON forwarded in transfer message, if related to the event.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_amount": {"name": "royalty_amount", "description": "Amount of royalty in a sale event.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee": {"name": "marketplace_fee", "description": "Fee charged by the marketplace in a sale event.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "auction_max_bid": {"name": "auction_max_bid", "description": "Maximum bid allowed in an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "auction_min_bid": {"name": "auction_min_bid", "description": "Minimum bid required in an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_contract": {"name": "sale_contract", "description": "Address of the sale contract if related to the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_address": {"name": "royalty_address", "description": "Address receiving the royalty payment.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_address": {"name": "marketplace_address", "description": "Address of the marketplace facilitating the sale.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee_address": {"name": "marketplace_fee_address", "description": "Address receiving the marketplace fee.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_address": {"name": "owner_address", "description": "Current owner address of the NFT.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_address": {"name": "collection_address", "description": "Address of the NFT collection. May be null for standalone NFTs.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "content_onchain": {"name": "content_onchain", "description": "NFT metadata extracted from on-chain data in JSON format.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "Trace ID for the transaction if applicable.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "Query ID associated with the event if it exists.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_init": {"name": "is_init", "description": "Boolean flag indicating if the NFT is initialized.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "custom_payload": {"name": "custom_payload", "description": "Custom payload from the transfer message if related to the event.", "meta": {}, "data_type": "binary", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "Text comment extracted from forward_payload.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_end_time": {"name": "sale_end_time", "description": "End time of the sale if applicable.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_payload": {"name": "forward_payload", "description": "Payload of the forward message from transfer message if related to the event.", "meta": {}, "data_type": "binary", "constraints": [], "quote": null, "tags": [], "granularity": null}, "auction_min_step": {"name": "auction_min_step", "description": "Minimum step for bids in an auction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_owner": {"name": "prev_owner", "description": "Previous owner address. For mint events, this is the deployer address. For transfers, it's the previous owner. For sales, it's the seller. For bids, it's the bidder. Null for put_on_sale and cancel_sale events.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Unix timestamp of the NFT event.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "Logical time of the NFT event.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_nft_events_id": {"name": "fact_nft_events_id", "description": "Unique identifier for the NFT event record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/nft/gold_nft.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_nft_events_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,nft_item_address,sale_contract,marketplace_address );"}, "created_at": 1747400127.601686, "relation_name": "TON.nft.fact_nft_events", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_nft_events_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,nft_item_address,sale_contract,marketplace_address );\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(TIMESTAMP) AS block_timestamp,\n    tx_hash,\n    TYPE,\n    sale_type,\n    nft_item_address,\n    nft_item_index,\n    payment_asset,\n    sale_price,\n    forward_amount,\n    royalty_amount,\n    marketplace_fee,\n    auction_max_bid,\n    auction_min_bid,\n    sale_contract,\n    royalty_address,\n    marketplace_address,\n    marketplace_fee_address,\n    owner_address,\n    collection_address,\n    content_onchain,\n    trace_id,\n    query_id,\n    is_init,\n    custom_payload,\n    COMMENT,\n    sale_end_time,\n    forward_payload,\n    auction_min_step,\n    prev_owner,\n    TIMESTAMP,\n    lt,\n    nft_events_id AS fact_nft_events_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__nft_events') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__nft_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__nft_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "2d5c8eaa3746838d42cd19ff9ff033b9cc5afcd0a53b9c546e3c9a651050a6da"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_nft_events_id"], "time_spine": null}, "model.ton_models.core__fact_jetton_events": {"database": "TON", "schema": "core", "name": "core__fact_jetton_events", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_jetton_events.sql", "original_file_path": "models/gold/core/core__fact_jetton_events.sql", "unique_id": "model.ton_models.core__fact_jetton_events", "fqn": ["ton_models", "gold", "core", "core__fact_jetton_events"], "alias": "fact_jetton_events", "checksum": {"name": "sha256", "checksum": "416dbd48706545592675168e926ee32e30af537f03c631a3b02a9168343cb825"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_jetton_events_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "source", "destination"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains information about Jetton events such as transfers, burns, and mints according to TEP-74 standard.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the jetton event occurred, converted from utime.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "Transaction hash of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_succeeded": {"name": "tx_succeeded", "description": "Boolean flag indicating if the transaction succeeded. Set to FALSE if tx_aborted is TRUE.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Event type: 'transfer' for TEP-74 transfer, 'burn' for TEP-74 burn, or 'mint' for jetton minting.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "Source address of the tokens. Null for mint events.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "destination": {"name": "destination", "description": "Destination address for the tokens. Null for burn events.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_ton_amount": {"name": "forward_ton_amount", "description": "Amount of TON forwarded with the transaction, stored as a raw decimal value.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount of jettons involved in the event, stored as a raw value without dividing by 10^decimals.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_master": {"name": "jetton_master", "description": "Address of the jetton master contract.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_wallet": {"name": "jetton_wallet", "description": "Address of the jetton wallet contract.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "Optional comment attached to the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "Query ID of the transaction, stored as a raw decimal value.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "The trace ID of the transaction", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_lt": {"name": "tx_lt", "description": "Logical time of the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "utime": {"name": "utime", "description": "Unix timestamp when the event occurred.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_aborted": {"name": "tx_aborted", "description": "Boolean flag indicating if the transaction was aborted. If true, the event should be discarded.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_jetton_events_id": {"name": "fact_jetton_events_id", "description": "Unique identifier for the jetton event record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_jetton_events_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE", "source", "destination"], "tags": ["scheduled_core"]}, "created_at": 1747400127.6993434, "relation_name": "TON.core.fact_jetton_events", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_jetton_events_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE','source','destination'],\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(utime) AS block_timestamp,\n    tx_hash,\n    CASE\n        WHEN tx_aborted THEN FALSE\n        ELSE TRUE\n    END tx_succeeded,\n    TYPE,\n    source,\n    destination,\n    forward_ton_amount,\n    amount,\n    jetton_master,\n    jetton_wallet,\n    COMMENT,\n    query_id,\n    trace_id,\n    tx_lt,\n    utime,\n    tx_aborted,\n    jetton_events_id AS fact_jetton_events_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__jetton_events') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__jetton_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__jetton_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "1c00959eab8f90e7f0f9171a284250cb94872393d8ea04903f0a3065637df0fc"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_jetton_events_id"], "time_spine": null}, "model.ton_models.core__fact_jetton_metadata": {"database": "TON", "schema": "core", "name": "core__fact_jetton_metadata", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_jetton_metadata.sql", "original_file_path": "models/gold/core/core__fact_jetton_metadata.sql", "unique_id": "model.ton_models.core__fact_jetton_metadata", "fqn": ["ton_models", "gold", "core", "core__fact_jetton_metadata"], "alias": "fact_jetton_metadata", "checksum": {"name": "sha256", "checksum": "eff7782d184e03821f9475f17a3e7b982fc255d94e75fcc6508849fa6d8e8fce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,symbol);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_jetton_metadata_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["update_timestamp_onchain::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains metadata information for Jettons (TEP-64 standard), including both on-chain and off-chain data.", "columns": {"address": {"name": "address", "description": "Jetton master address.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_timestamp_onchain": {"name": "update_timestamp_onchain", "description": "Timestamp of the last on-chain update, converted from update_time_onchain.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "symbol": {"name": "symbol", "description": "TEP-64 jetton symbol from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "decimals": {"name": "decimals", "description": "TEP-64 jetton decimals from on-chain, off-chain, or tonapi source. If not present, defaults to 9.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "TEP-64 jetton name from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "TEP-64 jetton description from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tonapi_image_url": {"name": "tonapi_image_url", "description": "Cached image URL from tonapi.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_data": {"name": "image_data", "description": "TEP-64 jetton image data from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image": {"name": "image", "description": "TEP-64 jetton image URL from on-chain, off-chain, or tonapi source.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "admin_address": {"name": "admin_address", "description": "Admin address from on-chain data.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mintable": {"name": "mintable", "description": "Boolean flag indicating if the jetton is mintable based on on-chain data.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_content_onchain": {"name": "jetton_content_onchain", "description": "JSON serialized string with on-chain jetton content.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_wallet_code_hash": {"name": "jetton_wallet_code_hash", "description": "Jetton wallet code hash from on-chain data.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code_hash": {"name": "code_hash", "description": "Jetton code hash from on-chain data.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "adding_at": {"name": "adding_at", "description": "Date when the output file was created.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sources": {"name": "sources", "description": "Record with sources of jetton metadata fields (symbol, name, description, image, image_data, decimals). Values can be 'onchain', 'offchain', 'tonapi', or '' (not set).", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metadata_status": {"name": "metadata_status", "description": "Off-chain metadata update status: 0 - no off-chain metadata, 1 - success, -1 - error.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_onchain": {"name": "update_time_onchain", "description": "Unix timestamp of on-chain update, such as admin address transfer.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_metadata": {"name": "update_time_metadata", "description": "Unix timestamp of off-chain metadata update.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_jetton_metadata_id": {"name": "fact_jetton_metadata_id", "description": "Unique identifier for the jetton metadata record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_jetton_metadata_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["update_timestamp_onchain::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,symbol);"}, "created_at": 1747400127.7066896, "relation_name": "TON.core.fact_jetton_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_jetton_metadata_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['update_timestamp_onchain::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address,symbol);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    address,\n    TO_TIMESTAMP(update_time_onchain) AS update_timestamp_onchain,\n    symbol,\n    decimals,\n    NAME,\n    description,\n    tonapi_image_url,\n    image_data,\n    image,\n    admin_address,\n    mintable,\n    jetton_content_onchain,\n    jetton_wallet_code_hash,\n    code_hash,\n    adding_at,\n    sources,\n    metadata_status,\n    update_time_onchain,\n    update_time_metadata,\n    jetton_metadata_id AS fact_jetton_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__jetton_metadata') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__jetton_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__jetton_metadata"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "4fdc6214e0aae9ffbd44182491d52ec9aad227cf308b02fef0806286e2a4d562"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_jetton_metadata_id"], "time_spine": null}, "model.ton_models.core__fact_messages": {"database": "TON", "schema": "core", "name": "core__fact_messages", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_messages.sql", "original_file_path": "models/gold/core/core__fact_messages.sql", "unique_id": "model.ton_models.core__fact_messages", "fqn": ["ton_models", "gold", "core", "core__fact_messages"], "alias": "fact_messages", "checksum": {"name": "sha256", "checksum": "4df6ea017631d17751fe046555d97f5ef3766d717d05742e8f19255c0e9c7a87"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,msg_hash,source,destination);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_messages_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains messages from transactions, including both internal and external messages with their body data.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the message was processed, converted from tx_now.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "Transaction hash associated with the message.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "msg_hash": {"name": "msg_hash", "description": "Hash of the message.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "body_hash": {"name": "body_hash", "description": "Hash of the message body.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "Trace ID for the message within the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "direction": {"name": "direction", "description": "Direction of the message: 'in' for messages that initiated a transaction, 'out' for messages resulting from a transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "Source address of the message.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "destination": {"name": "destination", "description": "Destination address of the message.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Amount of TON attached to the message.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "opcode": {"name": "opcode", "description": "Operation code extracted from the message body.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the message was created.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_now": {"name": "tx_now", "description": "Unix timestamp of the transaction processing.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ihr_fee": {"name": "ihr_fee", "description": "Instant hypercube routing fee.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "import_fee": {"name": "import_fee", "description": "Import fee for the message.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fwd_fee": {"name": "fwd_fee", "description": "Forward fee for the message.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ihr_disabled": {"name": "ihr_disabled", "description": "Boolean flag indicating if instant hypercube routing is disabled for this message.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bounced": {"name": "bounced", "description": "Boolean flag indicating if the message was bounced.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bounce": {"name": "bounce", "description": "Boolean flag indicating if the message can bounce if delivery fails.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "Text comment extracted from the message body if available.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_lt": {"name": "tx_lt", "description": "Logical time of the transaction that processed this message.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_lt": {"name": "created_lt", "description": "Logical time when the message was created.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "init_state_hash": {"name": "init_state_hash", "description": "Hash of the initial state if present.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "init_state_boc": {"name": "init_state_boc", "description": "Raw initial state BOC (Bag of Cells) if present.", "meta": {}, "data_type": "binary", "constraints": [], "quote": null, "tags": [], "granularity": null}, "body_boc": {"name": "body_boc", "description": "Raw body BOC (Bag of Cells) of the message.", "meta": {}, "data_type": "binary", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_messages_id": {"name": "fact_messages_id", "description": "Unique identifier for the message record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_messages_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,msg_hash,source,destination);"}, "created_at": 1747400127.7173004, "relation_name": "TON.core.fact_messages", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_messages_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,msg_hash,source,destination);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(tx_now) AS block_timestamp,\n    tx_hash,\n    msg_hash,\n    body_hash,\n    trace_id,\n    direction,\n    source,\n    destination,\n    _VALUE AS VALUE,\n    opcode,\n    created_at,\n    tx_now,\n    ihr_fee,\n    import_fee,\n    fwd_fee,\n    ihr_disabled,\n    bounced,\n    bounce,\n    COMMENT,\n    tx_lt,\n    created_lt,\n    init_state_hash,\n    init_state_boc,\n    body_boc,\n    messages_with_data_id AS fact_messages_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__messages_with_data') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__messages_with_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__messages_with_data"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "7bde780f9659fc28c624651af1a2bfa6ff2bccee86ee95e06dbcecc2c5ec8aae"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_messages_id"], "time_spine": null}, "model.ton_models.core__fact_balances": {"database": "TON", "schema": "core", "name": "core__fact_balances", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_balances.sql", "original_file_path": "models/gold/core/core__fact_balances.sql", "unique_id": "model.ton_models.core__fact_balances", "fqn": ["ton_models", "gold", "core", "core__fact_balances"], "alias": "fact_balances", "checksum": {"name": "sha256", "checksum": "c9d74c43d22caa140b4ddc14be8f621e9558f0379c05ae2c7c8d93871f22cdd4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_balances_history_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains historical balance information for both native TON and Jetton balances. Tracks changes in balances over time.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the balance was recorded, converted from Unix timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Address of the asset owner.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "asset": {"name": "asset", "description": "Asset type, 'TON' for native TON or jetton address for Jetton balance.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Balance amount. For TON, this is in nanoTONs. For Jettons, this is the raw amount before dividing by 10^decimals.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mintless_claimed": {"name": "mintless_claimed", "description": "Boolean flag indicating if the mintless jetton was claimed (only applicable for mintless jetton wallets).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "Logical time of the balance update.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_balances_history_id": {"name": "fact_balances_history_id", "description": "Unique identifier for the balance history record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_balances_history_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address);"}, "created_at": 1747400127.6827512, "relation_name": "TON.core.fact_balances", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_balances_history_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(TIMESTAMP) AS block_timestamp,\n    address,\n    asset,\n    amount,\n    mintless_claimed,\n    lt,\n    balances_history_id AS fact_balances_history_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__balances_history') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__balances_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__balances_history"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "cd74cfe78364a5ad454e882bdedfb13cf9970602736a7ece2503373552ef6517"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_balances_history_id"], "time_spine": null}, "model.ton_models.core__fact_account_states": {"database": "TON", "schema": "core", "name": "core__fact_account_states", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_account_states.sql", "original_file_path": "models/gold/core/core__fact_account_states.sql", "unique_id": "model.ton_models.core__fact_account_states", "fqn": ["ton_models", "gold", "core", "core__fact_account_states"], "alias": "fact_account_states", "checksum": {"name": "sha256", "checksum": "a97308695ff7140775e710d454cff214150ef87cf70f2b44e57a331d0ec3fb7b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(account);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_account_states_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains information about TON account states, tracking changes in account balances, statuses, and transaction histories. Based on the account_states table from TON-ETL.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the account state was recorded, converted from Unix timestamp.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account": {"name": "account", "description": "TON account address in base64 format.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Unix timestamp when the account state was recorded.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_trans_lt": {"name": "last_trans_lt", "description": "Logical time of the last transaction associated with this account.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_tx_hash": {"name": "last_tx_hash", "description": "Hash of the last transaction associated with this account.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_status": {"name": "account_status", "description": "Current status of the account (active, uninitialized, or frozen).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "Current balance of the account in nanoTONs.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "frozen_hash": {"name": "frozen_hash", "description": "Hash of the frozen state if the account is frozen, otherwise null.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_hash": {"name": "account_state_hash", "description": "Hash of the account state.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_account_states_id": {"name": "fact_account_states_id", "description": "Unique identifier for the account state record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "CODE_BOC": {"name": "CODE_BOC", "description": "The code boc", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "CODE_HASH": {"name": "CODE_HASH", "description": "The code hash", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "DATA_BOC": {"name": "DATA_BOC", "description": "The data bloc\"", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "DATA_HASH": {"name": "DATA_HASH", "description": "The data hash", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_account_states_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(account);"}, "created_at": 1747400127.6774874, "relation_name": "TON.core.fact_account_states", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_account_states_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(account);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(TIMESTAMP) AS block_timestamp,\n    account,\n    TIMESTAMP,\n    last_trans_lt,\n    last_trans_hash AS last_tx_hash,\n    account_status,\n    balance,\n    frozen_hash,\n    code_boc,\n    code_hash,\n    data_boc,\n    data_hash,\n    HASH AS account_state_hash,\n    account_states_id AS fact_account_states_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__account_states') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__account_states", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__account_states"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "d070505755b68fa4247413756d4e2a8147e43bf8821c75970097aaabac87ec5e"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.core__dim_labels": {"database": "TON", "schema": "core", "name": "core__dim_labels", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__dim_labels.sql", "original_file_path": "models/gold/core/core__dim_labels.sql", "unique_id": "model.ton_models.core__dim_labels", "fqn": ["ton_models", "gold", "core", "core__dim_labels"], "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "68b46361ab9587422788b4248e3a1d4499264639c7b8a38db5b84af352a093e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address)", "transaction": true, "index": null}, {"sql": "DELETE FROM {{ this }} WHERE address in (select address from {{ ref('silver__crosschain_labels') }} where _is_deleted = TRUE);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["address"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "The labels table is a store of one-to-one address identifiers, or an address name. Labels are broken out into a \"type\" (such as cex, dex, dapp, games, etc.) and a \"subtype\" (ex: contract_deployer, hot_wallet, token_contract, etc.) in order to help classify each address name into similar groups. Our labels are sourced from many different places, but can primarily be grouped into two categories: automatic and manual. Automatic labels are continuously labeled based on certain criteria, such as a known contract deploying another contract, behavior based algorithms for finding deposit wallets, and consistent data pulls of custom protocol APIs. Manual labels are done periodically to find addresses that cannot be found programmatically such as finding new protocol addresses, centralized exchange hot wallets, or trending addresses. Labels can also be added by our community by using our add-a-label tool (https://science.flipsidecrypto.xyz/add-a-label/) or on-chain with near (https://near.social/lord1.near/widget/Form) and are reviewed by our labels team. A label can be removed by our labels team if it is found to be incorrect or no longer relevant; this generally will only happen for mislabeled deposit wallets.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Raw address string", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always ton. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the labeled address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "DIM_LABELS_ID": {"name": "DIM_LABELS_ID", "description": "Unique primary key for the dimension table, used as the main identifier for each record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when this record was inserted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when this record was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/core__dim_labels.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["address"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["scheduled_core"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address)", "DELETE FROM {{ this }} WHERE address in (select address from {{ ref('silver__crosschain_labels') }} where _is_deleted = TRUE);"]}, "created_at": 1747400127.7851064, "relation_name": "TON.core.dim_labels", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['address'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    post_hook = [\"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address)\", \"DELETE FROM {{ this }} WHERE address in (select address from {{ ref('silver__crosschain_labels') }} where _is_deleted = TRUE);\",],\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    address_name,\n    labels_combined_id AS dim_labels_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    {{ ref('silver__crosschain_labels') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__crosschain_labels", "package": null, "version": null}, {"name": "silver__crosschain_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__crosschain_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ADDRESS"], "time_spine": null}, "model.ton_models.core__fact_transactions": {"database": "TON", "schema": "core", "name": "core__fact_transactions", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_transactions.sql", "original_file_path": "models/gold/core/core__fact_transactions.sql", "unique_id": "model.ton_models.core__fact_transactions", "fqn": ["ton_models", "gold", "core", "core__fact_transactions"], "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "39eb939c97283834bbc95248d4527cb6ae7fe786f12dcbe63fd08ef84a0e23d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,prev_tx_hash,account);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_transactions_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains information about transactions in the TON blockchain, tracking account changes, fees, and computation results.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the transaction was processed, converted from now.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "Hash of the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_tx_hash": {"name": "prev_tx_hash", "description": "Hash of the previous transaction for the same account.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_succeeded": {"name": "tx_succeeded", "description": "Boolean flag indicating if the transaction succeeded. Set to FALSE if aborted is TRUE.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "aborted": {"name": "aborted", "description": "Boolean flag indicating if the transaction was aborted.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account": {"name": "account", "description": "Account address associated with the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "orig_status": {"name": "orig_status", "description": "Original status of the account before the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_status": {"name": "end_status", "description": "End status of the account after the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_success": {"name": "compute_success", "description": "Boolean flag indicating if the computation was successful.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_skipped": {"name": "compute_skipped", "description": "Boolean flag indicating if the computation was skipped.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_fees": {"name": "compute_gas_fees", "description": "Gas fees for the computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_result_code": {"name": "action_result_code", "description": "Result code for the action phase.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_success": {"name": "action_success", "description": "Boolean flag indicating if the action phase was successful.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_spec_actions": {"name": "action_spec_actions", "description": "Number of special actions performed.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_result_arg": {"name": "action_result_arg", "description": "Argument for the action result.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_skipped_actions": {"name": "action_skipped_actions", "description": "Number of actions that were skipped.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_valid": {"name": "action_valid", "description": "Boolean flag indicating if the action was valid.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_tot_actions": {"name": "action_tot_actions", "description": "Total number of actions.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_no_funds": {"name": "action_no_funds", "description": "Boolean flag indicating if there were insufficient funds for the action.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_status_change": {"name": "action_status_change", "description": "Status change during the action phase.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_msg_state_used": {"name": "compute_msg_state_used", "description": "Boolean flag indicating if the message state was used during computation.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "descr": {"name": "descr", "description": "Description or type of the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_workchain": {"name": "block_workchain", "description": "Workchain ID of the block containing this transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_seqno": {"name": "block_seqno", "description": "Sequence number of the block containing this transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_shard": {"name": "block_shard", "description": "Shard ID of the block containing this transaction.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_seqno": {"name": "mc_block_seqno", "description": "Masterchain block sequence number referenced by this transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_fees": {"name": "total_fees", "description": "Total fees for the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_fees_collected": {"name": "storage_fees_collected", "description": "Storage fees collected during the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credit_due_fees_collected": {"name": "credit_due_fees_collected", "description": "Credit fees collected during the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_total_fwd_fees": {"name": "action_total_fwd_fees", "description": "Total forward fees for actions.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_fees_due": {"name": "storage_fees_due", "description": "Storage fees due for the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_total_action_fees": {"name": "action_total_action_fees", "description": "Total fees for all actions.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_balance_before": {"name": "account_state_balance_before", "description": "Account balance before the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_balance_after": {"name": "account_state_balance_after", "description": "Account balance after the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_hash_before": {"name": "account_state_hash_before", "description": "Hash of the account state before the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_hash_after": {"name": "account_state_hash_after", "description": "Hash of the account state after the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_code_hash_before": {"name": "account_state_code_hash_before", "description": "Hash of the account code before the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_code_hash_after": {"name": "account_state_code_hash_after", "description": "Hash of the account code after the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "installed": {"name": "installed", "description": "Boolean flag indicating if code was installed during the transaction.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "destroyed": {"name": "destroyed", "description": "Boolean flag indicating if the account was destroyed during the transaction.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tock": {"name": "is_tock", "description": "Boolean flag indicating if this is a tick-tock transaction.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credit_first": {"name": "credit_first", "description": "Boolean flag indicating if credit was processed first.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_account_activated": {"name": "compute_account_activated", "description": "Boolean flag indicating if the account was activated during computation.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_vm_steps": {"name": "compute_vm_steps", "description": "Number of VM steps executed during computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_exit_arg": {"name": "compute_exit_arg", "description": "Exit argument from the computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_credit": {"name": "compute_gas_credit", "description": "Gas credit for the computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_limit": {"name": "compute_gas_limit", "description": "Gas limit for the computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_used": {"name": "compute_gas_used", "description": "Gas used during the computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_vm_init_state_hash": {"name": "compute_vm_init_state_hash", "description": "Hash of the VM's initial state during computation.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_vm_final_state_hash": {"name": "compute_vm_final_state_hash", "description": "Hash of the VM's final state after computation.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "skipped_reason": {"name": "skipped_reason", "description": "Reason for skipping the transaction if it was skipped.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_exit_code": {"name": "compute_exit_code", "description": "Exit code from the computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_status_change": {"name": "storage_status_change", "description": "Storage status change during the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_mode": {"name": "compute_mode", "description": "Mode of computation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credit": {"name": "credit", "description": "Credit amount for the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "Trace ID for the transaction.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "Logical time of the transaction.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_trans_lt": {"name": "prev_trans_lt", "description": "Logical time of the previous transaction for the same account.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "now": {"name": "now", "description": "Unix timestamp when the transaction was processed.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_transactions_id": {"name": "fact_transactions_id", "description": "Unique identifier for the transaction record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_transactions_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["scheduled_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,prev_tx_hash,account);"}, "created_at": 1747400127.7378864, "relation_name": "TON.core.fact_transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_transactions_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_hash,prev_tx_hash,account);\",\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(now) AS block_timestamp,\n    HASH AS tx_hash,\n    prev_trans_hash AS prev_tx_hash,\n    CASE\n        WHEN aborted THEN FALSE\n        ELSE TRUE\n    END tx_succeeded,\n    aborted,\n    account,\n    orig_status,\n    end_status,\n    compute_success,\n    compute_skipped,\n    compute_gas_fees,\n    action_result_code,\n    action_success,\n    action_spec_actions,\n    action_result_arg,\n    action_skipped_actions,\n    action_valid,\n    action_tot_actions,\n    action_no_funds,\n    action_status_change,\n    compute_msg_state_used,\n    descr,\n    block_workchain,\n    block_seqno,\n    block_shard,\n    mc_block_seqno,\n    total_fees,\n    storage_fees_collected,\n    credit_due_fees_collected,\n    action_total_fwd_fees,\n    storage_fees_due,\n    action_total_action_fees,\n    account_state_balance_before,\n    account_state_balance_after,\n    account_state_hash_before,\n    account_state_hash_after,\n    account_state_code_hash_before,\n    account_state_code_hash_after,\n    installed,\n    destroyed,\n    is_tock,\n    credit_first,\n    compute_account_activated,\n    compute_vm_steps,\n    compute_exit_arg,\n    compute_gas_credit,\n    compute_gas_limit,\n    compute_gas_used,\n    compute_vm_init_state_hash,\n    compute_vm_final_state_hash,\n    skipped_reason,\n    compute_exit_code,\n    storage_status_change,\n    compute_mode,\n    credit,\n    trace_id,\n    lt,\n    prev_trans_lt,\n    now,\n    transactions_id AS fact_transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e393340caaeed4e184bca04105ab4febcad732afcb66fdbe063c8aeb0ee2d2bc"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_transactions_id"], "time_spine": null}, "model.ton_models.core__fact_blocks": {"database": "TON", "schema": "core", "name": "core__fact_blocks", "resource_type": "model", "package_name": "ton_models", "path": "gold/core/core__fact_blocks.sql", "original_file_path": "models/gold/core/core__fact_blocks.sql", "unique_id": "model.ton_models.core__fact_blocks", "fqn": ["ton_models", "gold", "core", "core__fact_blocks"], "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "eff633e2c1e5d4ad31de8a05f57dfba26a321cae501fb45b707e405e850117bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_blocks_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "workchain"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["scheduled_core"], "description": "Contains information about blocks in the TON blockchain (masterchain and workchains). Represents the blockchain structure.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block, converted from gen_utime.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gen_utime": {"name": "gen_utime", "description": "Unix timestamp when the block was generated.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "workchain": {"name": "workchain", "description": "Workchain ID where the block was created (usually -1 for masterchain, 0 for base workchain).", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Version of the block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "shard": {"name": "shard", "description": "Shard identifier for the block.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "seqno": {"name": "seqno", "description": "Block sequence number within its workchain.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vert_seqno": {"name": "vert_seqno", "description": "Vertical sequence number for the block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lt": {"name": "start_lt", "description": "Starting logical time of the block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lt": {"name": "end_lt", "description": "Ending logical time of the block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_seqno": {"name": "mc_block_seqno", "description": "Masterchain block sequence number referenced by this block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_shard": {"name": "mc_block_shard", "description": "Masterchain block shard referenced by this block.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_count": {"name": "tx_count", "description": "Number of transactions in the block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "global_id": {"name": "global_id", "description": "Global identifier for the TON network.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by": {"name": "created_by", "description": "Validator that created the block.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "want_merge": {"name": "want_merge", "description": "Flag indicating if the block wants to be merged.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "root_hash": {"name": "root_hash", "description": "Root hash of the block.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "key_block": {"name": "key_block", "description": "Boolean flag indicating if this is a key block.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vert_seqno_incr": {"name": "vert_seqno_incr", "description": "Increment of vertical sequence number.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_list_hash_short": {"name": "validator_list_hash_short", "description": "Short hash of the validator list.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "after_merge": {"name": "after_merge", "description": "Flag indicating if the block was created after a merge.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "want_split": {"name": "want_split", "description": "Flag indicating if the block wants to be split.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "after_split": {"name": "after_split", "description": "Flag indicating if the block was created after a split.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "master_ref_seqno": {"name": "master_ref_seqno", "description": "Masterchain reference sequence number.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_workchain": {"name": "mc_block_workchain", "description": "Masterchain block workchain referenced by this block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "file_hash": {"name": "file_hash", "description": "Hash of the block file.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_key_block_seqno": {"name": "prev_key_block_seqno", "description": "Sequence number of the previous key block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "flags": {"name": "flags", "description": "Flags associated with the block.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rand_seed": {"name": "rand_seed", "description": "Random seed used in block generation.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gen_catchain_seqno": {"name": "gen_catchain_seqno", "description": "Catchain sequence number used in block generation.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_ref_mc_seqno": {"name": "min_ref_mc_seqno", "description": "Minimum referenced masterchain sequence number.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "before_split": {"name": "before_split", "description": "Flag indicating if the block was created before a split.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fact_blocks_id": {"name": "fact_blocks_id", "description": "Unique identifier for the block record.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "Timestamp when the record was inserted into the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "Timestamp when the record was last modified in the data warehouse.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["fact_blocks_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE", "workchain"], "tags": ["scheduled_core"]}, "created_at": 1747400127.6947536, "relation_name": "TON.core.fact_blocks", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_blocks_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE','workchain'],\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    TO_TIMESTAMP(gen_utime) AS block_timestamp,\n    gen_utime,\n    workchain,\n    version,\n    shard,\n    seqno,\n    vert_seqno,\n    start_lt,\n    end_lt,\n    mc_block_seqno,\n    mc_block_shard,\n    tx_count,\n    global_id,\n    created_by,\n    want_merge,\n    root_hash,\n    key_block,\n    vert_seqno_incr,\n    validator_list_hash_short,\n    after_merge,\n    want_split,\n    after_split,\n    master_ref_seqno,\n    mc_block_workchain,\n    file_hash,\n    prev_key_block_seqno,\n    flags,\n    rand_seed,\n    gen_catchain_seqno,\n    min_ref_mc_seqno,\n    before_split,\n    blocks_id AS fact_blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__blocks') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ton_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "48cbefd6aab906672e105c2a53f63c646244fa4c055e2bcb25107e475d7885cc"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fact_blocks_id"], "time_spine": null}, "model.ton_models.silver__dex_pools": {"database": "TON", "schema": "silver", "name": "silver__dex_pools", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__dex_pools.sql", "original_file_path": "models/silver/core/silver__dex_pools.sql", "unique_id": "model.ton_models.silver__dex_pools", "fqn": ["ton_models", "silver", "core", "silver__dex_pools"], "alias": "dex_pools", "checksum": {"name": "sha256", "checksum": "9c1bae827f3b190b80bd3209eaeb0dae93654a14fea80b8c31b3ce52a5364a2c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reserves_right": {"name": "reserves_right", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dex_pools_id": {"name": "dex_pools_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discovered_at": {"name": "discovered_at", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_liquid": {"name": "is_liquid", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_left": {"name": "jetton_left", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_right": {"name": "jetton_right", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_updated": {"name": "last_updated", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lp_fee": {"name": "lp_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool": {"name": "pool", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "protocol_fee": {"name": "protocol_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "referral_fee": {"name": "referral_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reserves_left": {"name": "reserves_left", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_supply": {"name": "total_supply", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tvl_ton": {"name": "tvl_ton", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tvl_usd": {"name": "tvl_usd", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8470385, "relation_name": "TON.silver.dex_pools", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        reserves_right,\n        project,\n        pool,\n        protocol_fee,\n        last_updated,\n        discovered_at,\n        version,\n        jetton_right,\n        tvl_ton,\n        jetton_left,\n        reserves_left,\n        referral_fee,\n        is_liquid,\n        total_supply,\n        tvl_usd,\n        lp_fee,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__dex_pools') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY pool,\n        last_updated\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    reserves_right,\n    project,\n    pool,\n    protocol_fee,\n    last_updated,\n    discovered_at,\n    version,\n    jetton_right,\n    tvl_ton,\n    jetton_left,\n    reserves_left,\n    referral_fee,\n    is_liquid,\n    total_supply,\n    tvl_usd,\n    lp_fee,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['pool','last_updated']\n    ) }} AS dex_pools_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__dex_pools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__dex_pools"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "271d0dd9ea6ab9021611bd9363059a2611bfa900279c43ba064e85b720db4e69"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__blocks": {"database": "TON", "schema": "silver", "name": "silver__blocks", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__blocks.sql", "original_file_path": "models/silver/core/silver__blocks.sql", "unique_id": "model.ton_models.silver__blocks", "fqn": ["ton_models", "silver", "core", "silver__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "deba75d5c2bb9a841af73945dc6fc8b3cf2f13068ed40a96829720d23f467a80"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by": {"name": "created_by", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lt": {"name": "end_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "want_merge": {"name": "want_merge", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gen_utime": {"name": "gen_utime", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_count": {"name": "tx_count", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "global_id": {"name": "global_id", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "root_hash": {"name": "root_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "key_block": {"name": "key_block", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_seqno": {"name": "mc_block_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vert_seqno_incr": {"name": "vert_seqno_incr", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_list_hash_short": {"name": "validator_list_hash_short", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "after_merge": {"name": "after_merge", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "want_split": {"name": "want_split", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "after_split": {"name": "after_split", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "master_ref_seqno": {"name": "master_ref_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_workchain": {"name": "mc_block_workchain", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "file_hash": {"name": "file_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_key_block_seqno": {"name": "prev_key_block_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "shard": {"name": "shard", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "seqno": {"name": "seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vert_seqno": {"name": "vert_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "flags": {"name": "flags", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rand_seed": {"name": "rand_seed", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gen_catchain_seqno": {"name": "gen_catchain_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_ref_mc_seqno": {"name": "min_ref_mc_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lt": {"name": "start_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_shard": {"name": "mc_block_shard", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "before_split": {"name": "before_split", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "workchain": {"name": "workchain", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blocks_id": {"name": "blocks_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.844307, "relation_name": "TON.silver.blocks", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        version,\n        created_by,\n        end_lt,\n        want_merge,\n        gen_utime,\n        tx_count,\n        global_id,\n        root_hash,\n        key_block,\n        mc_block_seqno,\n        vert_seqno_incr,\n        validator_list_hash_short,\n        after_merge,\n        want_split,\n        after_split,\n        master_ref_seqno,\n        mc_block_workchain,\n        file_hash,\n        prev_key_block_seqno,\n        shard,\n        seqno,\n        vert_seqno,\n        flags,\n        rand_seed,\n        gen_catchain_seqno,\n        min_ref_mc_seqno,\n        start_lt,\n        mc_block_shard,\n        before_split,\n        workchain,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__blocks') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY seqno,\n        shard,\n        workchain\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    version,\n    created_by,\n    end_lt,\n    want_merge,\n    gen_utime,\n    tx_count,\n    global_id,\n    root_hash,\n    key_block,\n    mc_block_seqno,\n    vert_seqno_incr,\n    validator_list_hash_short,\n    after_merge,\n    want_split,\n    after_split,\n    master_ref_seqno,\n    mc_block_workchain,\n    file_hash,\n    prev_key_block_seqno,\n    shard,\n    seqno,\n    vert_seqno,\n    flags,\n    rand_seed,\n    gen_catchain_seqno,\n    min_ref_mc_seqno,\n    start_lt,\n    mc_block_shard,\n    before_split,\n    workchain,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['shard','seqno','workchain']\n    ) }} AS blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__blocks"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "8b0e452e0c163b02bb869f6524099679864edb0d46cd8545a26a38dd9be06988"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__nft_sales": {"database": "TON", "schema": "silver", "name": "silver__nft_sales", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__nft_sales.sql", "original_file_path": "models/silver/core/silver__nft_sales.sql", "unique_id": "model.ton_models.silver__nft_sales", "fqn": ["ton_models", "silver", "core", "silver__nft_sales"], "alias": "nft_sales", "checksum": {"name": "sha256", "checksum": "a96765afe834ddbc56e0678e996dd055d79bf68db218eb2ce73a96ee0c8bb920"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_canceled": {"name": "is_canceled", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee_address": {"name": "marketplace_fee_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_complete": {"name": "is_complete", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_member": {"name": "last_member", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_address": {"name": "marketplace_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_amount": {"name": "royalty_amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_address": {"name": "nft_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee": {"name": "marketplace_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "asset": {"name": "asset", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_owner_address": {"name": "nft_owner_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_bid": {"name": "min_bid", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_address": {"name": "royalty_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_step": {"name": "min_step", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_bid": {"name": "max_bid", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_bid_at": {"name": "last_bid_at", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_sales_id": {"name": "nft_sales_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8705857, "relation_name": "TON.silver.nft_sales", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        is_canceled,\n        marketplace_fee_address,\n        end_time,\n        is_complete,\n        last_member,\n        marketplace_address,\n        royalty_amount,\n        created_at,\n        nft_address,\n        marketplace_fee,\n        asset,\n        price,\n        nft_owner_address,\n        address,\n        min_bid,\n        TIMESTAMP,\n        royalty_address,\n        min_step,\n        max_bid,\n        last_bid_at,\n        lt,\n        TYPE,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__nft_sales') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY seqno,\n        shard,\n        workchain\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    is_canceled,\n    marketplace_fee_address,\n    end_time,\n    is_complete,\n    last_member,\n    marketplace_address,\n    royalty_amount,\n    created_at,\n    nft_address,\n    marketplace_fee,\n    asset,\n    price,\n    nft_owner_address,\n    address,\n    min_bid,\n    TIMESTAMP,\n    royalty_address,\n    min_step,\n    max_bid,\n    last_bid_at,\n    lt,\n    TYPE,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['address','nft_address','timestamp']\n    ) }} AS nft_sales_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__nft_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__nft_sales"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "02f3cc028b3a6049cb07cf615a97e8be99bdb5f39d466755fb08881dc2b01e21"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__dex_trades": {"database": "TON", "schema": "silver", "name": "silver__dex_trades", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__dex_trades.sql", "original_file_path": "models/silver/core/silver__dex_trades.sql", "unique_id": "model.ton_models.silver__dex_trades", "fqn": ["ton_models", "silver", "core", "silver__dex_trades"], "alias": "dex_trades", "checksum": {"name": "sha256", "checksum": "8e1ff4d51089691d247675fd92036021690d14bc4b5c3290958ef8aa7e9a4816"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "volume_ton": {"name": "volume_ton", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_bought_raw": {"name": "amount_bought_raw", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_sold_raw": {"name": "amount_sold_raw", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dex_trades_id": {"name": "dex_trades_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_time": {"name": "event_time", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "platform_tag": {"name": "platform_tag", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project_type": {"name": "project_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "referral_address": {"name": "referral_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "router_address": {"name": "router_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_bought_address": {"name": "token_bought_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_sold_address": {"name": "token_sold_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trader_address": {"name": "trader_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "volume_usd": {"name": "volume_usd", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8499353, "relation_name": "TON.silver.dex_trades", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        volume_ton,\n        referral_address,\n        token_bought_address,\n        pool_address,\n        project_type,\n        amount_bought_raw,\n        router_address,\n        version,\n        trace_id,\n        volume_usd,\n        token_sold_address,\n        project,\n        event_time,\n        tx_hash,\n        trader_address,\n        event_type,\n        amount_sold_raw,\n        platform_tag,\n        query_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__dex_trades') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY tx_hash,\n        trace_id\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    volume_ton,\n    referral_address,\n    token_bought_address,\n    pool_address,\n    project_type,\n    amount_bought_raw,\n    router_address,\n    version,\n    trace_id,\n    volume_usd,\n    token_sold_address,\n    project,\n    event_time,\n    tx_hash,\n    trader_address,\n    event_type,\n    amount_sold_raw,\n    platform_tag,\n    query_id,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_hash','trace_id','event_type']\n    ) }} AS dex_trades_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__dex_trades", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__dex_trades"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "df4d9842a39c4a078d2063c3664f349194fb3f7673c9e14e306c81d0187a126f"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__account_states": {"database": "TON", "schema": "silver", "name": "silver__account_states", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__account_states.sql", "original_file_path": "models/silver/core/silver__account_states.sql", "unique_id": "model.ton_models.silver__account_states", "fqn": ["ton_models", "silver", "core", "silver__account_states"], "alias": "account_states", "checksum": {"name": "sha256", "checksum": "18fcbbd0262968c0fd333427ff5c65f003013564bc9c23448db2cdf85a50d4d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account": {"name": "account", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_states_id": {"name": "account_states_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_status": {"name": "account_status", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code_boc": {"name": "code_boc", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code_hash": {"name": "code_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_boc": {"name": "data_boc", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_hash": {"name": "data_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "frozen_hash": {"name": "frozen_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash": {"name": "hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_trans_hash": {"name": "last_trans_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_trans_lt": {"name": "last_trans_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8384547, "relation_name": "TON.silver.account_states", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core'],\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        account,\n        last_trans_lt,\n        last_trans_hash,\n        account_status,\n        balance,\n        data_boc,\n        data_hash,\n        frozen_hash,\n        TIMESTAMP,\n        code_hash,\n        code_boc,\n        HASH,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__account_states') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY account,\n        TIMESTAMP\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    account,\n    last_trans_lt,\n    last_trans_hash,\n    account_status,\n    balance,\n    data_boc,\n    data_hash,\n    frozen_hash,\n    TIMESTAMP,\n    code_hash,\n    code_boc,\n    HASH,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['account','timestamp']\n    ) }} AS account_states_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__account_states", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__account_states"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "1e91a8a175945630602c531890f8f601d3921873681ff32783af7dd0dd0cc8f7"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__nft_transfers": {"database": "TON", "schema": "silver", "name": "silver__nft_transfers", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__nft_transfers.sql", "original_file_path": "models/silver/core/silver__nft_transfers.sql", "unique_id": "model.ton_models.silver__nft_transfers", "fqn": ["ton_models", "silver", "core", "silver__nft_transfers"], "alias": "nft_transfers", "checksum": {"name": "sha256", "checksum": "3c72e8a88cf9b7b3e399dc268404ab7885f48d1cbe7d0ab8cbddad849c8c5f43"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_now": {"name": "tx_now", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "custom_payload": {"name": "custom_payload", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "new_owner": {"name": "new_owner", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_payload": {"name": "forward_payload", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "old_owner": {"name": "old_owner", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_aborted": {"name": "tx_aborted", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_lt": {"name": "tx_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "response_destination": {"name": "response_destination", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_collection_address": {"name": "nft_collection_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_amount": {"name": "forward_amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_address": {"name": "nft_item_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_index": {"name": "nft_item_index", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_transfers_id": {"name": "nft_transfers_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8738527, "relation_name": "TON.silver.nft_transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        trace_id,\n        tx_now,\n        custom_payload,\n        new_owner,\n        forward_payload,\n        COMMENT,\n        old_owner,\n        tx_aborted,\n        query_id,\n        tx_hash,\n        tx_lt,\n        response_destination,\n        nft_collection_address,\n        forward_amount,\n        nft_item_address,\n        nft_item_index,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__nft_transfers') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY seqno,\n        shard,\n        workchain\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    trace_id,\n    tx_now,\n    custom_payload,\n    new_owner,\n    forward_payload,\n    COMMENT,\n    old_owner,\n    tx_aborted,\n    query_id,\n    tx_hash,\n    tx_lt,\n    response_destination,\n    nft_collection_address,\n    forward_amount,\n    nft_item_address,\n    nft_item_index,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_hash']\n    ) }} AS nft_transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__nft_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__nft_transfers"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "daef87175d2d48149ba61491a247ae9505fc8d9caba7ce4c33aec1073cfb5551"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__jetton_metadata": {"database": "TON", "schema": "silver", "name": "silver__jetton_metadata", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__jetton_metadata.sql", "original_file_path": "models/silver/core/silver__jetton_metadata.sql", "unique_id": "model.ton_models.silver__jetton_metadata", "fqn": ["ton_models", "silver", "core", "silver__jetton_metadata"], "alias": "jetton_metadata", "checksum": {"name": "sha256", "checksum": "be82581dd81c9bbbc908ec63875353b0c9791c61f1ce144dfa70f0cabb340d4b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-11-14T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "adding_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["adding_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"adding_date": {"name": "adding_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tonapi_image_url": {"name": "tonapi_image_url", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "adding_at": {"name": "adding_at", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "admin_address": {"name": "admin_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code_hash": {"name": "code_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "decimals": {"name": "decimals", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image": {"name": "image", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_data": {"name": "image_data", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_content_onchain": {"name": "jetton_content_onchain", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_metadata_id": {"name": "jetton_metadata_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_wallet_code_hash": {"name": "jetton_wallet_code_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metadata_status": {"name": "metadata_status", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mintable": {"name": "mintable", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sources": {"name": "sources", "description": "", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "symbol": {"name": "symbol", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_metadata": {"name": "update_time_metadata", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_onchain": {"name": "update_time_onchain", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "adding_date", "begin": "2024-11-14", "batch_size": "day", "cluster_by": ["adding_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8557384, "relation_name": "TON.silver.jetton_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'adding_date',\n    begin = '2024-11-14',\n    batch_size = 'day',\n    cluster_by = ['adding_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        adding_date,\n        tonapi_image_url,\n        image_data,\n        image,\n        update_time_onchain,\n        symbol,\n        jetton_content_onchain,\n        update_time_metadata,\n        NAME,\n        jetton_wallet_code_hash,\n        code_hash,\n        admin_address,\n        adding_at,\n        address,\n        sources,\n        mintable,\n        decimals,\n        metadata_status,\n        description,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__jetton_metadata') }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY address,\n            update_time_metadata,\n            update_time_onchain\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n)\nSELECT\n    adding_date,\n    tonapi_image_url,\n    image_data,\n    image,\n    update_time_onchain,\n    symbol,\n    jetton_content_onchain,\n    update_time_metadata,\n    NAME,\n    jetton_wallet_code_hash,\n    code_hash,\n    admin_address,\n    adding_at,\n    address,\n    sources,\n    mintable,\n    decimals,\n    metadata_status,\n    description,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['address','update_time_metadata','update_time_onchain']\n    ) }} AS jetton_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__jetton_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__jetton_metadata"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "2a2d9ddbbe73b16ae52d16eb6a59866dede7db3d6586d2e5697bf86d5fde5de9"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__nft_events": {"database": "TON", "schema": "silver", "name": "silver__nft_events", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__nft_events.sql", "original_file_path": "models/silver/core/silver__nft_events.sql", "unique_id": "model.ton_models.silver__nft_events", "fqn": ["ton_models", "silver", "core", "silver__nft_events"], "alias": "nft_events", "checksum": {"name": "sha256", "checksum": "459b7316eb14cd8e88001576be0e9f90a460228a0887b8dcba29a225194fde68"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_price": {"name": "sale_price", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_address": {"name": "royalty_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_asset": {"name": "payment_asset", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee_address": {"name": "marketplace_fee_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_address": {"name": "owner_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_address": {"name": "collection_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "content_onchain": {"name": "content_onchain", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_contract": {"name": "sale_contract", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_amount": {"name": "forward_amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_index": {"name": "nft_item_index", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_init": {"name": "is_init", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_item_address": {"name": "nft_item_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "custom_payload": {"name": "custom_payload", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_end_time": {"name": "sale_end_time", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sale_type": {"name": "sale_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "auction_max_bid": {"name": "auction_max_bid", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "auction_min_bid": {"name": "auction_min_bid", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_address": {"name": "marketplace_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_payload": {"name": "forward_payload", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "royalty_amount": {"name": "royalty_amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "auction_min_step": {"name": "auction_min_step", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_owner": {"name": "prev_owner", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_fee": {"name": "marketplace_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_events_id": {"name": "nft_events_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8625479, "relation_name": "TON.silver.nft_events", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        sale_price,\n        royalty_address,\n        payment_asset,\n        marketplace_fee_address,\n        owner_address,\n        collection_address,\n        content_onchain,\n        trace_id,\n        sale_contract,\n        forward_amount,\n        nft_item_index,\n        query_id,\n        is_init,\n        TIMESTAMP,\n        nft_item_address,\n        custom_payload,\n        COMMENT,\n        sale_end_time,\n        sale_type,\n        auction_max_bid,\n        auction_min_bid,\n        marketplace_address,\n        forward_payload,\n        royalty_amount,\n        auction_min_step,\n        TYPE,\n        prev_owner,\n        tx_hash,\n        marketplace_fee,\n        lt,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__nft_events') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY tx_hash,\n        nft_item_index,\n        TIMESTAMP,\n        TYPE\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    sale_price,\n    royalty_address,\n    payment_asset,\n    marketplace_fee_address,\n    owner_address,\n    collection_address,\n    content_onchain,\n    trace_id,\n    sale_contract,\n    forward_amount,\n    nft_item_index,\n    query_id,\n    is_init,\n    TIMESTAMP,\n    nft_item_address,\n    custom_payload,\n    COMMENT,\n    sale_end_time,\n    sale_type,\n    auction_max_bid,\n    auction_min_bid,\n    marketplace_address,\n    forward_payload,\n    royalty_amount,\n    auction_min_step,\n    TYPE,\n    prev_owner,\n    tx_hash,\n    marketplace_fee,\n    lt,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['nft_item_address','nft_item_index','timestamp','type','lt']\n    ) }} AS nft_events_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__nft_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__nft_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "5d3f8fc363bf28eb4145f71bd4839b7d040d3d7e96e491e69263b149920a7a80"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__messages_with_data": {"database": "TON", "schema": "silver", "name": "silver__messages_with_data", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__messages_with_data.sql", "original_file_path": "models/silver/core/silver__messages_with_data.sql", "unique_id": "model.ton_models.silver__messages_with_data", "fqn": ["ton_models", "silver", "core", "silver__messages_with_data"], "alias": "messages_with_data", "checksum": {"name": "sha256", "checksum": "3e7b9c1f0802dd752f12fdd3427c6c22b3c57ba5a469edd33448d06f13f62eaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "body_boc": {"name": "body_boc", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "body_hash": {"name": "body_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bounce": {"name": "bounce", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bounced": {"name": "bounced", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_lt": {"name": "created_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "destination": {"name": "destination", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "direction": {"name": "direction", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fwd_fee": {"name": "fwd_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ihr_disabled": {"name": "ihr_disabled", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ihr_fee": {"name": "ihr_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "import_fee": {"name": "import_fee", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "init_state_boc": {"name": "init_state_boc", "description": "", "meta": {}, "data_type": "BINARY", "constraints": [], "quote": null, "tags": [], "granularity": null}, "init_state_hash": {"name": "init_state_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "messages_with_data_id": {"name": "messages_with_data_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "msg_hash": {"name": "msg_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "opcode": {"name": "opcode", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_lt": {"name": "tx_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_now": {"name": "tx_now", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_value": {"name": "_value", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8589613, "relation_name": "TON.silver.messages_with_data", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        body_boc,\n        created_lt,\n        init_state_hash,\n        opcode,\n        trace_id,\n        bounced,\n        body_hash,\n        direction,\n        tx_lt,\n        tx_hash,\n        ihr_fee,\n        init_state_boc,\n        created_at,\n        source,\n        msg_hash,\n        ihr_disabled,\n        tx_now,\n        bounce,\n        _VALUE,\n        import_fee,\n        destination,\n        COMMENT,\n        fwd_fee,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__messages_with_data') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY tx_hash,\n        msg_hash\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    body_boc,\n    created_lt,\n    init_state_hash,\n    opcode,\n    trace_id,\n    bounced,\n    body_hash,\n    direction,\n    tx_lt,\n    tx_hash,\n    ihr_fee,\n    init_state_boc,\n    created_at,\n    source,\n    msg_hash,\n    ihr_disabled,\n    tx_now,\n    bounce,\n    _VALUE,\n    import_fee,\n    destination,\n    COMMENT,\n    fwd_fee,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_hash','msg_hash']\n    ) }} AS messages_with_data_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__messages_with_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__messages_with_data"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "be60bd058061f9f7daaace7f113285a1229e545c2755ff533acfd63f8d0431ba"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__jetton_events": {"database": "TON", "schema": "silver", "name": "silver__jetton_events", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__jetton_events.sql", "original_file_path": "models/silver/core/silver__jetton_events.sql", "unique_id": "model.ton_models.silver__jetton_events", "fqn": ["ton_models", "silver", "core", "silver__jetton_events"], "alias": "jetton_events", "checksum": {"name": "sha256", "checksum": "dd86a7b9b791ca1719c7c9813e4f0667cf5700b6158fd70e38a80a3bed778ada"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_hash": {"name": "tx_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "destination": {"name": "destination", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forward_ton_amount": {"name": "forward_ton_amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_events_id": {"name": "jetton_events_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_master": {"name": "jetton_master", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "jetton_wallet": {"name": "jetton_wallet", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_aborted": {"name": "tx_aborted", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_lt": {"name": "tx_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "utime": {"name": "utime", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8525765, "relation_name": "TON.silver.jetton_events", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        tx_hash,\n        TYPE,\n        VALUE :jetton_master :: STRING AS jetton_master,\n        VALUE :jetton_wallet :: STRING AS jetton_wallet,\n        COMMENT,\n        forward_ton_amount,\n        amount,\n        utime,\n        tx_lt,\n        source,\n        tx_aborted,\n        query_id,\n        destination,\n        VALUE :trace_id :: STRING AS trace_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__jetton_events') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY tx_hash\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    tx_hash,\n    TYPE,\n    jetton_master,\n    jetton_wallet,\n    COMMENT,\n    forward_ton_amount,\n    amount,\n    utime,\n    tx_lt,\n    source,\n    tx_aborted,\n    query_id,\n    trace_id,\n    destination,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_hash']\n    ) }} AS jetton_events_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__jetton_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__jetton_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "919b24966706100479e91ac3172a41e2cae009fe6098d15e781a75c06d177c2c"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__nft_metadata": {"database": "TON", "schema": "silver", "name": "silver__nft_metadata", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__nft_metadata.sql", "original_file_path": "models/silver/core/silver__nft_metadata.sql", "unique_id": "model.ton_models.silver__nft_metadata", "fqn": ["ton_models", "silver", "core", "silver__nft_metadata"], "alias": "nft_metadata", "checksum": {"name": "sha256", "checksum": "bf529d82aedaa51bdf2f78d7922291736637fbb5e151ec15a6eb2f41e8fb2760"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-11-14T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "adding_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["adding_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"adding_date": {"name": "adding_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image": {"name": "image", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metadata_status": {"name": "metadata_status", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_address": {"name": "parent_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_metadata": {"name": "update_time_metadata", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "adding_at": {"name": "adding_at", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_time_onchain": {"name": "update_time_onchain", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tonapi_image_url": {"name": "tonapi_image_url", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "content_onchain": {"name": "content_onchain", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attributes": {"name": "attributes", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sources": {"name": "sources", "description": "", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_data": {"name": "image_data", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_metadata_id": {"name": "nft_metadata_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "adding_date", "begin": "2024-11-14", "batch_size": "day", "cluster_by": ["adding_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8676782, "relation_name": "TON.silver.nft_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'adding_date',\n    begin = '2024-11-14',\n    batch_size = 'day',\n    cluster_by = ['adding_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        adding_date,\n        description,\n        image,\n        metadata_status,\n        parent_address,\n        update_time_metadata,\n        adding_at,\n        update_time_onchain,\n        address,\n        tonapi_image_url,\n        content_onchain,\n        TYPE,\n        attributes,\n        NAME,\n        sources,\n        image_data,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__nft_metadata') }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY parent_address,\n            address,\n            update_time_metadata,\n            update_time_onchain\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n)\nSELECT\n    adding_date,\n    description,\n    image,\n    metadata_status,\n    parent_address,\n    update_time_metadata,\n    adding_at,\n    update_time_onchain,\n    address,\n    tonapi_image_url,\n    content_onchain,\n    TYPE,\n    attributes,\n    NAME,\n    sources,\n    image_data,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['parent_address','address','update_time_metadata','update_time_onchain']\n    ) }} AS nft_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__nft_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__nft_metadata"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "15af5779a43697785e50a288a606528bba5a1e8567e374cfbef11a8aafe38625"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__nft_items": {"database": "TON", "schema": "silver", "name": "silver__nft_items", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__nft_items.sql", "original_file_path": "models/silver/core/silver__nft_items.sql", "unique_id": "model.ton_models.silver__nft_items", "fqn": ["ton_models", "silver", "core", "silver__nft_items"], "alias": "nft_items", "checksum": {"name": "sha256", "checksum": "23ff22928bb030968970510d1b6de510fbe86666f26f79f2d858f00c0a7b37c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_address": {"name": "collection_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_init": {"name": "is_init", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_address": {"name": "owner_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "content_onchain": {"name": "content_onchain", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nft_items_id": {"name": "nft_items_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8649573, "relation_name": "TON.silver.nft_items", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        collection_address,\n        is_init,\n        lt,\n        TIMESTAMP,\n        address,\n        owner_address,\n        INDEX,\n        content_onchain,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__nft_items') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY seqno,\n        shard,\n        workchain\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    collection_address,\n    is_init,\n    lt,\n    TIMESTAMP,\n    address,\n    owner_address,\n    INDEX,\n    content_onchain,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['collection_address','address','index','timestamp']\n    ) }} AS nft_items_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__nft_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__nft_items"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e2dd29a82d9578d5a7ebb4c4b82b96c3d943ce118ff133d7f525b8534637de4d"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__balances_history": {"database": "TON", "schema": "silver", "name": "silver__balances_history", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__balances_history.sql", "original_file_path": "models/silver/core/silver__balances_history.sql", "unique_id": "model.ton_models.silver__balances_history", "fqn": ["ton_models", "silver", "core", "silver__balances_history"], "alias": "balances_history", "checksum": {"name": "sha256", "checksum": "aa67abec590aaf1df592133b70f8e9d090823d572fddcc37c817d6d827ed1e74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "asset": {"name": "asset", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balances_history_id": {"name": "balances_history_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mintless_claimed": {"name": "mintless_claimed", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8409784, "relation_name": "TON.silver.balances_history", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        lt,\n        asset,\n        address,\n        amount,\n        TIMESTAMP,\n        mintless_claimed,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__balances_history') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY address,\n        asset,\n        TIMESTAMP\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    lt,\n    asset,\n    address,\n    amount,\n    TIMESTAMP,\n    mintless_claimed,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['address','asset','TIMESTAMP']\n    ) }} AS balances_history_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__balances_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__balances_history"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "dae5071dd6234ad8d8c0e72fccc163824ca6b39fac330ad8374a4487f2615af2"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__transactions": {"database": "TON", "schema": "silver", "name": "silver__transactions", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__transactions.sql", "original_file_path": "models/silver/core/silver__transactions.sql", "unique_id": "model.ton_models.silver__transactions", "fqn": ["ton_models", "silver", "core", "silver__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "28899ac675cb74f01d83017e569d4d9a8fdaaf3f4165164a46594ded2236e480"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01T00:00:00", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {"block_date": {"name": "block_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_success": {"name": "compute_success", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_fees": {"name": "total_fees", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "orig_status": {"name": "orig_status", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_skipped": {"name": "compute_skipped", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_fees": {"name": "compute_gas_fees", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_result_code": {"name": "action_result_code", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "destroyed": {"name": "destroyed", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_success": {"name": "action_success", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_msg_state_used": {"name": "compute_msg_state_used", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tock": {"name": "is_tock", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_hash_after": {"name": "account_state_hash_after", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_spec_actions": {"name": "action_spec_actions", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "descr": {"name": "descr", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_balance_before": {"name": "account_state_balance_before", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash": {"name": "hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_result_arg": {"name": "action_result_arg", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "aborted": {"name": "aborted", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mc_block_seqno": {"name": "mc_block_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_account_activated": {"name": "compute_account_activated", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_skipped_actions": {"name": "action_skipped_actions", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "now": {"name": "now", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credit_due_fees_collected": {"name": "credit_due_fees_collected", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_shard": {"name": "block_shard", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_status": {"name": "end_status", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credit_first": {"name": "credit_first", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_trans_hash": {"name": "prev_trans_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_workchain": {"name": "block_workchain", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account": {"name": "account", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_vm_steps": {"name": "compute_vm_steps", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_fees_collected": {"name": "storage_fees_collected", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_exit_arg": {"name": "compute_exit_arg", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_valid": {"name": "action_valid", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_status_change": {"name": "action_status_change", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "installed": {"name": "installed", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_trans_lt": {"name": "prev_trans_lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_credit": {"name": "compute_gas_credit", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_limit": {"name": "compute_gas_limit", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "skipped_reason": {"name": "skipped_reason", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_total_fwd_fees": {"name": "action_total_fwd_fees", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_code_hash_before": {"name": "account_state_code_hash_before", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_hash_before": {"name": "account_state_hash_before", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_exit_code": {"name": "compute_exit_code", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_id": {"name": "trace_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_seqno": {"name": "block_seqno", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_status_change": {"name": "storage_status_change", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lt": {"name": "lt", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_mode": {"name": "compute_mode", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credit": {"name": "credit", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_fees_due": {"name": "storage_fees_due", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_gas_used": {"name": "compute_gas_used", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_code_hash_after": {"name": "account_state_code_hash_after", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_total_action_fees": {"name": "action_total_action_fees", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_vm_init_state_hash": {"name": "compute_vm_init_state_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state_balance_after": {"name": "account_state_balance_after", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_tot_actions": {"name": "action_tot_actions", "description": "", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_vm_final_state_hash": {"name": "compute_vm_final_state_hash", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_no_funds": {"name": "action_no_funds", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transactions_id": {"name": "transactions_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"]}, "created_at": 1747400127.8783903, "relation_name": "TON.silver.transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core']\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        compute_success,\n        total_fees,\n        orig_status,\n        compute_skipped,\n        compute_gas_fees,\n        action_result_code,\n        destroyed,\n        action_success,\n        compute_msg_state_used,\n        is_tock,\n        account_state_hash_after,\n        action_spec_actions,\n        descr,\n        account_state_balance_before,\n        HASH,\n        action_result_arg,\n        aborted,\n        mc_block_seqno,\n        compute_account_activated,\n        action_skipped_actions,\n        now,\n        credit_due_fees_collected,\n        block_shard,\n        end_status,\n        credit_first,\n        prev_trans_hash,\n        block_workchain,\n        account,\n        compute_vm_steps,\n        storage_fees_collected,\n        compute_exit_arg,\n        action_valid,\n        action_status_change,\n        installed,\n        prev_trans_lt,\n        compute_gas_credit,\n        compute_gas_limit,\n        skipped_reason,\n        action_total_fwd_fees,\n        account_state_code_hash_before,\n        account_state_hash_before,\n        compute_exit_code,\n        trace_id,\n        block_seqno,\n        storage_status_change,\n        lt,\n        compute_mode,\n        credit,\n        storage_fees_due,\n        compute_gas_used,\n        account_state_code_hash_after,\n        action_total_action_fees,\n        compute_vm_init_state_hash,\n        account_state_balance_after,\n        action_tot_actions,\n        compute_vm_final_state_hash,\n        action_no_funds,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__transactions') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY seqno,\n        shard,\n        workchain\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    compute_success,\n    total_fees,\n    orig_status,\n    compute_skipped,\n    compute_gas_fees,\n    action_result_code,\n    destroyed,\n    action_success,\n    compute_msg_state_used,\n    is_tock,\n    account_state_hash_after,\n    action_spec_actions,\n    descr,\n    account_state_balance_before,\n    HASH,\n    action_result_arg,\n    aborted,\n    mc_block_seqno,\n    compute_account_activated,\n    action_skipped_actions,\n    now,\n    credit_due_fees_collected,\n    block_shard,\n    end_status,\n    credit_first,\n    prev_trans_hash,\n    block_workchain,\n    account,\n    compute_vm_steps,\n    storage_fees_collected,\n    compute_exit_arg,\n    action_valid,\n    action_status_change,\n    installed,\n    prev_trans_lt,\n    compute_gas_credit,\n    compute_gas_limit,\n    skipped_reason,\n    action_total_fwd_fees,\n    account_state_code_hash_before,\n    account_state_hash_before,\n    compute_exit_code,\n    trace_id,\n    block_seqno,\n    storage_status_change,\n    lt,\n    compute_mode,\n    credit,\n    storage_fees_due,\n    compute_gas_used,\n    account_state_code_hash_after,\n    action_total_action_fees,\n    compute_vm_init_state_hash,\n    account_state_balance_after,\n    action_tot_actions,\n    compute_vm_final_state_hash,\n    action_no_funds,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['hash']\n    ) }} AS transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze__transactions"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "7a801742a7d3c86fcaaab49529c0d942294ea075dfb9e8f572f2f9e99746924b"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__labels": {"database": "TON", "schema": "silver", "name": "silver__labels", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__labels.sql", "original_file_path": "models/silver/core/silver__labels.sql", "unique_id": "model.ton_models.silver__labels", "fqn": ["ton_models", "silver", "core", "silver__labels"], "alias": "labels", "checksum": {"name": "sha256", "checksum": "cacaecc8906c41e0ce3e7a48547d3b29159fe7c3d2ba165dc7b455a992d7dfb5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "blockchain", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["scheduled_core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "blockchain", "tags": ["scheduled_core"]}, "created_at": 1747400126.1227443, "relation_name": "TON.silver.labels", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'blockchain',\n    tags = ['scheduled_core'],\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        DATA,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze_api__labels') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}\n\nqualify RANK() over (\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1\n)\nSELECT\n    'ton' AS blockchain,\n    DATA :address :: STRING AS address,\n    DATA :category :: STRING AS category,\n    DATA :subcategory :: STRING AS subcategory,\n    DATA :label :: STRING AS label,\n    DATA :name :: STRING AS NAME,\n    DATA :organization :: STRING AS ORGANIZATION,\n    DATA :submissionTimestamp :: datetime AS submissionTimestamp,\n    DATA :submittedBy :: STRING AS submittedBy,\n    DATA :source :: STRING AS source,\n    DATA :tags AS tags,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['address']\n    ) }} AS labels_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze_api__labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ton_models.bronze_api__labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.silver__crosschain_labels": {"database": "TON", "schema": "silver", "name": "silver__crosschain_labels", "resource_type": "model", "package_name": "ton_models", "path": "silver/labels/silver__crosschain_labels.sql", "original_file_path": "models/silver/labels/silver__crosschain_labels.sql", "unique_id": "model.ton_models.silver__crosschain_labels", "fqn": ["ton_models", "silver", "labels", "silver__crosschain_labels"], "alias": "crosschain_labels", "checksum": {"name": "sha256", "checksum": "32103df7f54f2aea0a9295b2413d1577081eff4ca7ea7f39ff1a3c0c211d4c5f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["scheduled_core"], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "CREATOR": {"name": "CREATOR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_IS_DELETED": {"name": "_IS_DELETED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "LABELS_COMBINED_ID": {"name": "LABELS_COMBINED_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/silver/labels/silver__crosschain_labels.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["scheduled_core"]}, "created_at": 1747400127.8802412, "relation_name": "TON.silver.crosschain_labels", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    blockchain,\n    UPPER(address) AS address,\n    creator,\n    label_type,\n    label_subtype,\n    address_name,\n    project_name,\n    _is_deleted,\n    labels_combined_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    {{ source(\n        'crosschain_silver',\n        'labels_combined'\n    ) }}\nWHERE\n    blockchain = 'ton'", "language": "sql", "refs": [], "sources": [["crosschain_silver", "labels_combined"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ton_models.crosschain_silver.labels_combined"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__blocks": {"database": "TON", "schema": "bronze", "name": "bronze__blocks", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__blocks.sql", "original_file_path": "models/bronze/core/bronze__blocks.sql", "unique_id": "model.ton_models.bronze__blocks", "fqn": ["ton_models", "bronze", "core", "bronze__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "96d34bbde246a59bc74d29b4a99213392d46146cd38b6efda22210b9113b49b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.884903, "relation_name": "TON.bronze.blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'blocks_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"VERSION,CREATED_BY,END_LT,WANT_MERGE,GEN_UTIME,TX_COUNT,GLOBAL_ID,ROOT_HASH,KEY_BLOCK,MC_BLOCK_SEQNO,VERT_SEQNO_INCR,VALIDATOR_LIST_HASH_SHORT,AFTER_MERGE,WANT_SPLIT,AFTER_SPLIT,MASTER_REF_SEQNO,MC_BLOCK_WORKCHAIN,FILE_HASH,PREV_KEY_BLOCK_SEQNO,SHARD,SEQNO,VERT_SEQNO,FLAGS,RAND_SEED,GEN_CATCHAIN_SEQNO,MIN_REF_MC_SEQNO,START_LT,MC_BLOCK_SHARD,BEFORE_SPLIT,WORKCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "blocks_tdl"], ["bronze_streamline", "blocks_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.blocks_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_transfers": {"database": "TON", "schema": "bronze", "name": "bronze__nft_transfers", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__nft_transfers.sql", "original_file_path": "models/bronze/core/bronze__nft_transfers.sql", "unique_id": "model.ton_models.bronze__nft_transfers", "fqn": ["ton_models", "bronze", "core", "bronze__nft_transfers"], "alias": "nft_transfers", "checksum": {"name": "sha256", "checksum": "8b90268106e525c2668db676ba470eadea937f0ed823e5bbc8d5fac7d0f6e543"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.9020894, "relation_name": "TON.bronze.nft_transfers", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_transfers_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"TRACE_ID,TX_NOW,CUSTOM_PAYLOAD,NEW_OWNER,FORWARD_PAYLOAD,COMMENT,OLD_OWNER,TX_ABORTED,QUERY_ID,TX_HASH,TX_LT,RESPONSE_DESTINATION,NFT_COLLECTION_ADDRESS,FORWARD_AMOUNT,NFT_ITEM_ADDRESS,NFT_ITEM_INDEX\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_transfers_tdl"], ["bronze_streamline", "nft_transfers_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_transfers_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__jetton_events": {"database": "TON", "schema": "bronze", "name": "bronze__jetton_events", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__jetton_events.sql", "original_file_path": "models/bronze/core/bronze__jetton_events.sql", "unique_id": "model.ton_models.bronze__jetton_events", "fqn": ["ton_models", "bronze", "core", "bronze__jetton_events"], "alias": "jetton_events", "checksum": {"name": "sha256", "checksum": "805e5fc9a90fa50453a447daaa53a0bd331d871013d47dace7dab626a1f414a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.8896735, "relation_name": "TON.bronze.jetton_events", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'jetton_events_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"TX_HASH,TYPE,JETTON_MASTER,JETTON_WALLET,COMMENT,FORWARD_TON_AMOUNT,AMOUNT,UTIME,TX_LT,SOURCE,TX_ABORTED,QUERY_ID,DESTINATION\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "jetton_events_tdl"], ["bronze_streamline", "jetton_events_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.jetton_events_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_metadata": {"database": "TON", "schema": "bronze", "name": "bronze__nft_metadata", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__nft_metadata.sql", "original_file_path": "models/bronze/core/bronze__nft_metadata.sql", "unique_id": "model.ton_models.bronze__nft_metadata", "fqn": ["ton_models", "bronze", "core", "bronze__nft_metadata"], "alias": "nft_metadata", "checksum": {"name": "sha256", "checksum": "2ba4876ecf44e7f91a1e1247918655c3ddb1997894caac5ea96f545033d07566"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "adding_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "adding_date", "materialized": "view"}, "created_at": 1747400127.8989522, "relation_name": "TON.bronze.nft_metadata", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_metadata_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"adding_date\",\n    other_cols = \"DESCRIPTION,IMAGE,METADATA_STATUS,PARENT_ADDRESS,UPDATE_TIME_METADATA,ADDING_AT,UPDATE_TIME_ONCHAIN,ADDRESS,TONAPI_IMAGE_URL,CONTENT_ONCHAIN,TYPE,ATTRIBUTES,NAME,SOURCES,IMAGE_DATA\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_metadata_tdl"], ["bronze_streamline", "nft_metadata_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_metadata_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__balances_history": {"database": "TON", "schema": "bronze", "name": "bronze__balances_history", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__balances_history.sql", "original_file_path": "models/bronze/core/bronze__balances_history.sql", "unique_id": "model.ton_models.bronze__balances_history", "fqn": ["ton_models", "bronze", "core", "bronze__balances_history"], "alias": "balances_history", "checksum": {"name": "sha256", "checksum": "6c7e982b0dcf01395a9dfcbf01e5396442af791fb7d10b7eea562241e63ba149"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.883387, "relation_name": "TON.bronze.balances_history", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'balances_history_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"LT,ASSET,ADDRESS,AMOUNT,TIMESTAMP,MINTLESS_CLAIMED\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "balances_history_tdl"], ["bronze_streamline", "balances_history_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.balances_history_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__transactions": {"database": "TON", "schema": "bronze", "name": "bronze__transactions", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__transactions.sql", "original_file_path": "models/bronze/core/bronze__transactions.sql", "unique_id": "model.ton_models.bronze__transactions", "fqn": ["ton_models", "bronze", "core", "bronze__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "b9f7145c648d91e3e9796050e670977c7ac66800dfe31ca15b701f47a241231d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.903595, "relation_name": "TON.bronze.transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'transactions_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"COMPUTE_SUCCESS,TOTAL_FEES,ORIG_STATUS,COMPUTE_SKIPPED,COMPUTE_GAS_FEES,ACTION_RESULT_CODE,DESTROYED,ACTION_SUCCESS,COMPUTE_MSG_STATE_USED,IS_TOCK,ACCOUNT_STATE_HASH_AFTER,ACTION_SPEC_ACTIONS,DESCR,ACCOUNT_STATE_BALANCE_BEFORE,HASH,ACTION_RESULT_ARG,ABORTED,MC_BLOCK_SEQNO,COMPUTE_ACCOUNT_ACTIVATED,ACTION_SKIPPED_ACTIONS,NOW,CREDIT_DUE_FEES_COLLECTED,BLOCK_SHARD,END_STATUS,CREDIT_FIRST,PREV_TRANS_HASH,BLOCK_WORKCHAIN,ACCOUNT,COMPUTE_VM_STEPS,STORAGE_FEES_COLLECTED,COMPUTE_EXIT_ARG,ACTION_VALID,ACTION_STATUS_CHANGE,INSTALLED,PREV_TRANS_LT,COMPUTE_GAS_CREDIT,COMPUTE_GAS_LIMIT,SKIPPED_REASON,ACTION_TOTAL_FWD_FEES,ACCOUNT_STATE_CODE_HASH_BEFORE,ACCOUNT_STATE_HASH_BEFORE,COMPUTE_EXIT_CODE,TRACE_ID,BLOCK_SEQNO,STORAGE_STATUS_CHANGE,LT,COMPUTE_MODE,CREDIT,STORAGE_FEES_DUE,COMPUTE_GAS_USED,ACCOUNT_STATE_CODE_HASH_AFTER,ACTION_TOTAL_ACTION_FEES,COMPUTE_VM_INIT_STATE_HASH,ACCOUNT_STATE_BALANCE_AFTER,ACTION_TOT_ACTIONS,COMPUTE_VM_FINAL_STATE_HASH,ACTION_NO_FUNDS\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "transactions_tdl"], ["bronze_streamline", "transactions_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.transactions_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_events": {"database": "TON", "schema": "bronze", "name": "bronze__nft_events", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__nft_events.sql", "original_file_path": "models/bronze/core/bronze__nft_events.sql", "unique_id": "model.ton_models.bronze__nft_events", "fqn": ["ton_models", "bronze", "core", "bronze__nft_events"], "alias": "nft_events", "checksum": {"name": "sha256", "checksum": "50a09cd75b2eaf883cf31c17d88a69458342352a459578952427a2d935e00d03"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.8957791, "relation_name": "TON.bronze.nft_events", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_events_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"SALE_PRICE,ROYALTY_ADDRESS,PAYMENT_ASSET,MARKETPLACE_FEE_ADDRESS,OWNER_ADDRESS,COLLECTION_ADDRESS,CONTENT_ONCHAIN,TRACE_ID,SALE_CONTRACT,FORWARD_AMOUNT,NFT_ITEM_INDEX,QUERY_ID,IS_INIT,TIMESTAMP,NFT_ITEM_ADDRESS,CUSTOM_PAYLOAD,COMMENT,SALE_END_TIME,SALE_TYPE,AUCTION_MAX_BID,AUCTION_MIN_BID,MARKETPLACE_ADDRESS,FORWARD_PAYLOAD,ROYALTY_AMOUNT,AUCTION_MIN_STEP,TYPE,PREV_OWNER,TX_HASH,MARKETPLACE_FEE,LT\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_events_tdl"], ["bronze_streamline", "nft_events_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_events_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__dex_pools": {"database": "TON", "schema": "bronze", "name": "bronze__dex_pools", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__dex_pools.sql", "original_file_path": "models/bronze/core/bronze__dex_pools.sql", "unique_id": "model.ton_models.bronze__dex_pools", "fqn": ["ton_models", "bronze", "core", "bronze__dex_pools"], "alias": "dex_pools", "checksum": {"name": "sha256", "checksum": "368696657c0045b2ec6dba840acf27f2c14bd2ec4c53a7f186eedeabfb65f142"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.8863916, "relation_name": "TON.bronze.dex_pools", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'dex_pools_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"RESERVES_RIGHT,PROJECT,POOL,PROTOCOL_FEE,LAST_UPDATED,DISCOVERED_AT,VERSION,JETTON_RIGHT,TVL_TON,JETTON_LEFT,RESERVES_LEFT,REFERRAL_FEE,IS_LIQUID,TOTAL_SUPPLY,TVL_USD,LP_FEE\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "dex_pools_tdl"], ["bronze_streamline", "dex_pools_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.dex_pools_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__account_states": {"database": "TON", "schema": "bronze", "name": "bronze__account_states", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__account_states.sql", "original_file_path": "models/bronze/core/bronze__account_states.sql", "unique_id": "model.ton_models.bronze__account_states", "fqn": ["ton_models", "bronze", "core", "bronze__account_states"], "alias": "account_states", "checksum": {"name": "sha256", "checksum": "3fc40b6d95ef92c0f0ad981e6b680eb62d467f7a1374692a122759cee92d3fa1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.8818798, "relation_name": "TON.bronze.account_states", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'account_states_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"ACCOUNT,LAST_TRANS_LT,LAST_TRANS_HASH,ACCOUNT_STATUS,BALANCE,DATA_BOC,DATA_HASH,FROZEN_HASH,TIMESTAMP,CODE_HASH,CODE_BOC,HASH\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "account_states_tdl"], ["bronze_streamline", "account_states_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.account_states_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__jetton_metadata": {"database": "TON", "schema": "bronze", "name": "bronze__jetton_metadata", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__jetton_metadata.sql", "original_file_path": "models/bronze/core/bronze__jetton_metadata.sql", "unique_id": "model.ton_models.bronze__jetton_metadata", "fqn": ["ton_models", "bronze", "core", "bronze__jetton_metadata"], "alias": "jetton_metadata", "checksum": {"name": "sha256", "checksum": "b3e1c6df8b5410301715cc7cf05418b95e981647fcfc671971920e3bd79515dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "adding_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "adding_date", "materialized": "view"}, "created_at": 1747400127.8911998, "relation_name": "TON.bronze.jetton_metadata", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'jetton_metadata_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"adding_date\",\n    other_cols = \"TONAPI_IMAGE_URL,IMAGE_DATA,IMAGE,UPDATE_TIME_ONCHAIN,SYMBOL,JETTON_CONTENT_ONCHAIN,UPDATE_TIME_METADATA,NAME,JETTON_WALLET_CODE_HASH,CODE_HASH,ADMIN_ADDRESS,ADDING_AT,ADDRESS,SOURCES,MINTABLE,DECIMALS,METADATA_STATUS,DESCRIPTION\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "jetton_metadata_tdl"], ["bronze_streamline", "jetton_metadata_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.jetton_metadata_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_items": {"database": "TON", "schema": "bronze", "name": "bronze__nft_items", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__nft_items.sql", "original_file_path": "models/bronze/core/bronze__nft_items.sql", "unique_id": "model.ton_models.bronze__nft_items", "fqn": ["ton_models", "bronze", "core", "bronze__nft_items"], "alias": "nft_items", "checksum": {"name": "sha256", "checksum": "502fc52e0434507ed0d5bd2e6ef11a7411bde49c76710c8d35ee4be0da0bbd1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.897281, "relation_name": "TON.bronze.nft_items", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_items_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"COLLECTION_ADDRESS,IS_INIT,LT,TIMESTAMP,ADDRESS,OWNER_ADDRESS,INDEX,CONTENT_ONCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_items_tdl"], ["bronze_streamline", "nft_items_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_items_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_sales": {"database": "TON", "schema": "bronze", "name": "bronze__nft_sales", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__nft_sales.sql", "original_file_path": "models/bronze/core/bronze__nft_sales.sql", "unique_id": "model.ton_models.bronze__nft_sales", "fqn": ["ton_models", "bronze", "core", "bronze__nft_sales"], "alias": "nft_sales", "checksum": {"name": "sha256", "checksum": "c20ecce61690d14192e302bf4d84a901a06172b2c7b1b409f1a9cfd03f435001"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.9005861, "relation_name": "TON.bronze.nft_sales", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_sales_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"IS_CANCELED,MARKETPLACE_FEE_ADDRESS,END_TIME,IS_COMPLETE,LAST_MEMBER,MARKETPLACE_ADDRESS,ROYALTY_AMOUNT,CREATED_AT,NFT_ADDRESS,MARKETPLACE_FEE,ASSET,PRICE,NFT_OWNER_ADDRESS,ADDRESS,MIN_BID,TIMESTAMP,ROYALTY_ADDRESS,MIN_STEP,MAX_BID,LAST_BID_AT,LT,TYPE\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_sales_tdl"], ["bronze_streamline", "nft_sales_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_sales_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__dex_trades": {"database": "TON", "schema": "bronze", "name": "bronze__dex_trades", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__dex_trades.sql", "original_file_path": "models/bronze/core/bronze__dex_trades.sql", "unique_id": "model.ton_models.bronze__dex_trades", "fqn": ["ton_models", "bronze", "core", "bronze__dex_trades"], "alias": "dex_trades", "checksum": {"name": "sha256", "checksum": "50e261272e2f6b54d091cb467a38eb49007852f3d3e01911d250261f403c40f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.8880842, "relation_name": "TON.bronze.dex_trades", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'dex_trades_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"VOLUME_TON,REFERRAL_ADDRESS,TOKEN_BOUGHT_ADDRESS,POOL_ADDRESS,PROJECT_TYPE,AMOUNT_BOUGHT_RAW,ROUTER_ADDRESS,VERSION,TRACE_ID,VOLUME_USD,TOKEN_SOLD_ADDRESS,PROJECT,EVENT_TIME,TX_HASH,TRADER_ADDRESS,EVENT_TYPE,AMOUNT_SOLD_RAW,PLATFORM_TAG,QUERY_ID\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "dex_trades_tdl"], ["bronze_streamline", "dex_trades_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.dex_trades_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__messages_with_data": {"database": "TON", "schema": "bronze", "name": "bronze__messages_with_data", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__messages_with_data.sql", "original_file_path": "models/bronze/core/bronze__messages_with_data.sql", "unique_id": "model.ton_models.bronze__messages_with_data", "fqn": ["ton_models", "bronze", "core", "bronze__messages_with_data"], "alias": "messages_with_data", "checksum": {"name": "sha256", "checksum": "307a4b64607101f21f396943eb7ccd155eb88f02bd2ea32c40ffcb16eb8279a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view"}, "created_at": 1747400127.894269, "relation_name": "TON.bronze.messages_with_data", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'messages_with_data_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"BODY_BOC,CREATED_LT,INIT_STATE_HASH,OPCODE,TRACE_ID,BOUNCED,BODY_HASH,DIRECTION,TX_LT,TX_HASH,IHR_FEE,INIT_STATE_BOC,CREATED_AT,SOURCE,MSG_HASH,IHR_DISABLED,TX_NOW,BOUNCE,_VALUE,IMPORT_FEE,DESTINATION,COMMENT,FWD_FEE\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "messages_with_data_tdl"], ["bronze_streamline", "messages_with_data_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.messages_with_data_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__jetton_metadata_FR": {"database": "TON", "schema": "bronze", "name": "bronze__jetton_metadata_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__jetton_metadata_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__jetton_metadata_FR.sql", "unique_id": "model.ton_models.bronze__jetton_metadata_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__jetton_metadata_FR"], "alias": "jetton_metadata_FR", "checksum": {"name": "sha256", "checksum": "b3e1c6df8b5410301715cc7cf05418b95e981647fcfc671971920e3bd79515dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.272185, "relation_name": "TON.bronze.jetton_metadata_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'jetton_metadata_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"adding_date\",\n    other_cols = \"TONAPI_IMAGE_URL,IMAGE_DATA,IMAGE,UPDATE_TIME_ONCHAIN,SYMBOL,JETTON_CONTENT_ONCHAIN,UPDATE_TIME_METADATA,NAME,JETTON_WALLET_CODE_HASH,CODE_HASH,ADMIN_ADDRESS,ADDING_AT,ADDRESS,SOURCES,MINTABLE,DECIMALS,METADATA_STATUS,DESCRIPTION\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "jetton_metadata_tdl"], ["bronze_streamline", "jetton_metadata_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.jetton_metadata_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__dex_trades_FR": {"database": "TON", "schema": "bronze", "name": "bronze__dex_trades_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__dex_trades_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__dex_trades_FR.sql", "unique_id": "model.ton_models.bronze__dex_trades_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__dex_trades_FR"], "alias": "dex_trades_FR", "checksum": {"name": "sha256", "checksum": "50e261272e2f6b54d091cb467a38eb49007852f3d3e01911d250261f403c40f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.277152, "relation_name": "TON.bronze.dex_trades_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'dex_trades_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"VOLUME_TON,REFERRAL_ADDRESS,TOKEN_BOUGHT_ADDRESS,POOL_ADDRESS,PROJECT_TYPE,AMOUNT_BOUGHT_RAW,ROUTER_ADDRESS,VERSION,TRACE_ID,VOLUME_USD,TOKEN_SOLD_ADDRESS,PROJECT,EVENT_TIME,TX_HASH,TRADER_ADDRESS,EVENT_TYPE,AMOUNT_SOLD_RAW,PLATFORM_TAG,QUERY_ID\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "dex_trades_tdl"], ["bronze_streamline", "dex_trades_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.dex_trades_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__messages_FR": {"database": "TON", "schema": "bronze", "name": "bronze__messages_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__messages_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__messages_FR.sql", "unique_id": "model.ton_models.bronze__messages_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__messages_FR"], "alias": "messages_FR", "checksum": {"name": "sha256", "checksum": "80334e998bccfb4b5b5fa8c89fda9ea75198f36ba67c871ab1e7aa63e083bbb8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.2819805, "relation_name": "TON.bronze.messages_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'messages_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"MSG_HASH,IHR_DISABLED,TX_NOW,OPCODE,CREATED_LT,TX_HASH,BOUNCE,BOUNCED,COMMENT,INIT_STATE_HASH,IMPORT_FEE,_VALUE,FWD_FEE,TX_LT,IHR_FEE,SOURCE,TRACE_ID,DIRECTION,BODY_HASH,CREATED_AT,DESTINATION\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "messages_tdl"], ["bronze_streamline", "messages_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.messages_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_metadata_FR": {"database": "TON", "schema": "bronze", "name": "bronze__nft_metadata_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__nft_metadata_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__nft_metadata_FR.sql", "unique_id": "model.ton_models.bronze__nft_metadata_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__nft_metadata_FR"], "alias": "nft_metadata_FR", "checksum": {"name": "sha256", "checksum": "2ba4876ecf44e7f91a1e1247918655c3ddb1997894caac5ea96f545033d07566"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.286911, "relation_name": "TON.bronze.nft_metadata_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_metadata_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"adding_date\",\n    other_cols = \"DESCRIPTION,IMAGE,METADATA_STATUS,PARENT_ADDRESS,UPDATE_TIME_METADATA,ADDING_AT,UPDATE_TIME_ONCHAIN,ADDRESS,TONAPI_IMAGE_URL,CONTENT_ONCHAIN,TYPE,ATTRIBUTES,NAME,SOURCES,IMAGE_DATA\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_metadata_tdl"], ["bronze_streamline", "nft_metadata_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_metadata_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_items_FR": {"database": "TON", "schema": "bronze", "name": "bronze__nft_items_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__nft_items_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__nft_items_FR.sql", "unique_id": "model.ton_models.bronze__nft_items_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__nft_items_FR"], "alias": "nft_items_FR", "checksum": {"name": "sha256", "checksum": "502fc52e0434507ed0d5bd2e6ef11a7411bde49c76710c8d35ee4be0da0bbd1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.2918105, "relation_name": "TON.bronze.nft_items_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_items_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"COLLECTION_ADDRESS,IS_INIT,LT,TIMESTAMP,ADDRESS,OWNER_ADDRESS,INDEX,CONTENT_ONCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_items_tdl"], ["bronze_streamline", "nft_items_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_items_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__balances_history_FR": {"database": "TON", "schema": "bronze", "name": "bronze__balances_history_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__balances_history_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__balances_history_FR.sql", "unique_id": "model.ton_models.bronze__balances_history_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__balances_history_FR"], "alias": "balances_history_FR", "checksum": {"name": "sha256", "checksum": "6c7e982b0dcf01395a9dfcbf01e5396442af791fb7d10b7eea562241e63ba149"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.2984707, "relation_name": "TON.bronze.balances_history_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'balances_history_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"LT,ASSET,ADDRESS,AMOUNT,TIMESTAMP,MINTLESS_CLAIMED\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "balances_history_tdl"], ["bronze_streamline", "balances_history_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.balances_history_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__blocks_FR": {"database": "TON", "schema": "bronze", "name": "bronze__blocks_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__blocks_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__blocks_FR.sql", "unique_id": "model.ton_models.bronze__blocks_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__blocks_FR"], "alias": "blocks_FR", "checksum": {"name": "sha256", "checksum": "96d34bbde246a59bc74d29b4a99213392d46146cd38b6efda22210b9113b49b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.303354, "relation_name": "TON.bronze.blocks_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'blocks_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"VERSION,CREATED_BY,END_LT,WANT_MERGE,GEN_UTIME,TX_COUNT,GLOBAL_ID,ROOT_HASH,KEY_BLOCK,MC_BLOCK_SEQNO,VERT_SEQNO_INCR,VALIDATOR_LIST_HASH_SHORT,AFTER_MERGE,WANT_SPLIT,AFTER_SPLIT,MASTER_REF_SEQNO,MC_BLOCK_WORKCHAIN,FILE_HASH,PREV_KEY_BLOCK_SEQNO,SHARD,SEQNO,VERT_SEQNO,FLAGS,RAND_SEED,GEN_CATCHAIN_SEQNO,MIN_REF_MC_SEQNO,START_LT,MC_BLOCK_SHARD,BEFORE_SPLIT,WORKCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "blocks_tdl"], ["bronze_streamline", "blocks_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.blocks_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_events_FR": {"database": "TON", "schema": "bronze", "name": "bronze__nft_events_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__nft_events_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__nft_events_FR.sql", "unique_id": "model.ton_models.bronze__nft_events_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__nft_events_FR"], "alias": "nft_events_FR", "checksum": {"name": "sha256", "checksum": "50a09cd75b2eaf883cf31c17d88a69458342352a459578952427a2d935e00d03"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.308265, "relation_name": "TON.bronze.nft_events_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_events_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"SALE_PRICE,ROYALTY_ADDRESS,PAYMENT_ASSET,MARKETPLACE_FEE_ADDRESS,OWNER_ADDRESS,COLLECTION_ADDRESS,CONTENT_ONCHAIN,TRACE_ID,SALE_CONTRACT,FORWARD_AMOUNT,NFT_ITEM_INDEX,QUERY_ID,IS_INIT,TIMESTAMP,NFT_ITEM_ADDRESS,CUSTOM_PAYLOAD,COMMENT,SALE_END_TIME,SALE_TYPE,AUCTION_MAX_BID,AUCTION_MIN_BID,MARKETPLACE_ADDRESS,FORWARD_PAYLOAD,ROYALTY_AMOUNT,AUCTION_MIN_STEP,TYPE,PREV_OWNER,TX_HASH,MARKETPLACE_FEE,LT\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_events_tdl"], ["bronze_streamline", "nft_events_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_events_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__transactions_FR": {"database": "TON", "schema": "bronze", "name": "bronze__transactions_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__transactions_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__transactions_FR.sql", "unique_id": "model.ton_models.bronze__transactions_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__transactions_FR"], "alias": "transactions_FR", "checksum": {"name": "sha256", "checksum": "b9f7145c648d91e3e9796050e670977c7ac66800dfe31ca15b701f47a241231d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.3132133, "relation_name": "TON.bronze.transactions_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'transactions_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"COMPUTE_SUCCESS,TOTAL_FEES,ORIG_STATUS,COMPUTE_SKIPPED,COMPUTE_GAS_FEES,ACTION_RESULT_CODE,DESTROYED,ACTION_SUCCESS,COMPUTE_MSG_STATE_USED,IS_TOCK,ACCOUNT_STATE_HASH_AFTER,ACTION_SPEC_ACTIONS,DESCR,ACCOUNT_STATE_BALANCE_BEFORE,HASH,ACTION_RESULT_ARG,ABORTED,MC_BLOCK_SEQNO,COMPUTE_ACCOUNT_ACTIVATED,ACTION_SKIPPED_ACTIONS,NOW,CREDIT_DUE_FEES_COLLECTED,BLOCK_SHARD,END_STATUS,CREDIT_FIRST,PREV_TRANS_HASH,BLOCK_WORKCHAIN,ACCOUNT,COMPUTE_VM_STEPS,STORAGE_FEES_COLLECTED,COMPUTE_EXIT_ARG,ACTION_VALID,ACTION_STATUS_CHANGE,INSTALLED,PREV_TRANS_LT,COMPUTE_GAS_CREDIT,COMPUTE_GAS_LIMIT,SKIPPED_REASON,ACTION_TOTAL_FWD_FEES,ACCOUNT_STATE_CODE_HASH_BEFORE,ACCOUNT_STATE_HASH_BEFORE,COMPUTE_EXIT_CODE,TRACE_ID,BLOCK_SEQNO,STORAGE_STATUS_CHANGE,LT,COMPUTE_MODE,CREDIT,STORAGE_FEES_DUE,COMPUTE_GAS_USED,ACCOUNT_STATE_CODE_HASH_AFTER,ACTION_TOTAL_ACTION_FEES,COMPUTE_VM_INIT_STATE_HASH,ACCOUNT_STATE_BALANCE_AFTER,ACTION_TOT_ACTIONS,COMPUTE_VM_FINAL_STATE_HASH,ACTION_NO_FUNDS\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "transactions_tdl"], ["bronze_streamline", "transactions_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.transactions_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__jetton_events_FR": {"database": "TON", "schema": "bronze", "name": "bronze__jetton_events_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__jetton_events_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__jetton_events_FR.sql", "unique_id": "model.ton_models.bronze__jetton_events_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__jetton_events_FR"], "alias": "jetton_events_FR", "checksum": {"name": "sha256", "checksum": "805e5fc9a90fa50453a447daaa53a0bd331d871013d47dace7dab626a1f414a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.3182287, "relation_name": "TON.bronze.jetton_events_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'jetton_events_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"TX_HASH,TYPE,JETTON_MASTER,JETTON_WALLET,COMMENT,FORWARD_TON_AMOUNT,AMOUNT,UTIME,TX_LT,SOURCE,TX_ABORTED,QUERY_ID,DESTINATION\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "jetton_events_tdl"], ["bronze_streamline", "jetton_events_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.jetton_events_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__messages_with_data_FR": {"database": "TON", "schema": "bronze", "name": "bronze__messages_with_data_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__messages_with_data_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__messages_with_data_FR.sql", "unique_id": "model.ton_models.bronze__messages_with_data_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__messages_with_data_FR"], "alias": "messages_with_data_FR", "checksum": {"name": "sha256", "checksum": "307a4b64607101f21f396943eb7ccd155eb88f02bd2ea32c40ffcb16eb8279a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.323165, "relation_name": "TON.bronze.messages_with_data_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'messages_with_data_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"BODY_BOC,CREATED_LT,INIT_STATE_HASH,OPCODE,TRACE_ID,BOUNCED,BODY_HASH,DIRECTION,TX_LT,TX_HASH,IHR_FEE,INIT_STATE_BOC,CREATED_AT,SOURCE,MSG_HASH,IHR_DISABLED,TX_NOW,BOUNCE,_VALUE,IMPORT_FEE,DESTINATION,COMMENT,FWD_FEE\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "messages_with_data_tdl"], ["bronze_streamline", "messages_with_data_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.messages_with_data_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__dex_pools_FR": {"database": "TON", "schema": "bronze", "name": "bronze__dex_pools_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__dex_pools_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__dex_pools_FR.sql", "unique_id": "model.ton_models.bronze__dex_pools_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__dex_pools_FR"], "alias": "dex_pools_FR", "checksum": {"name": "sha256", "checksum": "368696657c0045b2ec6dba840acf27f2c14bd2ec4c53a7f186eedeabfb65f142"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.3295412, "relation_name": "TON.bronze.dex_pools_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'dex_pools_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"RESERVES_RIGHT,PROJECT,POOL,PROTOCOL_FEE,LAST_UPDATED,DISCOVERED_AT,VERSION,JETTON_RIGHT,TVL_TON,JETTON_LEFT,RESERVES_LEFT,REFERRAL_FEE,IS_LIQUID,TOTAL_SUPPLY,TVL_USD,LP_FEE\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "dex_pools_tdl"], ["bronze_streamline", "dex_pools_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.dex_pools_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_transfers_FR": {"database": "TON", "schema": "bronze", "name": "bronze__nft_transfers_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__nft_transfers_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__nft_transfers_FR.sql", "unique_id": "model.ton_models.bronze__nft_transfers_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__nft_transfers_FR"], "alias": "nft_transfers_FR", "checksum": {"name": "sha256", "checksum": "8b90268106e525c2668db676ba470eadea937f0ed823e5bbc8d5fac7d0f6e543"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.3344228, "relation_name": "TON.bronze.nft_transfers_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_transfers_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"TRACE_ID,TX_NOW,CUSTOM_PAYLOAD,NEW_OWNER,FORWARD_PAYLOAD,COMMENT,OLD_OWNER,TX_ABORTED,QUERY_ID,TX_HASH,TX_LT,RESPONSE_DESTINATION,NFT_COLLECTION_ADDRESS,FORWARD_AMOUNT,NFT_ITEM_ADDRESS,NFT_ITEM_INDEX\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_transfers_tdl"], ["bronze_streamline", "nft_transfers_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_transfers_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__account_states_FR": {"database": "TON", "schema": "bronze", "name": "bronze__account_states_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__account_states_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__account_states_FR.sql", "unique_id": "model.ton_models.bronze__account_states_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__account_states_FR"], "alias": "account_states_FR", "checksum": {"name": "sha256", "checksum": "3fc40b6d95ef92c0f0ad981e6b680eb62d467f7a1374692a122759cee92d3fa1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.3393216, "relation_name": "TON.bronze.account_states_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'account_states_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"ACCOUNT,LAST_TRANS_LT,LAST_TRANS_HASH,ACCOUNT_STATUS,BALANCE,DATA_BOC,DATA_HASH,FROZEN_HASH,TIMESTAMP,CODE_HASH,CODE_BOC,HASH\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "account_states_tdl"], ["bronze_streamline", "account_states_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.account_states_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze__nft_sales_FR": {"database": "TON", "schema": "bronze", "name": "bronze__nft_sales_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bak/bronze__nft_sales_FR.sql", "original_file_path": "models/bronze/core/bak/bronze__nft_sales_FR.sql", "unique_id": "model.ton_models.bronze__nft_sales_FR", "fqn": ["ton_models", "bronze", "core", "bak", "bronze__nft_sales_FR"], "alias": "nft_sales_FR", "checksum": {"name": "sha256", "checksum": "c20ecce61690d14192e302bf4d84a901a06172b2c7b1b409f1a9cfd03f435001"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1747400126.3442168, "relation_name": "TON.bronze.nft_sales_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'nft_sales_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"IS_CANCELED,MARKETPLACE_FEE_ADDRESS,END_TIME,IS_COMPLETE,LAST_MEMBER,MARKETPLACE_ADDRESS,ROYALTY_AMOUNT,CREATED_AT,NFT_ADDRESS,MARKETPLACE_FEE,ASSET,PRICE,NFT_OWNER_ADDRESS,ADDRESS,MIN_BID,TIMESTAMP,ROYALTY_ADDRESS,MIN_STEP,MAX_BID,LAST_BID_AT,LT,TYPE\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "nft_sales_tdl"], ["bronze_streamline", "nft_sales_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": ["source.ton_models.bronze_streamline.nft_sales_tdl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ton_models.bronze_api__labels": {"database": "TON", "schema": "bronze_api", "name": "bronze_api__labels", "resource_type": "model", "package_name": "ton_models", "path": "bronze/bronze_api/bronze_api__labels.sql", "original_file_path": "models/bronze/bronze_api/bronze_api__labels.sql", "unique_id": "model.ton_models.bronze_api__labels", "fqn": ["ton_models", "bronze", "bronze_api", "bronze_api__labels"], "alias": "labels", "checksum": {"name": "sha256", "checksum": "2e611e25fe48f8ccc278d1fb0a1de1f3e85c22ca680a1436280e6c293cb8d52c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["scheduled_core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "tags": ["scheduled_core"]}, "created_at": 1747400126.3816338, "relation_name": "TON.bronze_api.labels", "raw_code": "{{ config(\n    materialized = 'incremental',\n    tags = ['scheduled_core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        {{ target.database }}.live.udf_api('https://ton-blockchain-public-datalake.s3.eu-central-1.amazonaws.com/v1/ton-labels/json/assets.json') :data AS DATA\n)\nSELECT\n    TRY_PARSE_JSON(VALUE) AS DATA,\n    SYSDATE() AS _inserted_timestamp\nFROM\n    TABLE(\n        SPLIT_TO_TABLE(\n            (\n                SELECT\n                    DATA :: STRING\n                FROM\n                    base\n            ),\n            '\\n'\n        )\n    )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "operation.ton_models.ton_models-on-run-start-0": {"database": "TON", "schema": "ton_models-on-run-start-0", "name": "ton_models-on-run-start-0", "resource_type": "operation", "package_name": "ton_models", "path": "hooks/ton_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.ton_models.ton_models-on-run-start-0", "fqn": ["ton_models", "hooks", "ton_models-on-run-start-0"], "alias": "ton_models-on-run-start-0", "checksum": {"name": "sha256", "checksum": "e041bffa46748e02d1ed520f6a462d2cdd6a4307f018198f1c9f41d16e52e54f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.5718415, "relation_name": null, "raw_code": "{{create_sps()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ton_models.create_sps"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.ton_models.ton_models-on-run-start-1": {"database": "TON", "schema": "ton_models-on-run-start-1", "name": "ton_models-on-run-start-1", "resource_type": "operation", "package_name": "ton_models", "path": "hooks/ton_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.ton_models.ton_models-on-run-start-1", "fqn": ["ton_models", "hooks", "ton_models-on-run-start-1"], "alias": "ton_models-on-run-start-1", "checksum": {"name": "sha256", "checksum": "e041bffa46748e02d1ed520f6a462d2cdd6a4307f018198f1c9f41d16e52e54f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.584973, "relation_name": null, "raw_code": "{{create_udfs()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ton_models.create_udfs"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "operation.ton_models.ton_models-on-run-end-0": {"database": "TON", "schema": "ton_models-on-run-end-0", "name": "ton_models-on-run-end-0", "resource_type": "operation", "package_name": "ton_models", "path": "hooks/ton_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.ton_models.ton_models-on-run-end-0", "fqn": ["ton_models", "hooks", "ton_models-on-run-end-0"], "alias": "ton_models-on-run-end-0", "checksum": {"name": "sha256", "checksum": "e041bffa46748e02d1ed520f6a462d2cdd6a4307f018198f1c9f41d16e52e54f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.590587, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ton_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "model.fsc_utils._datashare___create_udfs": {"database": "TON", "schema": "_datashare", "name": "_datashare___create_udfs", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_udfs.sql", "original_file_path": "models/datashare/_datashare___create_udfs.sql", "unique_id": "model.fsc_utils._datashare___create_udfs", "fqn": ["fsc_utils", "datashare", "_datashare___create_udfs"], "alias": "_create_udfs", "checksum": {"name": "sha256", "checksum": "fc39e053d81b2ed8b8106cf5c917ea005b96942a61f37ee4850a838c6c8f7ce6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.7334447, "relation_name": "TON._datashare._create_udfs", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\nCONCAT_WS('\\n',{{- fsc_utils.generate_datashare_udf_ddl().strip() -}}) AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fsc_utils._datashare___create_gold": {"database": "TON", "schema": "_datashare", "name": "_datashare___create_gold", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_gold.sql", "original_file_path": "models/datashare/_datashare___create_gold.sql", "unique_id": "model.fsc_utils._datashare___create_gold", "fqn": ["fsc_utils", "datashare", "_datashare___create_gold"], "alias": "_create_gold", "checksum": {"name": "sha256", "checksum": "e05db71a87f76f4cff0b9c4d1b83b975ef424d147379e2442907b1004f709887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.7421212, "relation_name": "TON._datashare._create_gold", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\n$${{- fsc_utils.generate_datashare_ddl() -}}$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_base.live__allow_list": {"database": "TON", "schema": "live", "name": "live__allow_list", "resource_type": "model", "package_name": "livequery_base", "path": "live__allow_list.sql", "original_file_path": "models/live__allow_list.sql", "unique_id": "model.livequery_base.live__allow_list", "fqn": ["livequery_base", "live__allow_list"], "alias": "allow_list", "checksum": {"name": "sha256", "checksum": "0f0f0355e5f959d9d75458d90cee37209b5632f984414c3fcf65eca0e0e5de2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.8069274, "relation_name": "TON.live.allow_list", "raw_code": "-- depends_on: {{ ref('live') }}\n{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => {{ this.database }}.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_base.utils": {"database": "TON", "schema": "utils", "name": "utils", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/utils.sql", "original_file_path": "models/deploy/core/utils.sql", "unique_id": "model.livequery_base.utils", "fqn": ["livequery_base", "deploy", "core", "utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "306321713017a3700a99c47db3a99ca2f64fdf6fe567c883a7507f13bd8095c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_json_rpc_call": {"name": "udf_json_rpc_call", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_urlencode": {"name": "udf_urlencode", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_int_to_binary": {"name": "udf_int_to_binary", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_binary_to_int": {"name": "udf_binary_to_int", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_evm_decode_log": {"name": "udf_evm_decode_log", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400128.039392, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n{% set config = config_core_utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": ["model.livequery_base._utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_base._utils": {"database": "TON", "schema": "_utils", "name": "_utils", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/_utils.sql", "original_file_path": "models/deploy/core/_utils.sql", "unique_id": "model.livequery_base._utils", "fqn": ["livequery_base", "deploy", "core", "_utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "3d202cb82095728dae3b02cdca6d2c5f9521ecf50b687a50739f44b5ee828015"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_introspect": {"name": "udf_introspect", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400128.0107975, "relation_name": null, "raw_code": "{% set config = config_core__utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_base.live": {"database": "TON", "schema": "live", "name": "live", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/live.sql", "original_file_path": "models/deploy/core/live.sql", "unique_id": "model.livequery_base.live", "fqn": ["livequery_base", "deploy", "core", "live"], "alias": "", "checksum": {"name": "sha256", "checksum": "71b371765e23aa22b9961eeaeb7657413cc7f6d5995b811f85a5c110ae1d4d00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_api": {"name": "udf_api", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/live.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400128.2111418, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('utils') }}\n-- depends_on: {{ ref('_live') }}\n{% set config = config_core_live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}, {"name": "_live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": ["model.livequery_base._utils", "model.livequery_base.utils", "model.livequery_base._live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_base._live": {"database": "TON", "schema": "_live", "name": "_live", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/_live.sql", "original_file_path": "models/deploy/core/_live.sql", "unique_id": "model.livequery_base._live", "fqn": ["livequery_base", "deploy", "core", "_live"], "alias": "", "checksum": {"name": "sha256", "checksum": "c96cbb9dfef8ff10375c8e187dc394f7a38d172e8df94f343761d485338f4036"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.8372483, "relation_name": null, "raw_code": "{% set config = config_core__live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "analysis.livequery_base.test_create_or_drop_function_from_config": {"database": "TON", "schema": "test_create_or_drop_function_from_config", "name": "test_create_or_drop_function_from_config", "resource_type": "analysis", "package_name": "livequery_base", "path": "analysis/test_create_or_drop_function_from_config.sql", "original_file_path": "analysis/test_create_or_drop_function_from_config.sql", "unique_id": "analysis.livequery_base.test_create_or_drop_function_from_config", "fqn": ["livequery_base", "analysis", "test_create_or_drop_function_from_config"], "alias": "", "checksum": {"name": "sha256", "checksum": "6da8747a0512c8c0c522b3b56816f437171257a7544716d8795b1a4cc04c8664"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.9278882, "relation_name": null, "raw_code": "{%-  set udfs = fromyaml(config_core_live()) -%}\n{% do udfs.extend(fromyaml(config_core__live())) %}\n{% do udfs.extend(fromyaml(config_core__utils())) %}\n{% do udfs.extend(fromyaml(config_core_utils())) %}\n\n{%- for udf in udfs -%}\n{{- create_or_drop_function_from_config(udf, drop_=True) -}}\n{{- create_or_drop_function_from_config(udf, drop_=False) -}}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.config_core_live", "macro.livequery_base.config_core__live", "macro.livequery_base.config_core__utils", "macro.livequery_base.config_core_utils", "macro.livequery_base.create_or_drop_function_from_config"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_base.test_functions": {"database": "TON", "schema": "test_functions", "name": "test_functions", "resource_type": "analysis", "package_name": "livequery_base", "path": "analysis/test_functions.sql", "original_file_path": "analysis/test_functions.sql", "unique_id": "analysis.livequery_base.test_functions", "fqn": ["livequery_base", "analysis", "test_functions"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ab84ce91d84a3416f20a65f80f6226b0dec39313dbd0f555f40cdf721121b9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400126.9956915, "relation_name": null, "raw_code": "{{ sql_udf_json_rpc_call(True) }}\n{# {{ sql_udf_json_rpc_call(False) }} #}\n{{ config_core__live() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.sql_udf_json_rpc_call", "macro.livequery_base.config_core__live"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_base.test_functions_py": {"database": "TON", "schema": "test_functions_py", "name": "test_functions_py", "resource_type": "analysis", "package_name": "livequery_base", "path": "analysis/test_functions_py.sql", "original_file_path": "analysis/test_functions_py.sql", "unique_id": "analysis.livequery_base.test_functions_py", "fqn": ["livequery_base", "analysis", "test_functions_py"], "alias": "", "checksum": {"name": "sha256", "checksum": "3e379c91a7abf83ca2438fdd68efa21b5f98a91a7c1beb62091f7b4d13d33745"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400127.0018647, "relation_name": null, "raw_code": "{{ python_hex_to_int() }}\n{{ python_udf_hex_to_int_with_encoding() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.python_hex_to_int", "macro.livequery_base.python_udf_hex_to_int_with_encoding"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.livequery_base.live__verified_api_endpoints": {"database": "TON", "schema": "live", "name": "live__verified_api_endpoints", "resource_type": "seed", "package_name": "livequery_base", "path": "live__verified_api_endpoints.csv", "original_file_path": "data/live__verified_api_endpoints.csv", "unique_id": "seed.livequery_base.live__verified_api_endpoints", "fqn": ["livequery_base", "live__verified_api_endpoints"], "alias": "verified_api_endpoints", "checksum": {"name": "sha256", "checksum": "f801025b0fb9a370678db2b5b63ead57dc1371caffa0688266d9be12605a8afa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": "{{ target.database not in ['livequery', 'livequery_dev'] }}"}, "created_at": 1747400127.1519902, "relation_name": "TON.live.verified_api_endpoints", "raw_code": "", "root_path": "/home/runner/work/ton-models/ton-models/dbt_packages/livequery_base", "depends_on": {"macros": []}}, "operation.livequery_base.livequery_base-on-run-start-0": {"database": "TON", "schema": "livequery_base-on-run-start-0", "name": "livequery_base-on-run-start-0", "resource_type": "operation", "package_name": "livequery_base", "path": "hooks/livequery_base-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_base.livequery_base-on-run-start-0", "fqn": ["livequery_base", "hooks", "livequery_base-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "2996b929cefc54b878628db9ebdada0e002737cd97dee849023f2751445b8a93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400127.2534342, "relation_name": null, "raw_code": "{{ create_sps() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.create_sps"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.livequery_base.livequery_base-on-run-end-0": {"database": "TON", "schema": "livequery_base-on-run-end-0", "name": "livequery_base-on-run-end-0", "resource_type": "operation", "package_name": "livequery_base", "path": "hooks/livequery_base-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_base.livequery_base-on-run-end-0", "fqn": ["livequery_base", "hooks", "livequery_base-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "2996b929cefc54b878628db9ebdada0e002737cd97dee849023f2751445b8a93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400127.2594116, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.apply_meta_as_tags"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.ton_models.unique_defi__fact_dex_pools_fact_dex_pools_id.c2c880c286": {"database": "TON", "schema": "unique_defi", "name": "unique_defi__fact_dex_pools_fact_dex_pools_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_defi__fact_dex_pools_fact_dex_pools_id.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.ton_models.unique_defi__fact_dex_pools_fact_dex_pools_id.c2c880c286", "fqn": ["ton_models", "gold", "defi", "unique_defi__fact_dex_pools_fact_dex_pools_id"], "alias": "fact_dex_pools_fact_dex_pools_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.5523643, "relation_name": "TON.unique_defi.fact_dex_pools_fact_dex_pools_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "defi__fact_dex_pools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.defi__fact_dex_pools"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_dex_pools_id", "file_key_name": "models.defi__fact_dex_pools", "attached_node": "model.ton_models.defi__fact_dex_pools", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_dex_pools_id", "model": "{{ get_where_subquery(ref('defi__fact_dex_pools')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30.99f0a3f538": {"database": "TON", "schema": "dbt_utils_recency_defi", "name": "dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_defi__fact_d_550b68a6a240e9f52a2898a975d7b407.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.ton_models.dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30.99f0a3f538", "fqn": ["ton_models", "gold", "defi", "dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30"], "alias": "fact_dex_pools_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_defi__fact_d_550b68a6a240e9f52a2898a975d7b407", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_defi__fact_d_550b68a6a240e9f52a2898a975d7b407"}, "created_at": 1747400127.5547302, "relation_name": "TON.dbt_utils_recency_defi.fact_dex_pools_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_defi__fact_d_550b68a6a240e9f52a2898a975d7b407\") }}", "language": "sql", "refs": [{"name": "defi__fact_dex_pools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.defi__fact_dex_pools"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_dex_pools", "attached_node": "model.ton_models.defi__fact_dex_pools", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp_last_updated", "interval": 30, "model": "{{ get_where_subquery(ref('defi__fact_dex_pools')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_defi__fact_dex_trades_fact_dex_trades_id.23533d3f63": {"database": "TON", "schema": "unique_defi", "name": "unique_defi__fact_dex_trades_fact_dex_trades_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_defi__fact_dex_trades_fact_dex_trades_id.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.ton_models.unique_defi__fact_dex_trades_fact_dex_trades_id.23533d3f63", "fqn": ["ton_models", "gold", "defi", "unique_defi__fact_dex_trades_fact_dex_trades_id"], "alias": "fact_dex_trades_fact_dex_trades_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.5814803, "relation_name": "TON.unique_defi.fact_dex_trades_fact_dex_trades_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "defi__fact_dex_trades", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.defi__fact_dex_trades"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_dex_trades_id", "file_key_name": "models.defi__fact_dex_trades", "attached_node": "model.ton_models.defi__fact_dex_trades", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_dex_trades_id", "model": "{{ get_where_subquery(ref('defi__fact_dex_trades')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30.d43566a6ae": {"database": "TON", "schema": "dbt_utils_recency_defi", "name": "dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_defi__fact_d_8452e055075fe7e46e682e67488d4bed.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.ton_models.dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30.d43566a6ae", "fqn": ["ton_models", "gold", "defi", "dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30"], "alias": "fact_dex_trades_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_defi__fact_d_8452e055075fe7e46e682e67488d4bed", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_defi__fact_d_8452e055075fe7e46e682e67488d4bed"}, "created_at": 1747400127.5830836, "relation_name": "TON.dbt_utils_recency_defi.fact_dex_trades_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_defi__fact_d_8452e055075fe7e46e682e67488d4bed\") }}", "language": "sql", "refs": [{"name": "defi__fact_dex_trades", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.defi__fact_dex_trades"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_dex_trades", "attached_node": "model.ton_models.defi__fact_dex_trades", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('defi__fact_dex_trades')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_nft__fact_nft_events_fact_nft_events_id.2799c147da": {"database": "TON", "schema": "unique_nft", "name": "unique_nft__fact_nft_events_fact_nft_events_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_nft__fact_nft_events_fact_nft_events_id.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.unique_nft__fact_nft_events_fact_nft_events_id.2799c147da", "fqn": ["ton_models", "gold", "nft", "unique_nft__fact_nft_events_fact_nft_events_id"], "alias": "fact_nft_events_fact_nft_events_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.635854, "relation_name": "TON.unique_nft.fact_nft_events_fact_nft_events_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.nft__fact_nft_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_nft_events_id", "file_key_name": "models.nft__fact_nft_events", "attached_node": "model.ton_models.nft__fact_nft_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_nft_events_id", "model": "{{ get_where_subquery(ref('nft__fact_nft_events')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30.f73753d297": {"database": "TON", "schema": "dbt_utils_recency_nft", "name": "dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_nft__fact_nf_435803117d6240f772d79a042b3dea44.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30.f73753d297", "fqn": ["ton_models", "gold", "nft", "dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30"], "alias": "fact_nft_events_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_nft__fact_nf_435803117d6240f772d79a042b3dea44", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_nft__fact_nf_435803117d6240f772d79a042b3dea44"}, "created_at": 1747400127.6374846, "relation_name": "TON.dbt_utils_recency_nft.fact_nft_events_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_nft__fact_nf_435803117d6240f772d79a042b3dea44\") }}", "language": "sql", "refs": [{"name": "nft__fact_nft_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.nft__fact_nft_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nft__fact_nft_events", "attached_node": "model.ton_models.nft__fact_nft_events", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('nft__fact_nft_events')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_nft__fact_nft_items_fact_nft_items_id.0b4990aee6": {"database": "TON", "schema": "unique_nft", "name": "unique_nft__fact_nft_items_fact_nft_items_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_nft__fact_nft_items_fact_nft_items_id.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.unique_nft__fact_nft_items_fact_nft_items_id.0b4990aee6", "fqn": ["ton_models", "gold", "nft", "unique_nft__fact_nft_items_fact_nft_items_id"], "alias": "fact_nft_items_fact_nft_items_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.6424274, "relation_name": "TON.unique_nft.fact_nft_items_fact_nft_items_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.nft__fact_nft_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_nft_items_id", "file_key_name": "models.nft__fact_nft_items", "attached_node": "model.ton_models.nft__fact_nft_items", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_nft_items_id", "model": "{{ get_where_subquery(ref('nft__fact_nft_items')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30.102f1a59b8": {"database": "TON", "schema": "dbt_utils_recency_nft", "name": "dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30.102f1a59b8", "fqn": ["ton_models", "gold", "nft", "dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30"], "alias": "fact_nft_items_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1747400127.6440396, "relation_name": "TON.dbt_utils_recency_nft.fact_nft_items_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.nft__fact_nft_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nft__fact_nft_items", "attached_node": "model.ton_models.nft__fact_nft_items", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('nft__fact_nft_items')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_nft__fact_nft_metadata_fact_nft_metadata_id.3d06c85292": {"database": "TON", "schema": "unique_nft", "name": "unique_nft__fact_nft_metadata_fact_nft_metadata_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_nft__fact_nft_metadata_fact_nft_metadata_id.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.unique_nft__fact_nft_metadata_fact_nft_metadata_id.3d06c85292", "fqn": ["ton_models", "gold", "nft", "unique_nft__fact_nft_metadata_fact_nft_metadata_id"], "alias": "fact_nft_metadata_fact_nft_metadata_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.6488585, "relation_name": "TON.unique_nft.fact_nft_metadata_fact_nft_metadata_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.nft__fact_nft_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_nft_metadata_id", "file_key_name": "models.nft__fact_nft_metadata", "attached_node": "model.ton_models.nft__fact_nft_metadata", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_nft_metadata_id", "model": "{{ get_where_subquery(ref('nft__fact_nft_metadata')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30.bdda24c277": {"database": "TON", "schema": "dbt_utils_recency_nft", "name": "dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_nft__fact_nf_99d2a036cd04847315a5ba5c6b57bc41.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30.bdda24c277", "fqn": ["ton_models", "gold", "nft", "dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30"], "alias": "fact_nft_metadata_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_nft__fact_nf_99d2a036cd04847315a5ba5c6b57bc41", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_nft__fact_nf_99d2a036cd04847315a5ba5c6b57bc41"}, "created_at": 1747400127.6504083, "relation_name": "TON.dbt_utils_recency_nft.fact_nft_metadata_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_nft__fact_nf_99d2a036cd04847315a5ba5c6b57bc41\") }}", "language": "sql", "refs": [{"name": "nft__fact_nft_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.nft__fact_nft_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nft__fact_nft_metadata", "attached_node": "model.ton_models.nft__fact_nft_metadata", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "update_timestamp_onchain", "interval": 30, "model": "{{ get_where_subquery(ref('nft__fact_nft_metadata')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_nft__fact_nft_sales_fact_nft_sales_id.48bd59ae9a": {"database": "TON", "schema": "unique_nft", "name": "unique_nft__fact_nft_sales_fact_nft_sales_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_nft__fact_nft_sales_fact_nft_sales_id.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.unique_nft__fact_nft_sales_fact_nft_sales_id.48bd59ae9a", "fqn": ["ton_models", "gold", "nft", "unique_nft__fact_nft_sales_fact_nft_sales_id"], "alias": "fact_nft_sales_fact_nft_sales_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.6566415, "relation_name": "TON.unique_nft.fact_nft_sales_fact_nft_sales_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.nft__fact_nft_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_nft_sales_id", "file_key_name": "models.nft__fact_nft_sales", "attached_node": "model.ton_models.nft__fact_nft_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_nft_sales_id", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30.3bd153af21": {"database": "TON", "schema": "dbt_utils_recency_nft", "name": "dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30.3bd153af21", "fqn": ["ton_models", "gold", "nft", "dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30"], "alias": "fact_nft_sales_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1747400127.6582065, "relation_name": "TON.dbt_utils_recency_nft.fact_nft_sales_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.nft__fact_nft_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nft__fact_nft_sales", "attached_node": "model.ton_models.nft__fact_nft_sales", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_nft__fact_nft_transfers_fact_nft_transfers_id.ec967d00b8": {"database": "TON", "schema": "unique_nft", "name": "unique_nft__fact_nft_transfers_fact_nft_transfers_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_nft__fact_nft_transfers_fact_nft_transfers_id.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.unique_nft__fact_nft_transfers_fact_nft_transfers_id.ec967d00b8", "fqn": ["ton_models", "gold", "nft", "unique_nft__fact_nft_transfers_fact_nft_transfers_id"], "alias": "fact_nft_transfers_fact_nft_transfers_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.6628673, "relation_name": "TON.unique_nft.fact_nft_transfers_fact_nft_transfers_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "nft__fact_nft_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.nft__fact_nft_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_nft_transfers_id", "file_key_name": "models.nft__fact_nft_transfers", "attached_node": "model.ton_models.nft__fact_nft_transfers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_nft_transfers_id", "model": "{{ get_where_subquery(ref('nft__fact_nft_transfers')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30.b6e4eb4a12": {"database": "TON", "schema": "dbt_utils_recency_nft", "name": "dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_nft__fact_nf_d699ac3a71fd05ef01fd549413efb750.sql", "original_file_path": "models/gold/nft/gold_nft.yml", "unique_id": "test.ton_models.dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30.b6e4eb4a12", "fqn": ["ton_models", "gold", "nft", "dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30"], "alias": "fact_nft_transfers_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_nft__fact_nf_d699ac3a71fd05ef01fd549413efb750", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_nft__fact_nf_d699ac3a71fd05ef01fd549413efb750"}, "created_at": 1747400127.6643937, "relation_name": "TON.dbt_utils_recency_nft.fact_nft_transfers_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_nft__fact_nf_d699ac3a71fd05ef01fd549413efb750\") }}", "language": "sql", "refs": [{"name": "nft__fact_nft_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.nft__fact_nft_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nft__fact_nft_transfers", "attached_node": "model.ton_models.nft__fact_nft_transfers", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('nft__fact_nft_transfers')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30.7b04942c81": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_a_5d6df0781d1c0ba8a2309b4cca288337.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30.7b04942c81", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30"], "alias": "fact_account_states_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_a_5d6df0781d1c0ba8a2309b4cca288337", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_a_5d6df0781d1c0ba8a2309b4cca288337"}, "created_at": 1747400127.7388594, "relation_name": "TON.dbt_utils_recency_core.fact_account_states_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_a_5d6df0781d1c0ba8a2309b4cca288337\") }}", "language": "sql", "refs": [{"name": "core__fact_account_states", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_account_states"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_account_states", "attached_node": "model.ton_models.core__fact_account_states", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_account_states')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_core__fact_balances_fact_balances_history_id.bfbf9dfbee": {"database": "TON", "schema": "unique_core", "name": "unique_core__fact_balances_fact_balances_history_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_core__fact_balances_fact_balances_history_id.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.unique_core__fact_balances_fact_balances_history_id.bfbf9dfbee", "fqn": ["ton_models", "gold", "core", "unique_core__fact_balances_fact_balances_history_id"], "alias": "fact_balances_fact_balances_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.7439091, "relation_name": "TON.unique_core.fact_balances_fact_balances_history_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "core__fact_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.core__fact_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_balances_history_id", "file_key_name": "models.core__fact_balances", "attached_node": "model.ton_models.core__fact_balances", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_balances_history_id", "model": "{{ get_where_subquery(ref('core__fact_balances')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_core__fact_balances_hour__block_timestamp__30.4f01cbcecb": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_balances_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_balances_hour__block_timestamp__30.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_balances_hour__block_timestamp__30.4f01cbcecb", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_balances_hour__block_timestamp__30"], "alias": "fact_balances_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1747400127.7454467, "relation_name": "TON.dbt_utils_recency_core.fact_balances_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__fact_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_balances", "attached_node": "model.ton_models.core__fact_balances", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_balances')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_core__fact_blocks_fact_blocks_id.2038fcd6bf": {"database": "TON", "schema": "unique_core", "name": "unique_core__fact_blocks_fact_blocks_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_core__fact_blocks_fact_blocks_id.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.unique_core__fact_blocks_fact_blocks_id.2038fcd6bf", "fqn": ["ton_models", "gold", "core", "unique_core__fact_blocks_fact_blocks_id"], "alias": "fact_blocks_fact_blocks_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.7502542, "relation_name": "TON.unique_core.fact_blocks_fact_blocks_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_blocks_id", "file_key_name": "models.core__fact_blocks", "attached_node": "model.ton_models.core__fact_blocks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_blocks_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30.59ae4d55e3": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30.59ae4d55e3", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30"], "alias": "fact_blocks_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1747400127.7518008, "relation_name": "TON.dbt_utils_recency_core.fact_blocks_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_blocks", "attached_node": "model.ton_models.core__fact_blocks", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_core__fact_jetton_events_fact_jetton_events_id.be6c022e7d": {"database": "TON", "schema": "unique_core", "name": "unique_core__fact_jetton_events_fact_jetton_events_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_core__fact_jetton_events_fact_jetton_events_id.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.unique_core__fact_jetton_events_fact_jetton_events_id.be6c022e7d", "fqn": ["ton_models", "gold", "core", "unique_core__fact_jetton_events_fact_jetton_events_id"], "alias": "fact_jetton_events_fact_jetton_events_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.7564182, "relation_name": "TON.unique_core.fact_jetton_events_fact_jetton_events_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "core__fact_jetton_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.core__fact_jetton_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_jetton_events_id", "file_key_name": "models.core__fact_jetton_events", "attached_node": "model.ton_models.core__fact_jetton_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_jetton_events_id", "model": "{{ get_where_subquery(ref('core__fact_jetton_events')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30.f9cfce62bc": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_j_b210252d17ed46748a0bfcfcca1b9142.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30.f9cfce62bc", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30"], "alias": "fact_jetton_events_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_j_b210252d17ed46748a0bfcfcca1b9142", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_j_b210252d17ed46748a0bfcfcca1b9142"}, "created_at": 1747400127.7579489, "relation_name": "TON.dbt_utils_recency_core.fact_jetton_events_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_j_b210252d17ed46748a0bfcfcca1b9142\") }}", "language": "sql", "refs": [{"name": "core__fact_jetton_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_jetton_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_jetton_events", "attached_node": "model.ton_models.core__fact_jetton_events", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_jetton_events')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_core__fact_jetton_metadata_fact_jetton_metadata_id.199e1de2a7": {"database": "TON", "schema": "unique_core", "name": "unique_core__fact_jetton_metadata_fact_jetton_metadata_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_core__fact_jetton_metadata_fact_jetton_metadata_id.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.unique_core__fact_jetton_metadata_fact_jetton_metadata_id.199e1de2a7", "fqn": ["ton_models", "gold", "core", "unique_core__fact_jetton_metadata_fact_jetton_metadata_id"], "alias": "fact_jetton_metadata_fact_jetton_metadata_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.7627714, "relation_name": "TON.unique_core.fact_jetton_metadata_fact_jetton_metadata_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "core__fact_jetton_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.core__fact_jetton_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_jetton_metadata_id", "file_key_name": "models.core__fact_jetton_metadata", "attached_node": "model.ton_models.core__fact_jetton_metadata", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_jetton_metadata_id", "model": "{{ get_where_subquery(ref('core__fact_jetton_metadata')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30.9641a1cc97": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_j_c6304be91c61d3a4a811dd83ec7f16ab.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30.9641a1cc97", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30"], "alias": "fact_jetton_metadata_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_j_c6304be91c61d3a4a811dd83ec7f16ab", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_j_c6304be91c61d3a4a811dd83ec7f16ab"}, "created_at": 1747400127.764301, "relation_name": "TON.dbt_utils_recency_core.fact_jetton_metadata_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_j_c6304be91c61d3a4a811dd83ec7f16ab\") }}", "language": "sql", "refs": [{"name": "core__fact_jetton_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_jetton_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_jetton_metadata", "attached_node": "model.ton_models.core__fact_jetton_metadata", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "update_timestamp_onchain", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_jetton_metadata')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_core__fact_messages_fact_messages_id.7e30617689": {"database": "TON", "schema": "unique_core", "name": "unique_core__fact_messages_fact_messages_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_core__fact_messages_fact_messages_id.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.unique_core__fact_messages_fact_messages_id.7e30617689", "fqn": ["ton_models", "gold", "core", "unique_core__fact_messages_fact_messages_id"], "alias": "fact_messages_fact_messages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.7691433, "relation_name": "TON.unique_core.fact_messages_fact_messages_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "core__fact_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.core__fact_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_messages_id", "file_key_name": "models.core__fact_messages", "attached_node": "model.ton_models.core__fact_messages", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_messages_id", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_core__fact_messages_hour__block_timestamp__30.b8c62f421d": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_messages_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_messages_hour__block_timestamp__30.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_messages_hour__block_timestamp__30.b8c62f421d", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_messages_hour__block_timestamp__30"], "alias": "fact_messages_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1747400127.7706652, "relation_name": "TON.dbt_utils_recency_core.fact_messages_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__fact_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_messages", "attached_node": "model.ton_models.core__fact_messages", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.unique_core__fact_transactions_fact_transactions_id.9760742361": {"database": "TON", "schema": "unique_core", "name": "unique_core__fact_transactions_fact_transactions_id", "resource_type": "test", "package_name": "ton_models", "path": "unique_core__fact_transactions_fact_transactions_id.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.unique_core__fact_transactions_fact_transactions_id.9760742361", "fqn": ["ton_models", "gold", "core", "unique_core__fact_transactions_fact_transactions_id"], "alias": "fact_transactions_fact_transactions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_quality"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.775396, "relation_name": "TON.unique_core.fact_transactions_fact_transactions_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(tags=['test_quality']) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ton_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fact_transactions_id", "file_key_name": "models.core__fact_transactions", "attached_node": "model.ton_models.core__fact_transactions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fact_transactions_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30.78a2309a3c": {"database": "TON", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_recency_core__fact_t_61794f1ee09b28b3ab1e8b63c3e11b8a.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.ton_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30.78a2309a3c", "fqn": ["ton_models", "gold", "core", "dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30"], "alias": "fact_transactions_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_t_61794f1ee09b28b3ab1e8b63c3e11b8a", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_t_61794f1ee09b28b3ab1e8b63c3e11b8a"}, "created_at": 1747400127.7769492, "relation_name": "TON.dbt_utils_recency_core.fact_transactions_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_t_61794f1ee09b28b3ab1e8b63c3e11b8a\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transactions", "attached_node": "model.ton_models.core__fact_transactions", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 30, "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_utils"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS.1501e0ea66": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_41b4895c111847570b9b58f5a6c076d2.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS.1501e0ea66", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS"], "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41b4895c111847570b9b58f5a6c076d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_41b4895c111847570b9b58f5a6c076d2"}, "created_at": 1747400127.7859004, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41b4895c111847570b9b58f5a6c076d2\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"database": "TON", "schema": "not_null_core", "name": "not_null_core__dim_labels_ADDRESS", "resource_type": "test", "package_name": "ton_models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "fqn": ["ton_models", "gold", "core", "not_null_core__dim_labels_ADDRESS"], "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp >= current_date - 7", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp >= current_date - 7"}, "created_at": 1747400127.7944388, "relation_name": "TON.not_null_core.dim_labels_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"modified_timestamp >= current_date - 7\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN.8557883709": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_6006a62e2d0011ab1a65fd34173ce90e.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN.8557883709", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN"], "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6006a62e2d0011ab1a65fd34173ce90e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_6006a62e2d0011ab1a65fd34173ce90e"}, "created_at": 1747400127.795932, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_BLOCKCHAIN", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6006a62e2d0011ab1a65fd34173ce90e\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR.d5181598d8": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_64787f541f11f511f0997901e614dcfa.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR.d5181598d8", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR"], "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_64787f541f11f511f0997901e614dcfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_64787f541f11f511f0997901e614dcfa"}, "created_at": 1747400127.7998207, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_CREATOR", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_64787f541f11f511f0997901e614dcfa\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CREATOR", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE.c9d9d14a55": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_6035e0461bec6061c33dfe6bc2448d37.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE.c9d9d14a55", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE"], "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6035e0461bec6061c33dfe6bc2448d37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_6035e0461bec6061c33dfe6bc2448d37"}, "created_at": 1747400127.8035743, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6035e0461bec6061c33dfe6bc2448d37\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE.dc4b4a781a": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_7709dcdef6d145ab7a39f93c6ad90f97.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE.dc4b4a781a", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE"], "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7709dcdef6d145ab7a39f93c6ad90f97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_7709dcdef6d145ab7a39f93c6ad90f97"}, "created_at": 1747400127.8073988, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_LABEL_SUBTYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7709dcdef6d145ab7a39f93c6ad90f97\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL.457ab8a792": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL.457ab8a792", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL"], "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1747400127.811072, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_LABEL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LABEL", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME.fabaa88044": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_d752bce92b73c8f7029894915b4e65a2.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME.fabaa88044", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME"], "alias": "dim_labels_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d752bce92b73c8f7029894915b4e65a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_d752bce92b73c8f7029894915b4e65a2"}, "created_at": 1747400127.8147202, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_ADDRESS_NAME", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d752bce92b73c8f7029894915b4e65a2\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS_NAME", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID.9ca3f8b086": {"database": "TON", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID", "resource_type": "test", "package_name": "ton_models", "path": "dbt_expectations_expect_column_ade17f48adf7285cb61d5c346cc42ee4.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID.9ca3f8b086", "fqn": ["ton_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID"], "alias": "dim_labels_DIM_LABELS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ade17f48adf7285cb61d5c346cc42ee4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_column_ade17f48adf7285cb61d5c346cc42ee4"}, "created_at": 1747400127.8183289, "relation_name": "TON.dbt_expectations_expect_column_to_exist_core.dim_labels_DIM_LABELS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ade17f48adf7285cb61d5c346cc42ee4\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_LABELS_ID", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_LABELS_ID", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}}, "test.ton_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225": {"database": "TON", "schema": "not_null_core", "name": "not_null_core__dim_labels_DIM_LABELS_ID", "resource_type": "test", "package_name": "ton_models", "path": "not_null_core__dim_labels_DIM_LABELS_ID.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225", "fqn": ["ton_models", "gold", "core", "not_null_core__dim_labels_DIM_LABELS_ID"], "alias": "dim_labels_DIM_LABELS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp >= current_date - 7", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp >= current_date - 7"}, "created_at": 1747400127.8221533, "relation_name": "TON.not_null_core.dim_labels_DIM_LABELS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"modified_timestamp >= current_date - 7\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_LABELS_ID", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_LABELS_ID", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.ton_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16": {"database": "TON", "schema": "not_null_core", "name": "not_null_core__dim_labels_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "ton_models", "path": "not_null_core__dim_labels_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16", "fqn": ["ton_models", "gold", "core", "not_null_core__dim_labels_INSERTED_TIMESTAMP"], "alias": "dim_labels_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp >= current_date - 7", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp >= current_date - 7"}, "created_at": 1747400127.8236558, "relation_name": "TON.not_null_core.dim_labels_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"modified_timestamp >= current_date - 7\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.ton_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a": {"database": "TON", "schema": "dbt_utils_unique_combination_of_columns_core", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS", "resource_type": "test", "package_name": "ton_models", "path": "dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.ton_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a", "fqn": ["ton_models", "gold", "core", "dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS"], "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb"}, "created_at": 1747400127.8251238, "relation_name": "TON.dbt_utils_unique_combination_of_columns_core.dim_labels_ADDRESS", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ton_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__dim_labels", "attached_node": "model.ton_models.core__dim_labels", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}}, "test.livequery_base.test___utils_udf_introspect.79bd27a18b": {"database": "TON", "schema": "test", "name": "test___utils_udf_introspect", "resource_type": "test", "package_name": "livequery_base", "path": "test___utils_udf_introspect.sql", "original_file_path": "models/deploy/core/_utils.yml", "unique_id": "test.livequery_base.test___utils_udf_introspect.79bd27a18b", "fqn": ["livequery_base", "deploy", "core", "test___utils_udf_introspect"], "alias": "_utils_udf_introspect", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0119178, "relation_name": "TON.test._utils_udf_introspect", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base._utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_introspect", "file_key_name": "models._utils", "attached_node": "model.livequery_base._utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'hello'", "assertions": ["result = 'hello'"], "column_name": "udf_introspect", "model": "{{ get_where_subquery(ref('_utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_json_rpc_call.0b87c6050e": {"database": "TON", "schema": "test", "name": "test__utils_udf_json_rpc_call", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_json_rpc_call.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_json_rpc_call.0b87c6050e", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_json_rpc_call"], "alias": "utils_udf_json_rpc_call", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.040415, "relation_name": "TON.test.utils_udf_json_rpc_call", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_json_rpc_call", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'foo', [], 1", "assertions": ["result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n"], "column_name": "udf_json_rpc_call", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_1", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_true_1"], "alias": "utils_udf_urlencode_dict_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0452929, "relation_name": "TON.test.utils_udf_urlencode_dict_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_true_2.764afd6db8": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_2", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_true_2.764afd6db8", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_true_2"], "alias": "utils_udf_urlencode_dict_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0503001, "relation_name": "TON.test.utils_udf_urlencode_dict_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'a', 'b':'b'}, TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_true_space.11f0932fc3": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_space", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_true_space.11f0932fc3", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_true_space"], "alias": "utils_udf_urlencode_dict_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0552843, "relation_name": "TON.test.utils_udf_urlencode_dict_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_true_special.4eef6cb355": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_special", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_true_special.4eef6cb355", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_true_special"], "alias": "utils_udf_urlencode_dict_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0600872, "relation_name": "TON.test.utils_udf_urlencode_dict_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_true_array.614d53ca8a": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_true_array.614d53ca8a", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_true_array"], "alias": "utils_udf_urlencode_dict_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0650916, "relation_name": "TON.test.utils_udf_urlencode_dict_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_false_1.e2e07ad77a": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_1", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_false_1.e2e07ad77a", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_false_1"], "alias": "utils_udf_urlencode_dict_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.070062, "relation_name": "TON.test.utils_udf_urlencode_dict_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_false_2.58739709ab": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_2", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_false_2.58739709ab", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_false_2"], "alias": "utils_udf_urlencode_dict_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0745654, "relation_name": "TON.test.utils_udf_urlencode_dict_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}, FALSE\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_false_space.1167d3f089": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_space", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_false_space.1167d3f089", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_false_space"], "alias": "utils_udf_urlencode_dict_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0796006, "relation_name": "TON.test.utils_udf_urlencode_dict_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_false_special.0cd3cb5826": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_special", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_false_special.0cd3cb5826", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_false_special"], "alias": "utils_udf_urlencode_dict_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.084239, "relation_name": "TON.test.utils_udf_urlencode_dict_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_false_array.9524cea2e8": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_false_array.9524cea2e8", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_false_array"], "alias": "utils_udf_urlencode_dict_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.088709, "relation_name": "TON.test.utils_udf_urlencode_dict_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_1.1d75f92e0e": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_1", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_1.1d75f92e0e", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_1"], "alias": "utils_udf_urlencode_dict_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0937474, "relation_name": "TON.test.utils_udf_urlencode_dict_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_2.60da312d8c": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_2", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_2.60da312d8c", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_2"], "alias": "utils_udf_urlencode_dict_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.0984552, "relation_name": "TON.test.utils_udf_urlencode_dict_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_space.d5e1917fd6": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_space", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_space.d5e1917fd6", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_space"], "alias": "utils_udf_urlencode_dict_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.103014, "relation_name": "TON.test.utils_udf_urlencode_dict_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_special.6f25d30fd9": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_special", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_special.6f25d30fd9", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_special"], "alias": "utils_udf_urlencode_dict_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1082253, "relation_name": "TON.test.utils_udf_urlencode_dict_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_dict_array.25f6af5cf8": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_dict_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_dict_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_dict_array.25f6af5cf8", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_dict_array"], "alias": "utils_udf_urlencode_dict_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.112671, "relation_name": "TON.test.utils_udf_urlencode_dict_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_true_1.f1dc90fd5d": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_true_1", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_true_1.f1dc90fd5d", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_true_1"], "alias": "utils_udf_urlencode_array_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1173136, "relation_name": "TON.test.utils_udf_urlencode_array_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_true_2.4c09ca3de2": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_true_2", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_true_2.4c09ca3de2", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_true_2"], "alias": "utils_udf_urlencode_array_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1219532, "relation_name": "TON.test.utils_udf_urlencode_array_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_true_space.c150fa3544": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_true_space", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_true_space.c150fa3544", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_true_space"], "alias": "utils_udf_urlencode_array_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1263926, "relation_name": "TON.test.utils_udf_urlencode_array_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_true_special.14abbd82f3": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_true_special", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_true_special.14abbd82f3", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_true_special"], "alias": "utils_udf_urlencode_array_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1310577, "relation_name": "TON.test.utils_udf_urlencode_array_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_true_array.559475a80a": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_true_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_true_array.559475a80a", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_true_array"], "alias": "utils_udf_urlencode_array_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.135529, "relation_name": "TON.test.utils_udf_urlencode_array_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_false_1.ffe0d93235": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_false_1", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_false_1.ffe0d93235", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_false_1"], "alias": "utils_udf_urlencode_array_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.140241, "relation_name": "TON.test.utils_udf_urlencode_array_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_false_2.f6e4d9a06a": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_false_2", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_false_2.f6e4d9a06a", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_false_2"], "alias": "utils_udf_urlencode_array_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1449268, "relation_name": "TON.test.utils_udf_urlencode_array_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], FALSE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_false_space.c46a422a10": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_false_space", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_false_space.c46a422a10", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_false_space"], "alias": "utils_udf_urlencode_array_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1493578, "relation_name": "TON.test.utils_udf_urlencode_array_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_false_special.ad3b4ce496": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_false_special", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_false_special.ad3b4ce496", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_false_special"], "alias": "utils_udf_urlencode_array_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.154025, "relation_name": "TON.test.utils_udf_urlencode_array_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_false_array.979bfafd11": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_false_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_false_array.979bfafd11", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_false_array"], "alias": "utils_udf_urlencode_array_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.158558, "relation_name": "TON.test.utils_udf_urlencode_array_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_1.bae96ece17": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_1", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_1.bae96ece17", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_1"], "alias": "utils_udf_urlencode_array_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1632283, "relation_name": "TON.test.utils_udf_urlencode_array_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']]\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_2.ff2898d4a2": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_2", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_2.ff2898d4a2", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_2"], "alias": "utils_udf_urlencode_array_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1678615, "relation_name": "TON.test.utils_udf_urlencode_array_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']]\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_space.67b6f51498": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_space", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_space.67b6f51498", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_space"], "alias": "utils_udf_urlencode_array_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1723175, "relation_name": "TON.test.utils_udf_urlencode_array_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']]\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_special.746423269a": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_special", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_special.746423269a", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_special"], "alias": "utils_udf_urlencode_array_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1769664, "relation_name": "TON.test.utils_udf_urlencode_array_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']]\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_urlencode_array_array.3d05dcb6a9": {"database": "TON", "schema": "test", "name": "test__utils_udf_urlencode_array_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_urlencode_array_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_urlencode_array_array.3d05dcb6a9", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_urlencode_array_array"], "alias": "utils_udf_urlencode_array_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1816394, "relation_name": "TON.test.utils_udf_urlencode_array_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]]\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_int_to_binary.46856460db": {"database": "TON", "schema": "test", "name": "test__utils_udf_int_to_binary", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_int_to_binary.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_int_to_binary.46856460db", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_int_to_binary"], "alias": "utils_udf_int_to_binary", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1861053, "relation_name": "TON.test.utils_udf_int_to_binary", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": 123456789, "assertions": ["result = '111010110111100110100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_int_to_binary_large_number.feba996e3b": {"database": "TON", "schema": "test", "name": "test__utils_udf_int_to_binary_large_number", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_int_to_binary_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_int_to_binary_large_number.feba996e3b", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_int_to_binary_large_number"], "alias": "utils_udf_int_to_binary_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1907947, "relation_name": "TON.test.utils_udf_int_to_binary_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'123456789123456789123456789123456789123456789'", "assertions": ["result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_binary_to_int.907b20f381": {"database": "TON", "schema": "test", "name": "test__utils_udf_binary_to_int", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_binary_to_int.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_binary_to_int.907b20f381", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_binary_to_int"], "alias": "utils_udf_binary_to_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.1956153, "relation_name": "TON.test.utils_udf_binary_to_int", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "111010110111100110100010101", "assertions": ["result = '123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_binary_to_int_large_number.926bff44e9": {"database": "TON", "schema": "test", "name": "test__utils_udf_binary_to_int_large_number", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_binary_to_int_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_binary_to_int_large_number.926bff44e9", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_binary_to_int_large_number"], "alias": "utils_udf_binary_to_int_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.20104, "relation_name": "TON.test.utils_udf_binary_to_int_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'110110110100110110100101110101100110100000101111100010101'", "assertions": ["result = '123456789123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__utils_udf_evm_decode_log.b6fedb07e9": {"database": "TON", "schema": "test", "name": "test__utils_udf_evm_decode_log", "resource_type": "test", "package_name": "livequery_base", "path": "test__utils_udf_evm_decode_log.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test__utils_udf_evm_decode_log.b6fedb07e9", "fqn": ["livequery_base", "deploy", "core", "test__utils_udf_evm_decode_log"], "alias": "utils_udf_evm_decode_log", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.2060103, "relation_name": "TON.test.utils_udf_evm_decode_log", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_evm_decode_log", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant\n", "assertions": ["result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]"], "column_name": "udf_evm_decode_log", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456": {"database": "TON", "schema": "test", "name": "test__live_udf_api_post_data_object", "resource_type": "test", "package_name": "livequery_base", "path": "test__live_udf_api_post_data_object.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456", "fqn": ["livequery_base", "deploy", "core", "test__live_udf_api_post_data_object"], "alias": "live_udf_api_post_data_object", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.2119603, "relation_name": "TON.test.live_udf_api_post_data_object", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_base.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', {'foo': 'bar'}\n", "assertions": ["result:data.json is not null", "result:data.json = OBJECT_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8": {"database": "TON", "schema": "test", "name": "test__live_udf_api_post_data_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__live_udf_api_post_data_array.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8", "fqn": ["livequery_base", "deploy", "core", "test__live_udf_api_post_data_array"], "alias": "live_udf_api_post_data_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.2179356, "relation_name": "TON.test.live_udf_api_post_data_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_base.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', ['foo', 'bar']\n", "assertions": ["result:data.json is not null", "result:data.json = ARRAY_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb": {"database": "TON", "schema": "test", "name": "test__live_udf_api_post_data_string", "resource_type": "test", "package_name": "livequery_base", "path": "test__live_udf_api_post_data_string.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb", "fqn": ["livequery_base", "deploy", "core", "test__live_udf_api_post_data_string"], "alias": "live_udf_api_post_data_string", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.2235239, "relation_name": "TON.test.live_udf_api_post_data_string", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_base.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', 'foo'::VARIANT\n", "assertions": ["result:data.json is not null", "result:data.json = 'foo'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_register_secret.85444b4425": {"database": "TON", "schema": "test_secrets", "name": "test_secrets__udf_register_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_register_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_register_secret.85444b4425", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_register_secret"], "alias": "udf_register_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.231489, "relation_name": "TON.test_secrets.udf_register_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_register_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', 'test'\n", "assertions": ["result = {'request_id':'test','success':false}"], "column_name": "udf_register_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69": {"database": "TON", "schema": "test_secrets", "name": "test_secrets__udf_get_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_get_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_get_secret"], "alias": "udf_get_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.236251, "relation_name": "TON.test_secrets.udf_get_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_get_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test'\n", "assertions": ["result::OBJECT = {'key': 'value'}\n"], "column_name": "udf_get_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2": {"database": "TON", "schema": "test_secrets", "name": "test_secrets__udf_get_secrets", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_get_secrets.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_get_secrets"], "alias": "udf_get_secrets", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.2412536, "relation_name": "TON.test_secrets.udf_get_secrets", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_get_secrets", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "", "assertions": ["result = {'test': {'key': 'value'}}\n"], "column_name": "udf_get_secrets", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_create_secret.d42bc02506": {"database": "TON", "schema": "test_secrets", "name": "test_secrets__udf_create_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_create_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_create_secret.d42bc02506", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_create_secret"], "alias": "udf_create_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.2461646, "relation_name": "TON.test_secrets.udf_create_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_create_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', {'key': 'value'}\n", "assertions": ["result = 200"], "column_name": "udf_create_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_delete_secret.9f28745276": {"database": "TON", "schema": "test_secrets", "name": "test_secrets__udf_delete_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_delete_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_delete_secret.9f28745276", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_delete_secret"], "alias": "udf_delete_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1747400128.250924, "relation_name": "TON.test_secrets.udf_delete_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_delete_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test_delete'\n", "assertions": ["result = 200"], "column_name": "udf_delete_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}}, "sources": {"source.ton_models.bronze_streamline.account_states_tdl": {"database": "streamline", "schema": "ton", "name": "account_states_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.account_states_tdl", "fqn": ["ton_models", "bronze_streamline", "account_states_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "account_states_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.account_states_tdl", "created_at": 1747400128.262226, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.balances_history_tdl": {"database": "streamline", "schema": "ton", "name": "balances_history_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.balances_history_tdl", "fqn": ["ton_models", "bronze_streamline", "balances_history_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "balances_history_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.balances_history_tdl", "created_at": 1747400128.2633584, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.blocks_tdl": {"database": "streamline", "schema": "ton", "name": "blocks_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.blocks_tdl", "fqn": ["ton_models", "bronze_streamline", "blocks_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "blocks_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.blocks_tdl", "created_at": 1747400128.2635407, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.dex_pools_tdl": {"database": "streamline", "schema": "ton", "name": "dex_pools_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.dex_pools_tdl", "fqn": ["ton_models", "bronze_streamline", "dex_pools_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "dex_pools_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.dex_pools_tdl", "created_at": 1747400128.2636938, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.dex_trades_tdl": {"database": "streamline", "schema": "ton", "name": "dex_trades_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.dex_trades_tdl", "fqn": ["ton_models", "bronze_streamline", "dex_trades_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "dex_trades_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.dex_trades_tdl", "created_at": 1747400128.2638426, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.jetton_events_tdl": {"database": "streamline", "schema": "ton", "name": "jetton_events_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.jetton_events_tdl", "fqn": ["ton_models", "bronze_streamline", "jetton_events_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "jetton_events_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.jetton_events_tdl", "created_at": 1747400128.263979, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.jetton_metadata_tdl": {"database": "streamline", "schema": "ton", "name": "jetton_metadata_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.jetton_metadata_tdl", "fqn": ["ton_models", "bronze_streamline", "jetton_metadata_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "jetton_metadata_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.jetton_metadata_tdl", "created_at": 1747400128.2641141, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.messages_tdl": {"database": "streamline", "schema": "ton", "name": "messages_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.messages_tdl", "fqn": ["ton_models", "bronze_streamline", "messages_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "messages_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.messages_tdl", "created_at": 1747400128.264261, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.messages_with_data_tdl": {"database": "streamline", "schema": "ton", "name": "messages_with_data_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.messages_with_data_tdl", "fqn": ["ton_models", "bronze_streamline", "messages_with_data_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "messages_with_data_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.messages_with_data_tdl", "created_at": 1747400128.2643957, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.nft_events_tdl": {"database": "streamline", "schema": "ton", "name": "nft_events_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.nft_events_tdl", "fqn": ["ton_models", "bronze_streamline", "nft_events_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "nft_events_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.nft_events_tdl", "created_at": 1747400128.2645435, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.nft_items_tdl": {"database": "streamline", "schema": "ton", "name": "nft_items_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.nft_items_tdl", "fqn": ["ton_models", "bronze_streamline", "nft_items_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "nft_items_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.nft_items_tdl", "created_at": 1747400128.264674, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.nft_metadata_tdl": {"database": "streamline", "schema": "ton", "name": "nft_metadata_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.nft_metadata_tdl", "fqn": ["ton_models", "bronze_streamline", "nft_metadata_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "nft_metadata_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.nft_metadata_tdl", "created_at": 1747400128.2648017, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.nft_sales_tdl": {"database": "streamline", "schema": "ton", "name": "nft_sales_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.nft_sales_tdl", "fqn": ["ton_models", "bronze_streamline", "nft_sales_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "nft_sales_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.nft_sales_tdl", "created_at": 1747400128.2649271, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.nft_transfers_tdl": {"database": "streamline", "schema": "ton", "name": "nft_transfers_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.nft_transfers_tdl", "fqn": ["ton_models", "bronze_streamline", "nft_transfers_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "nft_transfers_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.nft_transfers_tdl", "created_at": 1747400128.2650514, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.transactions_tdl": {"database": "streamline", "schema": "ton", "name": "transactions_tdl", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.transactions_tdl", "fqn": ["ton_models", "bronze_streamline", "transactions_tdl"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "transactions_tdl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.transactions_tdl", "created_at": 1747400128.265174, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.shards": {"database": "streamline", "schema": "ton", "name": "shards", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.shards", "fqn": ["ton_models", "bronze_streamline", "shards"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "shards", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.shards", "created_at": 1747400128.265296, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.blocks": {"database": "streamline", "schema": "ton", "name": "blocks", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.blocks", "fqn": ["ton_models", "bronze_streamline", "blocks"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.blocks", "created_at": 1747400128.2654202, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.bronze_streamline.transactions": {"database": "streamline", "schema": "ton", "name": "transactions", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.bronze_streamline.transactions", "fqn": ["ton_models", "bronze_streamline", "transactions"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.ton.transactions", "created_at": 1747400128.2655604, "unrendered_database": "streamline", "unrendered_schema": "ton"}, "source.ton_models.crosschain.address_tags": {"database": "crosschain", "schema": "core", "name": "address_tags", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.crosschain.address_tags", "fqn": ["ton_models", "crosschain", "address_tags"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_tags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.address_tags", "created_at": 1747400128.2656865, "unrendered_database": "{{ 'crosschain' if target.database == 'TON' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.ton_models.crosschain.dim_dates": {"database": "crosschain", "schema": "core", "name": "dim_dates", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.crosschain.dim_dates", "fqn": ["ton_models", "crosschain", "dim_dates"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.dim_dates", "created_at": 1747400128.2658103, "unrendered_database": "{{ 'crosschain' if target.database == 'TON' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.ton_models.crosschain_silver.number_sequence": {"database": "crosschain", "schema": "silver", "name": "number_sequence", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.crosschain_silver.number_sequence", "fqn": ["ton_models", "crosschain_silver", "number_sequence"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "number_sequence", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.number_sequence", "created_at": 1747400128.2659335, "unrendered_database": "{{ 'crosschain' if target.database == 'TON' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.ton_models.crosschain_silver.complete_native_prices": {"database": "crosschain", "schema": "silver", "name": "complete_native_prices", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.crosschain_silver.complete_native_prices", "fqn": ["ton_models", "crosschain_silver", "complete_native_prices"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_native_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_native_prices", "created_at": 1747400128.2660549, "unrendered_database": "{{ 'crosschain' if target.database == 'TON' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.ton_models.crosschain_silver.labels_combined": {"database": "crosschain", "schema": "silver", "name": "labels_combined", "resource_type": "source", "package_name": "ton_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.ton_models.crosschain_silver.labels_combined", "fqn": ["ton_models", "crosschain_silver", "labels_combined"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "labels_combined", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.labels_combined", "created_at": 1747400128.2661755, "unrendered_database": "{{ 'crosschain' if target.database == 'TON' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.livequery_base.crosschain.dim_date_hours": {"database": "crosschain_dev", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.crosschain.dim_date_hours", "fqn": ["livequery_base", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_date_hours", "created_at": 1747400128.2663107, "unrendered_database": "{{ 'crosschain' if target.database == 'LIVEQUERY' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.livequery_base.crosschain.dim_contracts": {"database": "crosschain_dev", "schema": "core", "name": "dim_contracts", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.crosschain.dim_contracts", "fqn": ["livequery_base", "crosschain", "dim_contracts"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_contracts", "created_at": 1747400128.2664433, "unrendered_database": "{{ 'crosschain' if target.database == 'LIVEQUERY' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.livequery_base.crosschain.dim_evm_event_abis": {"database": "crosschain_dev", "schema": "core", "name": "dim_evm_event_abis", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.crosschain.dim_evm_event_abis", "fqn": ["livequery_base", "crosschain", "dim_evm_event_abis"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_evm_event_abis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_evm_event_abis", "created_at": 1747400128.2665956, "unrendered_database": "{{ 'crosschain' if target.database == 'LIVEQUERY' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.livequery_base.ethereum_core.fact_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "fact_event_logs", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.ethereum_core.fact_event_logs", "fqn": ["livequery_base", "ethereum_core", "fact_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.fact_event_logs", "created_at": 1747400128.26673, "unrendered_database": "{{ 'ethereum' if target.database == 'LIVEQUERY' else 'ethereum_dev' }}", "unrendered_schema": "core"}, "source.livequery_base.ethereum_core.ez_decoded_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "ez_decoded_event_logs", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.ethereum_core.ez_decoded_event_logs", "fqn": ["livequery_base", "ethereum_core", "ez_decoded_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_decoded_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.ez_decoded_event_logs", "created_at": 1747400128.2668645, "unrendered_database": "{{ 'ethereum' if target.database == 'LIVEQUERY' else 'ethereum_dev' }}", "unrendered_schema": "core"}}, "macros": {"macro.ton_models.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "ton_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.ton_models.create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set sql %}\n        {{ create_udf_bulk_rest_api_v2() }};\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.ton_models.create_udf_bulk_rest_api_v2", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2156887, "supported_languages": null}, "macro.ton_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "ton_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.ton_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2170546, "supported_languages": null}, "macro.ton_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "ton_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.ton_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n        snowflake.execute({sqlText: `GRANT USAGE ON DATABASE ${DESTINATION_DB_NAME} TO ROLE AWS_LAMBDA_TON_API`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_TON;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_TON;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_TON;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_TON;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_TON;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT USAGE ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE AWS_LAMBDA_TON_API;`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.217827, "supported_languages": null}, "macro.ton_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "ton_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.ton_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call ton._internal.create_prod_clone(\n        'ton',\n        'ton_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.218212, "supported_languages": null}, "macro.ton_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "ton_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.ton_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'TON' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.ton_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2187243, "supported_languages": null}, "macro.ton_models.enable_search_optimization": {"name": "enable_search_optimization", "resource_type": "macro", "package_name": "ton_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.ton_models.enable_search_optimization", "macro_sql": "{% macro enable_search_optimization(schema_name, table_name, condition = '') %}\n    {% if target.database == 'TON' %}\n        ALTER TABLE {{ schema_name }}.{{ table_name }} ADD SEARCH OPTIMIZATION {{ condition }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.219139, "supported_languages": null}, "macro.ton_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "ton_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.ton_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2199252, "supported_languages": null}, "macro.ton_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "ton_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.ton_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {% if split_name | length < 2 %}\n        {{ split_name [0] | trim }}\n    {% else %}\n        {{ split_name [1] | trim }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.220609, "supported_languages": null}, "macro.ton_models.generate_tmp_view_name": {"name": "generate_tmp_view_name", "resource_type": "macro", "package_name": "ton_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.ton_models.generate_tmp_view_name", "macro_sql": "{% macro generate_tmp_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] ~ '__dbt_tmp' | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2211313, "supported_languages": null}, "macro.ton_models.generate_view_name": {"name": "generate_view_name", "resource_type": "macro", "package_name": "ton_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.ton_models.generate_view_name", "macro_sql": "{% macro generate_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.221631, "supported_languages": null}, "macro.ton_models.sequence_gaps": {"name": "sequence_gaps", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "unique_id": "macro.ton_models.sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n        WHERE\n            block_timestamp::date <= current_date - 1\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2227962, "supported_languages": null}, "macro.ton_models.test_compare_model_subset": {"name": "test_compare_model_subset", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tests/compare_model_subset.sql", "original_file_path": "macros/tests/compare_model_subset.sql", "unique_id": "macro.ton_models.test_compare_model_subset", "macro_sql": "{% test compare_model_subset(model, compare_model, compare_columns, model_condition) %}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n    select {{compare_cols_csv}} from {{ model }}\n    {{ model_condition }}\n),\nb as (\n    select {{compare_cols_csv}} from {{ compare_model }}\n),\na_minus_b as (\n    select * from a\n    except\n    select * from b\n),\nb_minus_a as (\n    select * from b\n    except\n    select * from a\n),\nunioned as (\n    select 'in_actual_not_in_expected' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'in_expected_not_in_actual' as which_diff, b_minus_a.* from b_minus_a\n)\nselect * from unioned\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2233965, "supported_languages": null}, "macro.ton_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.ton_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value(\n        'BLOCKCHAIN_NAME',\n        'TON'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.ton_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.223706, "supported_languages": null}, "macro.ton_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.ton_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.ton_models.create_tag_if_missing", "macro.ton_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2294245, "supported_languages": null}, "macro.ton_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.ton_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2302456, "supported_languages": null}, "macro.ton_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.ton_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2318587, "supported_languages": null}, "macro.ton_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.ton_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2334156, "supported_languages": null}, "macro.ton_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.ton_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.234031, "supported_languages": null}, "macro.ton_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "ton_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.ton_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2346783, "supported_languages": null}, "macro.ton_models.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "ton_models", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.ton_models.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set merge_sql = fsc_utils.get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.235418, "supported_languages": null}, "macro.ton_models.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "ton_models", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.ton_models.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    -- get the min value of column\n    {% if incremental_predicates[0] == \"min_value_predicate\" %}\n        {% set min_column_name = incremental_predicates[1] %}\n        {% set query %}\n            select min({{ min_column_name }}) from {{ source }}\n        {% endset %}\n        {% set min_block = run_query(query).columns[0][0] %}\n\n        {% if min_block is not none %}\n            {% set predicate_override %}\n                round({{ target }}.{{ min_column_name }},-5) >= round({{ min_block }},-5)\n            {% endset %}\n        {% else %}\n            {% set predicate_override = \"1=1\" %}\n        {% endif %}\n    {% endif %}\n    {% set predicates = [predicate_override] + incremental_predicates[2:] if predicate_override else incremental_predicates %}\n    -- standard delete+insert from here\n    {% set merge_sql = dbt.get_delete_insert_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2369492, "supported_languages": null}, "macro.ton_models.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "ton_models", "path": "macros/dbt/get_tmp_relation_type.sql", "original_file_path": "macros/dbt/get_tmp_relation_type.sql", "unique_id": "macro.ton_models.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n    -- always table\n    {{ return('table') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2372587, "supported_languages": null}, "macro.ton_models.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "ton_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.ton_models.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(\n        json OBJECT\n    ) returns ARRAY {% if target.database == 'TON' -%}\n        api_integration = aws_ton_api_prod_v2 AS 'https://e2rz7s6i8j.execute-api.us-east-1.amazonaws.com/prod/udf_bulk_rest_api'\n    {% else %}\n        api_integration = aws_ton_api_stg_v2 AS 'https://f1nw4eppf9.execute-api.us-east-1.amazonaws.com/stg/udf_bulk_rest_api'\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2376728, "supported_languages": null}, "macro.ton_models.streamline_external_table_query_v2": {"name": "streamline_external_table_query_v2", "resource_type": "macro", "package_name": "ton_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.ton_models.streamline_external_table_query_v2", "macro_sql": "{% macro streamline_external_table_query_v2(\n        model,\n        partition_function,\n        partition_name,\n        other_cols\n) %}\nWITH meta AS (\n    SELECT\n        LAST_MODIFIED::timestamp_ntz AS _inserted_timestamp,\n        file_name,\n        {{ partition_function }} AS {{ partition_name }}\n    FROM\n        TABLE(\n            information_schema.external_table_file_registration_history(\n                start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                table_name => '{{ source( \"bronze_streamline\", model) }}')\n            ) A\n)\nSELECT\n    {{ other_cols }},\n    _inserted_timestamp,\n    s.{{ partition_name }},\n    s.value AS VALUE,\n    file_name\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.{{ partition_name }} = s.{{ partition_name }}\nWHERE\n    b.{{ partition_name }} = s.{{ partition_name }}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.238607, "supported_languages": null}, "macro.ton_models.streamline_external_table_FR_query_v2": {"name": "streamline_external_table_FR_query_v2", "resource_type": "macro", "package_name": "ton_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.ton_models.streamline_external_table_FR_query_v2", "macro_sql": "{% macro streamline_external_table_FR_query_v2(\n        model,\n        partition_function,\n        partition_name,\n        other_cols\n) %}\nWITH meta AS (\n    SELECT\n        LAST_MODIFIED::timestamp_ntz AS _inserted_timestamp,\n        file_name,\n        {{ partition_function }} AS {{ partition_name }}\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => '{{ source( \"bronze_streamline\", model) }}'\n            )\n        ) A\n)\nSELECT\n    {{ other_cols }},\n    _inserted_timestamp,\n    s.{{ partition_name }},\n    s.value AS VALUE,\n    file_name\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.{{ partition_name }} = s.{{ partition_name }}\nWHERE\n    b.{{ partition_name }} = s.{{ partition_name }}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.239215, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2401311, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2430358, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2434537, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.244652, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2451084, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2459357, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.246409, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2468808, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2474074, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2484887, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2487688, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.249032, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2497633, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2500336, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2507715, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2524989, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.252843, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.253248, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2536826, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2538624, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.255144, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2557194, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2560053, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.256192, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2563233, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2566023, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2569942, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2578778, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2586443, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2589905, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.259306, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2596033, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.259778, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2599459, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.260157, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2603784, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2614298, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2617471, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2623546, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2626486, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {%- do run_query('alter session set quoted_identifiers_ignore_case = false;') -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do run_query('alter session unset quoted_identifiers_ignore_case;') -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__show_objects_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2657664, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_objects_sql": {"name": "snowflake__show_objects_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_objects_sql", "macro_sql": "{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n\n{#- gated for performance reasons - if you don't want iceberg, you shouldn't pay the latency penalty -#}\n{%- if adapter.behavior.enable_iceberg_materializations.no_warn %}\nselect all_objects.*, all_tables.IS_ICEBERG as \"is_iceberg\"\nfrom table(result_scan(last_query_id(-1))) all_objects\nleft join {{ schema.database }}.INFORMATION_SCHEMA.tables as all_tables\non all_tables.table_name = all_objects.\"name\"\nand all_tables.table_schema = all_objects.\"schema_name\"\nand all_tables.table_catalog = all_objects.\"database_name\"\n;\n{%- endif -%}\n\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2664983, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.267029, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2702804, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2762358, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2765172, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2773123, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2797077, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2821867, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.282658, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.283198, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2835422, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2839837, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2858534, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2878153, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2881603, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.28889, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2893214, "supported_languages": null}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2900426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.291049, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2926974, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2931368, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2935233, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.293836, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2956035, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2960217, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2964828, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2969837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2975633, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2981806, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.2985795, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.298794, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3007762, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.30101, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3026686, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3029602, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3032806, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.303509, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if language == 'sql' -%}\n        {%- if temporary -%}\n            {{ snowflake__create_table_temporary_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n            {{ snowflake__create_table_info_schema_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n            {{ snowflake__create_table_built_in_sql(relation, compiled_code) }}\n        {%- else -%}\n            {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n        {%- endif -%}\n\n    {%- elif language == 'python' -%}\n        {%- if catalog_relation.catalog_type == 'BUILT_IN' %}\n            {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n        {%- else -%}\n            {{ py_write_table(compiled_code, relation) }}\n        {%- endif %}\n\n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3062375, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_temporary_sql": {"name": "snowflake__create_table_temporary_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro_sql": "{% macro snowflake__create_table_temporary_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TEMPORARY TABLE and CREATE TEMPORARY TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace temporary table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\nas (\n    {{ compiled_code }}\n    )\n;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3071067, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_info_schema_sql": {"name": "snowflake__create_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_table_info_schema_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TABLE and CREATE TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- if catalog_relation.is_transient -%}\n    {%- set transient='transient ' -%}\n{%- else -%}\n    {%- set transient='' -%}\n{%- endif -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace {{ transient }}table {{ relation }}\n    {%- set contract_config = config.get('contract') -%}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('cluster by', catalog_relation.cluster_by, '(', '') }}\n    {% if copy_grants -%} copy grants {%- endif %}\n    as (\n        {%- if catalog_relation.cluster_by is not none -%}\n        select * from (\n            {{ compiled_code }}\n        )\n        order by (\n            {{ catalog_relation.cluster_by }}\n        )\n        {%- else -%}\n        {{ compiled_code }}\n        {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3092277, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_built_in_sql": {"name": "snowflake__create_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro_sql": "{% macro snowflake__create_table_built_in_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE and CREATE ICEBERG TABLE ... AS SELECT (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-snowflake\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n-#}\n\n{%- if not adapter.behavior.enable_iceberg_materializations.no_warn -%}\n    {%- do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') -%}\n{%- endif -%}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('cluster by', catalog_relation.cluster_by, '(', '') }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {%- if catalog_relation.cluster_by is not none -%}\n    select * from (\n        {{ compiled_code }}\n    )\n    order by (\n        {{ catalog_relation.cluster_by }}\n    )\n    {%- else -%}\n    {{ compiled_code }}\n    {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter iceberg table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter iceberg table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3113694, "supported_languages": null}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{% if catalog_relation.is_transient %}\n    {%- set table_type='transient' -%}\n{% endif %}\n\n{{ compiled_code }}\n\n\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            session.use_database(target_relation.database)\n            session.use_schema(target_relation.schema)\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3120139, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3123198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3126643, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n    Get all relevant metadata about a dynamic table\n\n    Args:\n    - relation: SnowflakeRelation - the relation to describe\n    Returns:\n        A dictionary with one or two entries depending on whether iceberg is enabled:\n        - dynamic_table: the metadata associated with an info schema dynamic table\n-#}\n    {%- set _dynamic_table_sql -%}\n    alter session set quoted_identifiers_ignore_case = false;\n    show dynamic tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"name\",\n        \"schema_name\",\n        \"database_name\",\n        \"text\",\n        \"target_lag\",\n        \"warehouse\",\n        \"refresh_mode\"\n    from table(result_scan(last_query_id()))\n    ;\n    {%- endset -%}\n\n    {%- set results = {'dynamic_table': run_query(_dynamic_table_sql)} -%}\n\n    alter session unset quoted_identifiers_ignore_case;\n\n    {%- do return(results) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3133798, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3147583, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3149807, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3152845, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, compiled_code) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, compiled_code) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3165815, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql": {"name": "snowflake__create_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates an info schema dynamic table\n\n    Implements CREATE DYNAMIC TABLE:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3170946, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql": {"name": "snowflake__create_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates a dynamic iceberg table\n\n    Implements CREATE DYNAMIC ICEBERG TABLE (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3178678, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic table with a new dynamic table\n\n    Args:\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Globals:\n    - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n    Returns:\n        A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3191972, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql": {"name": "snowflake__replace_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces an info schema dynamic table with a new info schema dynamic table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate or replace dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3198705, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql": {"name": "snowflake__replace_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate or replace dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'snowflake'\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3206596, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3216918, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3219318, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3233926, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3240244, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3249133, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.325619, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3257396, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3260813, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.326205, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.326586, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.326756, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3272128, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3276815, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.328091, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3283029, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3287263, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3289511, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3294876, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3297467, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3300865, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.330495, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.330709, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3316934, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3319423, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3321927, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.332578, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3328228, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3330605, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3333037, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3335855, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3338327, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.334062, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3343058, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3345473, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3347912, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3350136, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3357427, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3366385, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3369832, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3375409, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3379078, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3381011, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3385127, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3387315, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3393726, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.340021, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3404953, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3409302, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3412895, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3414545, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.342085, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3428814, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3431675, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3439693, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3443952, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3446288, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3449805, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3452253, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3456137, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3458595, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.346248, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.346474, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.34692, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3471737, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3475432, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3477101, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3481565, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3484108, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3488243, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3490407, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3495858, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3499575, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3503664, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.350591, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3510432, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3512979, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.351765, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3521557, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.352527, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3528883, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3530521, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3533785, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3535519, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3539996, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3544774, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3549469, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3562174, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.356526, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.356748, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.356967, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3571827, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.360942, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3622851, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.363682, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3640363, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3648038, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3650932, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3653033, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.365535, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3657193, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3659592, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3661454, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3670044, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3672807, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3691318, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3721988, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3753054, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3775885, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3781638, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.378551, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3805363, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.380883, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3818629, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3822145, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.382395, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3828256, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3830886, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3867426, "supported_languages": ["sql"]}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.393379, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.394261, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3951616, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.395518, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.395796, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3962097, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3964925, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3969896, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.397279, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.397689, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3979652, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.398192, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3984795, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3987312, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.3991532, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4008482, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4026778, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.404595, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4058812, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4074924, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4101515, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4105551, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4116592, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4120483, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.41302, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4141972, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4150388, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.416018, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.416362, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4174454, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4205763, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4211118, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.421703, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4239533, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4247398, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4251993, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4255254, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.426444, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.427062, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4283106, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4314225, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4317024, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.432053, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4335294, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4337866, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4340491, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4361656, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.438318, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4409797, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4414296, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4416988, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.441843, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.442063, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.442252, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4425764, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4429433, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.448301, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4486277, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.449402, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4500625, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4509616, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4516199, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.452042, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4525776, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4534318, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4537663, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.454082, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4599783, "supported_languages": ["sql"]}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4604874, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4608057, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4612913, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4616797, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4621172, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4624202, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4630494, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4636445, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4639134, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4642088, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4645138, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4650457, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4657164, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4664938, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4684317, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4688463, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4691749, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.469652, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.470054, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4707286, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4713807, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4717007, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.47215, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4725225, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4727175, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4732366, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4734907, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4737642, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4744158, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.475157, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.475383, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4770381, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4773338, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.477709, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4780974, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4783304, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4787128, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4789047, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.479785, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4800594, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4808447, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4818966, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4826045, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4828825, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4831517, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4835536, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4837818, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.48416, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.484386, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4854164, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4856174, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.48641, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4866784, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4868846, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4888067, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.489384, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4899018, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4906871, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4909725, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4913857, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4916356, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4919977, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4921865, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4926302, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4928377, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.493225, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4934504, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4938462, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4941986, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4945993, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.494826, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4967349, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4976096, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.4980433, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.499107, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5008996, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5020225, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5023682, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5030684, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5032814, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5035377, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5041344, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5044122, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5046425, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5048795, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5050752, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.505483, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.505819, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5064483, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.50708, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.507393, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5078723, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5084922, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5087516, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.509192, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5094526, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5099108, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.510643, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5113065, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5115526, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5117733, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5119388, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5125751, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5128298, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5129526, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5132027, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5134537, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5146377, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5150378, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5153453, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5157535, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5160382, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.516281, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5165653, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.51693, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.517235, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5177047, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5179918, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5182354, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5185194, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.518767, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5191567, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5193932, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5197148, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5199778, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5215092, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5216944, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5219467, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5221202, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5226524, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.522929, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5231185, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5234528, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5237882, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5241306, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5244424, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5248017, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5258207, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5260963, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5264826, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.526819, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5285442, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5295405, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5297894, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.530366, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5309386, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.531294, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5317852, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5320554, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5323303, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.532708, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.533528, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.533864, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5340798, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.534659, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5349367, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5352435, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5357206, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5360036, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5362506, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5365484, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5380888, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5383325, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5388067, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5391347, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5394433, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5397363, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5414815, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5421495, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5424259, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5429537, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.54329, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5442708, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.544662, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5458806, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5464098, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.546813, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5473447, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5479212, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.548591, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.549, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5494359, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.552991, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5538533, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.555509, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5558336, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.555992, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5567844, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5571315, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5575862, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5580146, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.558683, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5590606, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5595324, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.559974, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5603771, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5609264, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5614247, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.561614, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5617418, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5618637, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5621097, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5622325, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5623505, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.562486, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5640018, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5643485, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5647373, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5660672, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5666473, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.567165, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5677404, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5687907, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5700889, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5711293, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5719566, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5731628, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5739734, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5765748, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5772667, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5781195, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5826838, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5838199, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.584487, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5853622, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5857716, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5864263, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5870938, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5879278, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.58914, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5899773, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5912046, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5923324, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5928888, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5937874, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5946226, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5957294, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.596826, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5976834, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.5983887, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.600418, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6011956, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6016536, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6026013, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.602956, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.603121, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.604042, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6062593, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6071951, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.608886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.610239, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6111155, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6118743, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6127384, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6136067, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6142817, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6149824, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.615866, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6165724, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6175416, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6185575, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6195717, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6204264, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6214552, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6223788, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6235206, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.624552, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6257424, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6266682, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.627555, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.628543, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.629118, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6305056, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6317177, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6322784, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6336865, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6346276, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6350756, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.635739, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.637129, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6385176, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6393998, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6403306, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6409478, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6422107, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6437619, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6444163, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6448638, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6457577, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6462672, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6472669, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6488194, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6496594, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6501706, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.650695, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6520777, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6526222, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6532803, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.654034, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.654498, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6549983, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6555324, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6562045, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6565442, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6569371, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.657065, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6571865, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.65733, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6574502, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.657597, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.658128, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6584702, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6587994, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6591895, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6593611, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6595404, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6597033, "supported_languages": null}, "macro.fsc_utils.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.fsc_utils.create_udfs", "macro_sql": "{% macro create_udfs(drop_=False,schema=\"utils\") %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set name %}\n        {{- fsc_utils.udf_configs(schema) -}}\n        {% endset %}\n        {%  set udfs = fromyaml(name) %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS {{ schema }};\n        {%- for udf in udfs -%}\n        {{- fsc_utils.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {% endfor %}\n        {% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_or_drop_function_from_config", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6609135, "supported_languages": null}, "macro.fsc_utils.get_query_tag": {"name": "get_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.get_query_tag", "macro_sql": "{% macro get_query_tag() %}\n    {# Get the full path of the model #}\n    {% set model_path = model.path | string %}\n    {% set folder_path = '/'.join(model_path.split('/')[:-1]) %}\n    \n    {# Get core folders from vars #}\n    {% set core_folders = var('core_folders') %}\n    \n    {# Initialize is_core and check each path pattern #}\n    {% set ns = namespace(is_core=false) %}\n    \n    {% for folder in core_folders %}\n        {% if folder in folder_path %}\n            {% set ns.is_core = true %}\n        {% endif %}\n    {% endfor %}\n    \n    {# Build the JSON query tag #}\n    {% set tag_dict = {\n        \"project\": project_name,\n        \"model\": model.name,\n        \"model_type\": \"core\" if ns.is_core else \"non_core\",\n        \"invocation_id\": invocation_id,\n        \"dbt_tags\": config.get('tags', [])\n    } %}\n    \n    {% set query_tag = tojson(tag_dict) %}\n    \n    {# Return the properly escaped string #}\n    {{ return(\"'\" ~ query_tag ~ \"'\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6627522, "supported_languages": null}, "macro.fsc_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.set_query_tag", "macro_sql": "{% macro set_query_tag() %}\n    {% set tag = fsc_utils.get_query_tag() %}\n    {% do run_query(\"alter session set query_tag = \" ~ tag) %}\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6631272, "supported_languages": null}, "macro.fsc_utils.dynamic_range_predicate": {"name": "dynamic_range_predicate", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dynamic_range_predicate.sql", "original_file_path": "macros/dynamic_range_predicate.sql", "unique_id": "macro.fsc_utils.dynamic_range_predicate", "macro_sql": "{% macro dynamic_range_predicate(source, predicate_column, output_alias=\"\") -%}\n    {% set supported_data_types = [\"INTEGER\",\"DATE\"] %}\n    {% set predicate_column_data_type_query %}\n        SELECT typeof({{predicate_column}}::variant)\n        FROM {{ source }}\n        WHERE {{predicate_column}} IS NOT NULL\n        LIMIT 1;\n    {% endset %}\n    {% set predicate_column_data_type_result = run_query(predicate_column_data_type_query) %}\n    {% if predicate_column_data_type_result.rows|length == 0 %}\n        {{ return('1=1') }}\n    {% endif %}\n    {% set predicate_column_data_type = predicate_column_data_type_result.columns[0].values()[0] %}\n    \n\n    {% if predicate_column_data_type not in supported_data_types %}\n        {{ exceptions.raise_compiler_error(\"Data type of \"~ predicate_column_data_type ~\" is not supported, use one of \"~ supported_data_types ~\" column instead\") }}\n    {% endif %}\n\n    {% set get_start_end_query %}\n        SELECT\n            MIN(\n                {{ predicate_column }}\n            ) AS full_range_start,\n            MAX(\n                {{ predicate_column }}\n            ) AS full_range_end\n        FROM\n            {{ source }}\n    {% endset %}\n    {% set start_end_results = run_query(get_start_end_query).columns %}\n    {% set start_preciate_value = start_end_results[0].values()[0] %}\n    {% set end_predicate_value = start_end_results[1].values()[0] %}\n\n    {% set get_limits_query %}\n        WITH block_range AS (\n            {% if predicate_column_data_type == \"INTEGER\" %}\n                SELECT \n                    SEQ4() + {{ start_preciate_value }} as predicate_value\n                FROM \n                    TABLE(GENERATOR(rowcount => {{ end_predicate_value - start_preciate_value }}+1))\n            {% else %}\n                SELECT\n                    date_day as predicate_value\n                FROM\n                    crosschain.core.dim_dates\n                WHERE\n                    date_day BETWEEN '{{ start_preciate_value }}' AND '{{ end_predicate_value }}'\n            {% endif %}\n        ),\n        partition_block_counts AS (\n            SELECT\n                b.predicate_value,\n                COUNT(r.{{ predicate_column }}) AS count_in_window\n            FROM\n                block_range b\n                LEFT OUTER JOIN {{ source }}\n                r\n                ON r.{{ predicate_column }} = b.predicate_value\n            GROUP BY\n                1\n        ),\n        range_groupings AS (\n            SELECT\n                predicate_value,\n                count_in_window,\n                conditional_change_event(\n                    count_in_window > 0\n                ) over (\n                    ORDER BY\n                        predicate_value\n                ) AS group_val\n            FROM\n                partition_block_counts\n        ),\n        contiguous_ranges AS (\n            SELECT\n                MIN(predicate_value) AS start_value,\n                MAX(predicate_value) AS end_value\n            FROM\n                range_groupings\n            WHERE\n                count_in_window > 0\n            GROUP BY\n                group_val\n        ),\n        between_stmts AS (\n            SELECT\n                CONCAT(\n                    '{{ output_alias~\".\" if output_alias else \"\" }}',\n                    '{{ predicate_column }} between \\'',\n                    start_value,\n                    '\\' and \\'',\n                    end_value,\n                    '\\''\n                ) AS b\n            FROM\n                contiguous_ranges\n        )\n        SELECT\n            CONCAT('(', LISTAGG(b, ' OR '), ')')\n        FROM\n            between_stmts \n    {% endset %}\n    \n    {% set between_stmts = run_query(get_limits_query).columns[0].values()[0] %}\n\n    {% if between_stmts != '()' %}\n        /* in case empty update array */\n        {% set predicate_override = between_stmts %}\n    {% else %}\n        {% set predicate_override = '1=1' %}\n        /* need to have something or it will error since it expects at least 1 predicate */\n    {% endif %}\n\n    {{ return(predicate_override) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6666331, "supported_languages": null}, "macro.fsc_utils.create_gha_tasks": {"name": "create_gha_tasks", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.create_gha_tasks", "macro_sql": "{% macro create_gha_tasks() %}\n    {% set query %}\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    {% set prod_db = target.database.lower().replace(\n        '_dev',\n        ''\n    ) %}\n    {% for result in results_list %}\n        {% set task_name = result [0] %}\n        {% set workflow_name = result [1] %}\n        {% set workflow_schedule = result [2] %}\n        {% set sql %}\n        EXECUTE IMMEDIATE 'CREATE OR REPLACE TASK github_actions.{{ task_name }} WAREHOUSE = DBT_CLOUD SCHEDULE = \\'USING CRON {{ workflow_schedule }} UTC\\' COMMENT = \\'Task to trigger {{ workflow_name }}.yml workflow according to {{ workflow_schedule }}\\' AS DECLARE rs resultset; output string; BEGIN rs := (SELECT github_actions.workflow_dispatches(\\'FlipsideCrypto\\', \\'{{ prod_db }}-models\\', \\'{{ workflow_name }}.yml\\', NULL):status_code::int AS status_code); SELECT LISTAGG($1, \\';\\') INTO :output FROM TABLE(result_scan(LAST_QUERY_ID())) LIMIT 1; CALL SYSTEM$SET_RETURN_VALUE(:output); END;' {% endset %}\n        {% do run_query(sql) %}\n        {% if var(\"START_GHA_TASKS\") %}\n            {% if target.database.lower() == prod_db %}\n                {% set sql %}\n                ALTER task github_actions.{{ task_name }}\n                resume;\n{% endset %}\n                {% do run_query(sql) %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6694841, "supported_languages": null}, "macro.fsc_utils.gha_tasks_view": {"name": "gha_tasks_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_tasks_view", "macro_sql": "{% macro gha_tasks_view() %}\nSELECT\n    workflow_name,\n    concat_ws(\n        '_',\n        'TRIGGER',\n        UPPER(workflow_name)\n    ) AS task_name,\n    workflow_schedule\nFROM\n    {{ source(\n        'github_actions',\n        'workflows'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.669727, "supported_languages": null}, "macro.fsc_utils.gha_task_history_view": {"name": "gha_task_history_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_history_view", "macro_sql": "{% macro gha_task_history_view() %}\n    {% set query %}\nSELECT\n    DISTINCT task_name\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    WITH task_history_data AS (\n        SELECT\n            *\n        FROM\n            ({% for result in results_list %}\n            SELECT\n                NAME AS task_name, completed_time, return_value, state, database_name, schema_name, scheduled_time, query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => '{{ result[0]}}')) {% if not loop.last %}\n                UNION ALL\n                {% endif %}\n            {% endfor %}) AS subquery\n        WHERE\n            database_name = '{{ target.database }}'\n            AND schema_name = 'GITHUB_ACTIONS')\n        SELECT\n            *\n        FROM\n            task_history_data\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6706944, "supported_languages": null}, "macro.fsc_utils.gha_task_schedule_view": {"name": "gha_task_schedule_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_schedule_view", "macro_sql": "{% macro gha_task_schedule_view() %}\n    WITH base AS (\n        SELECT\n            w.workflow_name AS workflow_name,\n            w.workflow_schedule AS workflow_schedule,\n            w.task_name AS task_name,\n            t.timestamp AS scheduled_time\n        FROM\n            {{ ref('github_actions__tasks') }} AS w\n            CROSS JOIN TABLE(\n                utils.udf_cron_to_prior_timestamps(\n                    w.workflow_name,\n                    w.workflow_schedule\n                )\n            ) AS t\n    )\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule,\n    scheduled_time\nFROM\n    base\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.670937, "supported_languages": null}, "macro.fsc_utils.gha_task_performance_view": {"name": "gha_task_performance_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_performance_view", "macro_sql": "{% macro gha_task_performance_view() %}\nSELECT\n    s.task_name,\n    s.workflow_name,\n    s.scheduled_time,\n    h.return_value\nFROM\n    {{ ref('github_actions__task_schedule') }}\n    s\n    LEFT JOIN {{ ref('github_actions__task_history') }}\n    h\n    ON s.task_name = h.task_name\n    AND TO_TIMESTAMP_NTZ(\n        s.scheduled_time\n    ) BETWEEN TO_TIMESTAMP_NTZ(DATEADD(MINUTE, -1, h.scheduled_time))\n    AND TO_TIMESTAMP_NTZ(DATEADD(MINUTE, 1, h.scheduled_time))\n    AND TRY_TO_NUMBER(\n        h.return_value\n    ) BETWEEN 200\n    AND 299\n    AND h.state = 'SUCCEEDED'\nORDER BY\n    task_name,\n    scheduled_time\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6712165, "supported_languages": null}, "macro.fsc_utils.gha_task_current_status_view": {"name": "gha_task_current_status_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_current_status_view", "macro_sql": "{% macro gha_task_current_status_view() %}\n    WITH base AS (\n        SELECT\n            task_name,\n            workflow_name,\n            scheduled_time,\n            return_value,\n            return_value IS NOT NULL AS was_successful\n        FROM\n            {{ ref('github_actions__task_performance') }}\n            qualify ROW_NUMBER() over (\n                PARTITION BY task_name\n                ORDER BY\n                    scheduled_time DESC\n            ) <= 2\n    )\nSELECT\n    task_name,\n    workflow_name,\n    MAX(scheduled_time) AS recent_scheduled_time,\n    MIN(scheduled_time) AS prior_scheduled_time,\n    SUM(IFF(return_value = 204, 1, 0)) AS successes,\n    successes > 0 AS pipeline_active\nFROM\n    base\nGROUP BY\n    task_name,\n    workflow_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6714513, "supported_languages": null}, "macro.fsc_utils.alter_gha_task": {"name": "alter_gha_task", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.alter_gha_task", "macro_sql": "{% macro alter_gha_task(\n        task_name,\n        task_action\n    ) %}\n    {% set sql %}\n    EXECUTE IMMEDIATE 'ALTER TASK IF EXISTS github_actions.{{ task_name }} {{ task_action }};' {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6718163, "supported_languages": null}, "macro.fsc_utils.create_streamline_udfs": {"name": "create_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_streamline_udfs", "macro_sql": "{% macro create_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6723502, "supported_languages": null}, "macro.fsc_utils.create_evm_streamline_udfs": {"name": "create_evm_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_evm_streamline_udfs", "macro_sql": "{% macro create_evm_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n        {{ create_udf_bulk_decode_logs() }}\n        {{ create_udf_bulk_decode_traces() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro.fsc_utils.create_udf_bulk_decode_logs", "macro.fsc_utils.create_udf_bulk_decode_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6727967, "supported_languages": null}, "macro.fsc_utils.get_ancestors": {"name": "get_ancestors", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_ancestors", "macro_sql": "{%- macro get_ancestors(node, include_depth=false, exclude_source=false) -%}\n{#\n    Return a list of ancestors for a node in a DAG.\n #}\n    {%- for dep in node.depends_on.nodes | unique | list  recursive %}\n        {% if dep.startswith(\"model.\") and \"bronze__\" not in dep %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n            {{- loop(graph.nodes[dep].depends_on.nodes) -}}\n        {% elif not exclude_source %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n        {%- endif -%}\n    {%- endfor %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.675572, "supported_languages": null}, "macro.fsc_utils.get_view_ddl": {"name": "get_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_view_ddl", "macro_sql": "{% macro get_view_ddl() %}\n{#\n    Return a dictionary of view names and their DDL statements.\n    The DDL statements are escaped to be used in a Snowflake query.\n    The dictionary is converted to JSON to be used in a dbt macro..\n #}\n    {% if execute %}\n        {% set query %}\n            SELECT\n            CONCAT_WS('.', TABLE_SCHEMA, TABLE_NAME) as VIEW_NAME,\n            VIEW_DEFINITION\n            FROM {{target.database}}.INFORMATION_SCHEMA.VIEWS\n            WHERE TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'STREAMLINE')\n            AND TABLE_SCHEMA NOT LIKE 'TEST_%'\n        {%- endset -%}\n        {%- set results = run_query(query) -%}\n        {% set ddl = {} %}\n        {% for key, value in results.rows %}\n          {%- do ddl.update({key: value|replace(\"$$\", \"\\$\\$\")}) -%}\n        {%- endfor -%}\n        {{- tojson(ddl) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6764398, "supported_languages": null}, "macro.fsc_utils.replace_database_references": {"name": "replace_database_references", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.replace_database_references", "macro_sql": "{% macro replace_database_references(references_to_replace, ddl) %}\n{#\n    Return the DDL statement for a view with the references replaced.\n    All items in references_to_replace are replaced with __NEW__,\n    while all remaining references to the database are replaced with __SOURCE__.\n\n    references_to_replace: a list of references to replace with __NEW__\n    ddl: the DDL statement to be replaced\n\n#}\n    {% set re = modules.re %}\n    {% set outer = namespace(replaced=ddl) %}\n    {% for key in references_to_replace %}\n        {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ key ~ \"\\\\b\", re.IGNORECASE) -%}\n        {%- set replacement  =  \"__NEW__\" ~ \".\" ~ key -%}\n        {% set outer.replaced = original.sub(replacement, outer.replaced) %}\n    {%- endfor -%}\n    {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ \"\\\\b\", re.IGNORECASE) -%}\n    {% set outer.replaced = original.sub(\"__SOURCE__.\", outer.replaced) %}\n    {{- outer.replaced -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6777074, "supported_languages": null}, "macro.fsc_utils.generate_view_ddl": {"name": "generate_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_view_ddl", "macro_sql": "{% macro generate_view_ddl(dag, schema) %}\n{#\n    Return a list of DDL statements for views in a DAG.\n\n    dag: a DAG of views\n    schema: schemas to create schema DDL for\n #}\n    {%- set ddl =  fromjson(fsc_utils.get_view_ddl())  -%}\n    {%- set created = {} -%}\n    {%- set final_text = [] -%}\n    {%- for view, deps in dag.items() -%}\n        {%- for d in deps -%}\n            {%- set table_name = d.split(\".\")[-1].replace(\"__\", \".\").upper() -%}\n            {%- if ddl.get(table_name) and table_name not in created -%}\n                {%- set replaced = fsc_utils.replace_database_references(ddl.keys(), ddl[table_name]) -%}\n                {%- do final_text.append(replaced) -%}\n                {%- do created.update({table_name:true}) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}\n    {%- set schema_ddl = [] -%}\n    {%- for s in schema -%}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + final_text) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_view_ddl", "macro.fsc_utils.replace_database_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6793587, "supported_languages": null}, "macro.fsc_utils.generate_dag_and_schemas": {"name": "generate_dag_and_schemas", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_dag_and_schemas", "macro_sql": "{% macro generate_dag_and_schemas(node_paths, materializations) %}\n{#\n    Return a DAG of views and a list of schemas to create.\n\n    node_paths: a list of node paths to include in the DAG\n    materializations: a list of materializations to include in the DAG\n #}\n    {%- set dag = {} -%}\n    {%- set schema = [] -%}\n    {%- for key, value in graph.nodes.items() -%}\n        {%\n        if value.refs\n        and set(value.fqn).intersection(node_paths)\n        and value.config.materialized in materializations\n        and value.config.enabled\n        and not value.sources\n        and not key.endswith(\"_create_gold\")\n        -%}\n        {%- set name = value.schema + \".\" + value.alias -%}\n        {%- set _result = fromyaml(\"[\" ~ fsc_utils.get_ancestors(value, exclude_source=true)[:-1] ~ \"]\") -%}\n            {% if _result -%}\n                {%- do _result.insert(0, key) -%}\n                {%- do dag.update({name.upper() : _result | reverse|list})  -%}\n                {% for d in _result -%}\n                    {%- if d.split(\".\")[-1].split(\"__\")[0] not in schema -%}\n                        {%- do schema.append(d.split(\".\")[-1].split(\"__\")[0]) -%}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- do dag.update({name.upper() : [key] }) -%}\n                {%- if value.schema not in schema -%}\n                    {%- do schema.append(value.schema) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {%- set final = {\"dag\": dag, \"schema\": schema} -%}\n    {{- tojson(final) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_ancestors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6819813, "supported_languages": null}, "macro.fsc_utils.generate_table_views_ddl": {"name": "generate_table_views_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_table_views_ddl", "macro_sql": "{% macro generate_table_views_ddl(tables, schema) %}\n{#\n    Return a list of DDL statements for views of tables from a list.\n\n    tables: a list of tables to create views for\n    schema: schemas to create schema DDL for\n #}\n    {%- set schema_ddl = [] -%}\n    {%- set view_ddl = [] -%}\n    {% for s in schema %}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {% for table in tables %}\n        {%- do view_ddl.append(\"CREATE OR REPLACE VIEW __NEW__.\" ~ table ~ \" copy grants AS SELECT * FROM \" ~ \"__SOURCE__.\" ~ table ~\";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + view_ddl) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.682808, "supported_languages": null}, "macro.fsc_utils.generate_datashare_ddl": {"name": "generate_datashare_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_ddl", "macro_sql": "{% macro generate_datashare_ddl() %}\n{#\n    generate DDL for datashare\n\n    Return: DDL for datashare\n #}\n    {%- set gold_views = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"view\"])) -%}\n    {%- set gold_views_ddl = fromyaml(fsc_utils.generate_view_ddl(gold_views[\"dag\"], gold_views[\"schema\"])) -%}\n    {%- set gold_tables = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"incremental\", \"table\"])) -%}\n    {%- set gold_tables_ddl = fromyaml(fsc_utils.generate_table_views_ddl(gold_tables[\"dag\"].keys(), gold_tables[\"schema\"])) -%}\n    {%- set combined_ddl = gold_views_ddl + gold_tables_ddl -%}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {{- \"BEGIN\\n\" ~ (combined_ddl | join(\"\\n\")) ~ \"\\nEND\" -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.generate_dag_and_schemas", "macro.fsc_utils.generate_view_ddl", "macro.fsc_utils.generate_table_views_ddl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6840131, "supported_languages": null}, "macro.fsc_utils.generate_datashare_udf_ddl": {"name": "generate_datashare_udf_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_udf_ddl", "macro_sql": "{% macro generate_datashare_udf_ddl() %}\n{#\n    generate UDF DDL for datashare\n\n    Return: UDF DDL for datashare\n #}\n    {%- set schema = \"UTILS\" -%}\n    {%- set udfs = fromyaml(fsc_utils.udf_configs(schema)) -%}\n    {%- set combined_ddl = [] -%}\n    {%- for udf in udfs -%}\n        {% set name_ = udf [\"name\"] %}\n        {% set signature = udf [\"signature\"] %}\n        {% set return_type = udf [\"return_type\"] %}\n        {% set sql_ = udf [\"sql\"] %}\n        {% set options = udf [\"options\"] %}\n        {% set api_integration = udf [\"api_integration\"] %}\n        {% set func_type = udf [\"func_type\"] %}\n        {% set exclude_from_datashare = udf.get(\"exclude_from_datashare\",False) %}\n        {% if not exclude_from_datashare %}\n            {%- set udf_ddl = fsc_utils.create_sql_function(\n                name_ = name_,\n                signature = signature,\n                return_type = return_type,\n                sql_ = sql_,\n                options = options,\n                api_integration = api_integration,\n                func_type = func_type\n            ).replace(\"\\\\\",\"\\\\\\\\\").replace(\"'\",\"\\\\'\") -%}\n            {%- do combined_ddl.append(udf_ddl) -%}       \n        {% endif %} \n    {% endfor %}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {%- do combined_ddl.insert(1, \"USE DATABASE __NEW__;\") -%}\n    {%- do combined_ddl.insert(2, \"CREATE SCHEMA IF NOT EXISTS \"~schema~\";\") -%}\n    {{- \"'BEGIN','\" ~ (combined_ddl | join(\"','\")) ~ \"','END'\" -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_sql_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6861973, "supported_languages": null}, "macro.fsc_utils.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6868005, "supported_languages": null}, "macro.fsc_utils.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.687218, "supported_languages": null}, "macro.fsc_utils.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.fsc_utils.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    {% if incremental_predicates[0] == \"dynamic_range_predicate\" %}\n        -- run some queries to dynamically determine the min + max of this 'date_column' in the new data\n        {% set predicate_override = fsc_utils.dynamic_range_predicate(source, incremental_predicates[1], \"DBT_INTERNAL_DEST\") %}\n    {% endif %}\n    {% set predicates = [predicate_override] if predicate_override else incremental_predicates %}\n    -- standard merge from here\n    {% set merge_sql = dbt.get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.dynamic_range_predicate", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6882598, "supported_languages": null}, "macro.fsc_utils.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.sql", "original_file_path": "macros/streamline/functions.sql", "unique_id": "macro.fsc_utils.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.688657, "supported_languages": null}, "macro.fsc_utils.test_sequence_gaps": {"name": "test_sequence_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6900437, "supported_languages": null}, "macro.fsc_utils.test_tx_block_count": {"name": "test_tx_block_count", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_tx_block_count", "macro_sql": "{% test tx_block_count(\n        model,\n        column_name\n) %}\n\nSELECT \n    {{ column_name }}, \n    COUNT(DISTINCT block_number) AS num_blocks\nFROM\n    {{ model }}\nGROUP BY {{ column_name }}\nHAVING num_blocks > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6902983, "supported_languages": null}, "macro.fsc_utils.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_full') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6906006, "supported_languages": null}, "macro.fsc_utils.recent_tx_gaps": {"name": "recent_tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.recent_tx_gaps", "macro_sql": "{% macro recent_tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_recent') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.690881, "supported_languages": null}, "macro.fsc_utils.test_recent_decoded_logs_match": {"name": "test_recent_decoded_logs_match", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_recent_decoded_logs_match", "macro_sql": "{% test recent_decoded_logs_match(\n    model\n) %}\nSELECT\n    block_number,\n    _log_id\nFROM\n    {{ model }}\n    d\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            {{ ref('silver__logs') }}\n            l\n        WHERE\n            d.block_number = l.block_number\n            AND d.tx_hash = l.tx_hash\n            AND d.event_index = l.event_index\n            AND d.contract_address = l.contract_address\n            AND d.topics [0] :: STRING = l.topics [0] :: STRING\n    ) \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6911373, "supported_languages": null}, "macro.fsc_utils.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ fsc_utils.compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6924422, "supported_languages": null}, "macro.fsc_utils.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"REST_API_ID_PROD\") if target.name == \"prod\" else var(\"REST_API_ID_DEV\") }}.execute-api.{{ var( aws_region, \"us-east-1\" ) }}.amazonaws.com/{{ target.name }}/{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6929061, "supported_languages": null}, "macro.fsc_utils.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for name,\n        data_type in params -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {% endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.693434, "supported_languages": null}, "macro.fsc_utils.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- fsc_utils.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ fsc_utils.construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.compile_signature", "macro.fsc_utils.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.6942227, "supported_languages": null}, "macro.fsc_utils.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ fsc_utils.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ fsc_utils.drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.create_sql_function", "macro.fsc_utils.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.695499, "supported_languages": null}, "macro.fsc_utils.if_data_call_function_v2": {"name": "if_data_call_function_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_function_v2", "macro_sql": "{% macro if_data_call_function_v2(\n        func,\n        target,\n        params\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" with params: \\n\" ~ params | tojson(indent=2) ~  \"\\n on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}( parse_json($${{ params | tojson }}$$) )\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.696348, "supported_languages": null}, "macro.fsc_utils.if_data_call_wait": {"name": "if_data_call_wait", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_wait", "macro_sql": "{% macro if_data_call_wait() %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% set query %}\n    SELECT\n        1\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ model.schema ~ \".\" ~ model.alias }}\n            LIMIT\n                1\n        ) {% endset %}\n        {% if execute %}\n            {% set results = run_query(\n                query\n            ) %}\n            {% if results %}\n                {{ log(\n                    \"Waiting...\",\n                    info = True\n                ) }}\n\n                {% set wait_query %}\n            SELECT\n                system$wait(\n                    {{ var(\n                        \"WAIT\",\n                        400\n                    ) }}\n                ) {% endset %}\n                {% do run_query(wait_query) %}\n            {% else %}\n            SELECT\n                NULL;\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.697361, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}    \n    {{ log(\"Creating udf udf_bulk_rest_api for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}udf_bulk_rest_api'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7004466, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_logs": {"name": "create_udf_bulk_decode_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_logs", "macro_sql": "{% macro create_udf_bulk_decode_logs() %}    \n    {{ log(\"Creating udf udf_bulk_decode_logs_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_logs_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_logs'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7026324, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_traces": {"name": "create_udf_bulk_decode_traces", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_traces", "macro_sql": "{% macro create_udf_bulk_decode_traces() %}    \n    {{ log(\"Creating udf udf_bulk_decode_traces_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_traces_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_traces'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7046425, "supported_languages": null}, "macro.fsc_utils.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7061775, "supported_languages": null}, "macro.fsc_utils.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int('hex', '200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', '0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', NULL);\n  >> NULL\n  hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == 's2c':\n    if hex[0:2].lower() != '0x':\n      hex = f'0x{hex}'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7063656, "supported_languages": null}, "macro.fsc_utils.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7065165, "supported_languages": null}, "macro.fsc_utils.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.706716, "supported_languages": null}, "macro.fsc_utils.create_udf_decimal_adjust": {"name": "create_udf_decimal_adjust", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_decimal_adjust", "macro_sql": "{% macro create_udf_decimal_adjust() %}\n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.706883, "supported_languages": null}, "macro.fsc_utils.create_udf_cron_to_prior_timestamps": {"name": "create_udf_cron_to_prior_timestamps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro_sql": "{% macro create_udf_cron_to_prior_timestamps() %}\nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7070558, "supported_languages": null}, "macro.fsc_utils.create_udf_transform_logs": {"name": "create_udf_transform_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_transform_logs", "macro_sql": "{% macro create_udf_transform_logs() %}\n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7073123, "supported_languages": null}, "macro.fsc_utils.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.707506, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7076693, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(input, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7079182, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_algorand": {"name": "create_udf_hex_to_algorand", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_algorand", "macro_sql": "{% macro create_udf_hex_to_algorand() %}\n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new('sha512_256', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode('utf-8').rstrip('=')\n\n    return algorand_address\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7080731, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_tezos": {"name": "create_udf_hex_to_tezos", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_tezos", "macro_sql": "{% macro create_udf_hex_to_tezos() %}\n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return 'Invalid length'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        'tz1': '06a19f',  # Ed25519\n        'tz2': '06a1a1',  # Secp256k1\n        'tz3': '06a1a4'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return 'Invalid prefix: Must be tz1, tz2, or tz3'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.70829, "supported_languages": null}, "macro.fsc_utils.create_udf_detect_overflowed_responses": {"name": "create_udf_detect_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro_sql": "{% macro create_udf_detect_overflowed_responses() %}\n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, 'rb') as f:\n        df = pd.read_json(f, lines=True, compression='gzip')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7084339, "supported_languages": null}, "macro.fsc_utils.create_udtf_flatten_overflowed_responses": {"name": "create_udtf_flatten_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udtf_flatten_overflowed_responses", "macro_sql": "{% macro create_udtf_flatten_overflowed_responses() %}\n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, 'rb') as f:\n            df = pd.read_json(f, lines=True, compression='gzip')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7089975, "supported_languages": null}, "macro.fsc_utils.udf_configs": {"name": "udf_configs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/configs.yaml.sql", "original_file_path": "macros/streamline/configs.yaml.sql", "unique_id": "macro.fsc_utils.udf_configs", "macro_sql": "{% macro udf_configs(schema) %}\n\n{#\n  UTILITY SCHEMA\n#}\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_udf_hex_to_int_with_encoding() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    STRICT IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ fsc_utils.create_udf_evm_text_signature() | indent(4) }}\n\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ fsc_utils.create_udf_keccak256() | indent(4) }}\n\n- name: {{ schema }}.udf_decimal_adjust\n  signature:\n    - [input, string]\n    - [adjustment, int]\n  return_type: VARCHAR\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'custom_divide'\n  sql: |\n    {{ fsc_utils.create_udf_decimal_adjust() | indent(4) }}\n\n- name: {{ schema }}.udf_cron_to_prior_timestamps\n  signature:\n    - [workflow_name, STRING]\n    - [workflow_schedule, STRING]\n  return_type: TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('croniter')\n    HANDLER = 'TimestampGenerator'\n  sql: |\n    {{ fsc_utils.create_udf_cron_to_prior_timestamps() | indent(4) }}\n\n- name: {{ schema }}.udf_transform_logs\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ fsc_utils.create_udf_transform_logs() | indent(4) }}\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ fsc_utils.create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [input, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_algorand\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_algorand'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_algorand() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_tezos\n  signature:\n    - [input, STRING]\n    - [prefix, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_tezos'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_tezos() | indent(4) }}\n\n- name: {{ schema }}.udf_detect_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n  return_type: ARRAY\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Detect overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas')\n    HANDLER = 'main'\n  sql: |\n    {{ fsc_utils.create_udf_detect_overflowed_responses() | indent(4) }}\n\n- name: {{ schema }}.udtf_flatten_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n    - [index_vals, ARRAY]\n  return_type: |\n    table(\n          index_vals ARRAY,\n          block_number NUMBER,\n          metadata OBJECT,\n          seq NUMBER,\n          key STRING,\n          path STRING,\n          index NUMBER,\n          value_ VARIANT\n        )\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Flatten rows from a JSON file with overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas', 'simplejson', 'numpy')\n    HANDLER = 'FlattenRows'\n  sql: |\n    {{ fsc_utils.create_udtf_flatten_overflowed_responses() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.python_hex_to_int", "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro.fsc_utils.sql_udf_json_rpc_call", "macro.fsc_utils.create_udf_evm_text_signature", "macro.fsc_utils.create_udf_keccak256", "macro.fsc_utils.create_udf_decimal_adjust", "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro.fsc_utils.create_udf_transform_logs", "macro.fsc_utils.create_udf_base58_to_hex", "macro.fsc_utils.create_udf_hex_to_base58", "macro.fsc_utils.create_udf_hex_to_bech32", "macro.fsc_utils.create_udf_hex_to_algorand", "macro.fsc_utils.create_udf_hex_to_tezos", "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro.fsc_utils.create_udtf_flatten_overflowed_responses"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7122009, "supported_languages": null}, "macro.fsc_utils.decode_logs_history": {"name": "decode_logs_history", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.decode_logs_history", "macro_sql": "{% macro decode_logs_history(\n        start,\n        stop\n    ) %}\n    WITH look_back AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"_max_block_by_date\") }}\n            qualify ROW_NUMBER() over (\n                ORDER BY\n                    block_number DESC\n            ) = 1\n    )\nSELECT\n    l.block_number,\n    l._log_id,\n    A.abi AS abi,\n    OBJECT_CONSTRUCT(\n        'topics',\n        l.topics,\n        'data',\n        l.data,\n        'address',\n        l.contract_address\n    ) AS DATA\nFROM\n    {{ ref(\"silver__logs\") }}\n    l\n    INNER JOIN {{ ref(\"silver__complete_event_abis\") }} A\n    ON A.parent_contract_address = l.contract_address\n    AND A.event_signature = l.topics[0]:: STRING\n    AND l.block_number BETWEEN A.start_block\n    AND A.end_block\nWHERE\n    (\n        l.block_number BETWEEN {{ start }}\n        AND {{ stop }}\n    )\n    AND l.block_number <= (\n        SELECT\n            block_number\n        FROM\n            look_back\n    )\n    AND _log_id NOT IN (\n        SELECT\n            _log_id\n        FROM\n            {{ ref(\"streamline__complete_decode_logs\") }}\n        WHERE\n            (\n                block_number BETWEEN {{ start }}\n                AND {{ stop }}\n            )\n            AND block_number <= (\n                SELECT\n                    block_number\n                FROM\n                    look_back\n            )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.713383, "supported_languages": null}, "macro.fsc_utils.block_reorg": {"name": "block_reorg", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.block_reorg", "macro_sql": "{% macro block_reorg(reorg_model_list, hours) %}\n  {% set models = reorg_model_list.split(\",\") %}\n  {% for model in models %}\n  {% set sql %}\n    DELETE FROM\n        {{ ref(model) }} t\n    WHERE\n        t._inserted_timestamp > DATEADD(\n            'hour',\n            -{{ hours }},\n            SYSDATE()\n        )\n        AND NOT EXISTS (\n            SELECT\n                1\n            FROM\n                {{ ref('silver__transactions') }}\n                s\n            WHERE s.block_number = t.block_number\n                AND s.tx_hash = t.tx_hash\n        );\n    {% endset %}\n    {% do run_query(sql) %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7140608, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_query_v2": {"name": "streamline_external_table_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_query_v2", "macro_sql": "{% macro streamline_external_table_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                    table_name => '{{ source( \"bronze_streamline\", model) }}')\n                ) A\n            )\n        SELECT\n            s.*,\n            b.file_name,\n            _inserted_timestamp\n        FROM\n            {{ source(\n                \"bronze_streamline\",\n                model\n            ) }}\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b.partition_key = s.partition_key\n        WHERE\n            b.partition_key = s.partition_key\n            AND DATA :error IS NULL\n            AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7144794, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_FR_query_v2": {"name": "streamline_external_table_FR_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_FR_query_v2", "macro_sql": "{% macro streamline_external_table_FR_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => '{{ source( \"bronze_streamline\", model) }}'\n                )\n            ) A\n    )\nSELECT\n    s.*,\n    b.file_name,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    AND DATA :error IS NULL\n    AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7148683, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7156096, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7169857, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7176301, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7186122, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7193651, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.720785, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7213802, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7220874, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.722797, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7233121, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7239952, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7247257, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7253506, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.726578, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7273521, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.728735, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7293282, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7299356, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7307975, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7324293, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7329977, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7334697, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7346172, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7369478, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7375062, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7380552, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7386448, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7393363, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7401505, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7418826, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.742452, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7429836, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7437487, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.744437, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7451415, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7454324, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7459958, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7464223, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7474723, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.749922, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7506442, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.751927, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7526312, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7539012, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7553759, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7607367, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7614899, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7623787, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7627387, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.763282, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7638803, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7649841, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7654278, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7659628, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7663643, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7665918, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7677534, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7690375, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.770137, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7724278, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.772978, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7739651, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.774358, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7747502, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7751608, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7753832, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7756143, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7763653, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7767167, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7770164, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7773135, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7777257, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7780004, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7786446, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.77928, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7795765, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7803538, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7808664, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7817643, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7827084, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7832603, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.784363, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7851315, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.785737, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.786862, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.787363, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7877383, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7887738, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7909925, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.791511, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7923803, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.793052, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7934728, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7943065, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.795696, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7961316, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7967281, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.797291, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7983198, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7987978, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7993407, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.7998478, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8006837, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.801072, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8013258, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8022697, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8033361, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8037345, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8039966, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8046596, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8050642, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8053546, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8061762, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.807331, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8083713, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8100252, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8137717, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8171732, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8179686, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.818837, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8196995, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8200347, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8203616, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.820654, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8210087, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8212821, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.821657, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.822016, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8223226, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.822618, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8231466, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.823413, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8240259, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.824348, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8245792, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.824794, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8253198, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.825614, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.826231, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8264878, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8267076, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8269222, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8271387, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8274179, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8278854, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8285017, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8288336, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8294368, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.829762, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8300796, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.830383, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8307126, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8313727, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.831621, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8320594, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8324404, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.833266, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.833683, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8340845, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8348181, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8354073, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8363118, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8366382, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.836879, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8371372, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8375137, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8377945, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8382957, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8388054, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.839217, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8394253, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8397799, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.840168, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8410223, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8414855, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8420987, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8425527, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8431938, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8437698, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.844131, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8445606, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8447752, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8449874, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8452616, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8459039, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.846196, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8464105, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8466446, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.846872, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.847274, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8475034, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8477175, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8478804, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8484702, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8487616, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8489912, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.849594, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8500273, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8503428, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.850666, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8509886, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.851292, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8519027, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.852113, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8524163, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8527367, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8534453, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8543406, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8546958, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.855242, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8558908, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8565223, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8568118, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.857606, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n        {% set update_columns = dbt_external_tables.update_external_table_columns(node) %}\n        {{ update_columns }}\n\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement", "macro.dbt_external_tables.update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8625376, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8630085, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8635695, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8639352, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.864144, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8645427, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8647523, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8651268, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8653362, "supported_languages": null}, "macro.dbt_external_tables.update_external_table_columns": {"name": "update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.update_external_table_columns", "macro_sql": "{% macro update_external_table_columns(source_node) %}\n    {{ return(adapter.dispatch('update_external_table_columns', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8657122, "supported_languages": null}, "macro.dbt_external_tables.default__update_external_table_columns": {"name": "default__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.default__update_external_table_columns", "macro_sql": "{% macro default__update_external_table_columns(source_node) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8658445, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8661883, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8663666, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8667293, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8669314, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8684964, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n    {%- set ignore_case = external.ignore_case or false  -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}', ignore_case=> {{ ignore_case }}) )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n\n{% set ddl %}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set column_alias -%}\n                    {%- if 'alias' in column and column.quote -%}\n                        {{adapter.quote(column.alias)}}\n                    {%- elif 'alias' in column -%}\n                        {{column.alias}}\n                    {%- else -%}\n                        {{column_quoted}}\n                    {%- endif -%}\n                {%- endset %}\n                {%- set col_expression -%}\n                    {%- if column.expression -%}\n                        {{column.expression}}\n                    {%- else -%}\n                        {%- if ignore_case -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'GET_IGNORE_CASE($1, ' ~ \"'\"~ column_quoted ~\"'\"~ ')' -%}\n                        {%- else -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                        {%- endif -%}\n                        (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                    {%- endif -%}\n                {%- endset %}\n                {{column_alias}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                {%- if ignore_case -%}\n                    {%- set col_id = 'GET_IGNORE_CASE($1, ' ~ \"'\"~ column[0] ~\"'\"~ ')' -%}\n                {%- else -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                {%- endif -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.aws_sns_topic -%}\n      aws_sns_topic = '{{external.aws_sns_topic}}'\n    {%- endif %}\n    {% if external.table_format | lower == \"delta\" %}\n      refresh_on_create = false\n    {% endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endset %}\n{# {{ log('ddl: ' ~ ddl, info=True) }} #}\n{{ ddl }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8749363, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8770683, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    {% set delta_format = (external.table_format | lower == \"delta\") %}\n    \n    {% set manual_refresh = not auto_refresh %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8785365, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n\n    {%- if explicit_transaction -%} begin; {%- endif %}\n\n    copy into {{source(source_node.source_name, source_node.name)}}\n    from (\n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            metadata$file_last_modified::timestamp as metadata_file_last_modified,\n            metadata$start_scan_time::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n\n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.880658, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            metadata_file_last_modified timestamp,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8814247, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8823993, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8835592, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8864942, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set schema_exists_query %}\n        select * from `{{ source_node.database }}`.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}  \n\n    {%- if not schema_exists -%}\n        {%- set ddl -%}\n            create schema if not exists {{ fqn }}\n        {%- endset -%}\n        {{ return(ddl) }}\n    {%- else -%}\n        {{ return('') }}\n    {% endif %} \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8879118, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    {%- set non_string_options = ['max_staleness'] %}\n\n    {% if options is mapping and options.get('connection_name', none) %}\n        {% set connection_name = options.pop('connection_name') %}\n    {% endif %}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        {% if connection_name %}\n            with connection `{{ connection_name }}`\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string and key not in non_string_options -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8914797, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% endif %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8930657, "supported_languages": null}, "macro.dbt_external_tables.bigquery__update_external_table_columns": {"name": "bigquery__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/update_external_table_columns.sql", "original_file_path": "macros/plugins/bigquery/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.bigquery__update_external_table_columns", "macro_sql": "{% macro bigquery__update_external_table_columns(source_node) %}\n    {%- set columns = source_node.columns -%}\n    {%- set relation = source(source_node.source_name, source_node.name) -%}\n    {%- do adapter.update_columns(relation, columns) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8935628, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8954158, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.8964505, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9003189, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.900601, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9019914, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.904096, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9045935, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9048944, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9051557, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9065166, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.906967, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9101276, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9117174, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9121914, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9130807, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.913361, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9136431, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9140775, "supported_languages": null}, "macro.dbt_external_tables.fabric__create_external_schema": {"name": "fabric__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/create_external_schema.sql", "original_file_path": "macros/plugins/fabric/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.fabric__create_external_schema", "macro_sql": "{% macro fabric__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.914561, "supported_languages": null}, "macro.dbt_external_tables.fabric__create_external_table": {"name": "fabric__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/create_external_table.sql", "original_file_path": "macros/plugins/fabric/create_external_table.sql", "unique_id": "macro.dbt_external_tables.fabric__create_external_table", "macro_sql": "{% macro fabric__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9166965, "supported_languages": null}, "macro.dbt_external_tables.fabric__get_external_build_plan": {"name": "fabric__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/get_external_build_plan.sql", "original_file_path": "macros/plugins/fabric/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.fabric__get_external_build_plan", "macro_sql": "{% macro fabric__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9179723, "supported_languages": null}, "macro.dbt_external_tables.fabric__dropif": {"name": "fabric__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/helpers/dropif.sql", "original_file_path": "macros/plugins/fabric/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.fabric__dropif", "macro_sql": "{% macro fabric__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.918535, "supported_languages": null}, "macro.livequery_base.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.livequery_base.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9197228, "supported_languages": null}, "macro.livequery_base.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.livequery_base.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9203181, "supported_languages": null}, "macro.livequery_base.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.livequery_base.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call livequery._internal.create_prod_clone(\n        'livequery',\n        'livequery_dev',\n        'livequery_dev_owner'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9206786, "supported_languages": null}, "macro.livequery_base.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.livequery_base.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% if target.database == 'LIVEQUERY' %}\n            CREATE schema IF NOT EXISTS _internal;\n    {{ sp_create_prod_clone('_internal') }};\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9211807, "supported_languages": null}, "macro.livequery_base.apply_grants_by_schema": {"name": "apply_grants_by_schema", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_base.apply_grants_by_schema", "macro_sql": "{% macro apply_grants_by_schema(schema) %}\n{#\n    Generates SQL to grant permissions to roles for a given schema.\n    This gets run automatically when a deployment is made to prod.\n\n    This can be manually run to grant permissions to a new schema:\n    `dbt run-operation apply_grants_by_schema --args '{\"schema\": \"my_schema\"}'`\n #}\n    {%- set outer = namespace(sql=\"\") -%}\n    {% for role in fromyaml(var(\"ROLES\")) %}\n            {% set sql -%}\n                {% if schema.startswith(\"_\") %}\n                    REVOKE USAGE ON SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                    REVOKE USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                {%- else -%}\n                    GRANT USAGE ON SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n\n                    GRANT SELECT ON ALL TABLES IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT SELECT ON ALL VIEWS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                {%- endif -%}\n            {%- endset -%}\n            {%- set outer.sql = outer.sql ~ sql -%}\n    {%- endfor -%}\n    {{ outer.sql }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.922988, "supported_languages": null}, "macro.livequery_base.apply_grants_to_all_schema": {"name": "apply_grants_to_all_schema", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_base.apply_grants_to_all_schema", "macro_sql": "{% macro apply_grants_to_all_schema() %}\n{#\n    Run SQL to grant permissions to roles for all schemas.\n    This is useful for when a new role is created and needs to be granted access to all schemas.\n    This is not used in the normal grant process.\n\n    `dbt run-operation apply_grants_to_all_schema`\n #}\n    {% if execute and target.name in (\"prod\", \"hosted\",) %}\n        {% set sql_get_schema %}\n            SELECT SCHEMA_NAME\n            FROM {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n            WHERE SCHEMA_NAME NOT IN ('PUBLIC', 'INFORMATION_SCHEMA')\n        {%- endset -%}\n        {%- set results = run_query(sql_get_schema) -%}\n        {% set sql_apply_grants %}\n            {%- for schema in results.columns[0].values() -%}\n                {{ apply_grants_by_schema(schema) }}\n            {%- endfor -%}\n        {%- endset -%}\n        {% do log(sql_apply_grants, true) %}\n        {% do run_query(sql_apply_grants) %}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.livequery_base.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.923926, "supported_languages": null}, "macro.livequery_base.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_base.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9244955, "supported_languages": null}, "macro.livequery_base.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_base.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9249153, "supported_languages": null}, "macro.livequery_base.get_rendered_model": {"name": "get_rendered_model", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/utils/udf_utils/render.sql", "original_file_path": "macros/utils/udf_utils/render.sql", "unique_id": "macro.livequery_base.get_rendered_model", "macro_sql": "{% macro get_rendered_model(package_name, model_name, schema, blockchain, network) %}\n    {# \n    This macro retrieves and renders a specified model from the graph.\n\n    Args:\n        package_name (str): The name of the package containing the model.\n        model_name (str): The name of the model to be rendered.\n        schema (str): The schema to be used.\n        blockchain (str): The blockchain to be used.\n        network (str): The network to be used.\n\n    Returns:\n        str: The rendered SQL of the specified model.\n    #}\n    {% if execute %}\n    {{ log(\"=== Starting get_rendered_model ===\", info=True) }}\n    {# Use a list to store the node to avoid scope issues #}\n    {%- set nodes = [] -%}\n    {{ log(\"Looking for node: \" ~ package_name ~ \".\" ~ model_name, info=True) }}\n    {%- for node in graph.nodes.values() -%}\n        {%- if node.package_name == package_name and node.name == model_name -%}\n            {{ log(\"Found target node: \" ~ node.unique_id, info=True) }}\n            {%- do nodes.append(node) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- if nodes | length == 0 -%}\n        {{ log(\"No target node found!\", info=True) }}\n        {{ return('') }}\n    {%- endif -%}\n\n    {%- set target_node = nodes[0] -%}\n    {{ log(\"Processing node: \" ~ target_node.unique_id, info=True) }}\n    {{ log(\"Dependencies:\\n\\t\\t\" ~ (target_node.depends_on.nodes | pprint).replace(\"\\n\", \"\\n\\t\\t\"), info=True) }}\n\n    {# First render all dependency CTEs #}\n    {%- set ctes = [] -%}\n    {%- for dep_id in target_node.depends_on.nodes -%}\n        {{ log(\"Processing dependency: \" ~ dep_id, info=True) }}\n        {%- set dep_node = graph.nodes[dep_id] -%}\n\n        {%- set rendered_sql = render(dep_node.raw_code) | trim -%}\n\n        {%- if rendered_sql -%}\n            {%- set cte_sql -%}\n__dbt__cte__{{ dep_node.name }} AS (\n    {{ rendered_sql }}\n)\n            {%- endset -%}\n            {%- do ctes.append(cte_sql) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {{ log(\"Number of CTEs generated: \" ~ ctes | length, info=True) }}\n\n    {# Combine CTEs with main query #}\n    {%- set final_sql -%}\nWITH {{ ctes | join(',\\n\\n') }}\n\n{{ render(target_node.raw_code) }}\n    {%- endset -%}\n\n    {{ log(\"=== End get_rendered_model ===\\n\\n\" , info=True) }}\n\n    {{ return(final_sql) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9283788, "supported_languages": null}, "macro.livequery_base.create_udf_introspect": {"name": "create_udf_introspect", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/streamline_udfs.sql", "original_file_path": "macros/livequery/streamline_udfs.sql", "unique_id": "macro.livequery_base.create_udf_introspect", "macro_sql": "{% macro create_udf_introspect(\n        drop_ = False\n    ) %}\n    {% set name_ = 'silver.udf_introspect' %}\n    {% set signature = [('json', 'variant')] %}\n    {% set return_type = 'text' %}\n    {% set sql_ = construct_api_route(\"introspect\") %}\n    {% if not drop_ %}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            api_integration = var(\"API_INTEGRATION\")\n        ) }}\n    {% else %}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.construct_api_route", "macro.livequery_base.create_sql_function", "macro.livequery_base.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9295232, "supported_languages": null}, "macro.livequery_base.sql_live_rpc_call": {"name": "sql_live_rpc_call", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/utils.sql", "original_file_path": "macros/livequery/utils.sql", "unique_id": "macro.livequery_base.sql_live_rpc_call", "macro_sql": "{% macro sql_live_rpc_call(method, params, blockchain, network) %}\n{#\n    Helper macro to call a JSON RPC method on a live node.\n\n    Parameters:\n        method (string): The JSON RPC method to call.\n        params (string): The JSON RPC parameters to pass to the method.\n        blockchain (string): The blockchain to call the method on.\n        network (string): The network to call the method on.\n    Returns:\n        string: The SQL to call the method.\n #}\n    WITH result as (\n        SELECT\n            live.udf_api(\n                '{endpoint}'\n                ,utils.udf_json_rpc_call({{ method }}, {{ params }})\n                ,concat_ws('/', 'integration', _utils.udf_provider(), {{ blockchain }}, {{ network }})\n            )::VARIANT:data AS data\n    )\n    SELECT\n        COALESCE(data:result, {'error':data:error})\n    FROM result\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9300022, "supported_languages": null}, "macro.livequery_base.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9315016, "supported_languages": null}, "macro.livequery_base.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9317498, "supported_languages": null}, "macro.livequery_base.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for p in params -%}\n        {%- set name = p.0 -%}\n        {%- set data_type = p.1 -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {%- endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9324024, "supported_languages": null}, "macro.livequery_base.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- livequery_base.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.compile_signature", "macro.livequery_base.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9333282, "supported_languages": null}, "macro.livequery_base.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] if config [\"return_type\"] is string else config [\"return_type\"][0] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ livequery_base.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.create_sql_function", "macro.livequery_base.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9347477, "supported_languages": null}, "macro.livequery_base.crud_udfs": {"name": "crud_udfs", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.crud_udfs", "macro_sql": "{% macro crud_udfs(config_func, schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema\n\n    config_func: function that returns a list of udf configs\n    drop_: whether to drop or create the udfs\n #}\n    {% set udfs = fromyaml(config_func())%}\n    {%- for udf in udfs -%}\n        {% if udf[\"name\"].split(\".\") | first == schema %}\n            CREATE SCHEMA IF NOT EXISTS {{ schema }};\n            {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9354055, "supported_languages": null}, "macro.livequery_base.crud_udfs_by_chain": {"name": "crud_udfs_by_chain", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.crud_udfs_by_chain", "macro_sql": "{% macro crud_udfs_by_chain(config_func, blockchain, network, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    blockchain: blockchain name\n    network: network name\n    drop_: whether to drop or create the udfs\n #}\n  {% set schema = blockchain if not network else blockchain ~ \"_\" ~ network %}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%-  set configs = fromyaml(config_func(blockchain, network)) if network else fromyaml(config_func(schema, blockchain)) -%}\n    {%- for udf in configs -%}\n        {{- livequery_base.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9361992, "supported_languages": null}, "macro.livequery_base.ephemeral_deploy_core": {"name": "ephemeral_deploy_core", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.ephemeral_deploy_core", "macro_sql": "{% macro ephemeral_deploy_core(config) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {{- crud_udfs(config, this.schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(this.schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.crud_udfs", "macro.dbt.run_query", "macro.livequery_base.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9373581, "supported_languages": null}, "macro.livequery_base.ephemeral_deploy": {"name": "ephemeral_deploy", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.ephemeral_deploy", "macro_sql": "{% macro ephemeral_deploy(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set blockchain = this.schema -%}\n    {%- set network = this.identifier -%}\n    {% set schema = blockchain ~ \"_\" ~ network %}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- livequery_base.crud_udfs_by_chain(config, blockchain, network, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ livequery_base.apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_base.crud_udfs_by_chain", "macro.dbt.run_query", "macro.livequery_base.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.938832, "supported_languages": null}, "macro.livequery_base.base_test_udf": {"name": "base_test_udf", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tests/udfs.sql", "original_file_path": "macros/tests/udfs.sql", "unique_id": "macro.livequery_base.base_test_udf", "macro_sql": "{% macro base_test_udf(model, udf, args, assertions) %}\n{#\n  Generates a test for a UDF.\n #}\n{% if execute %}\n    {%- set context -%}\n      SET LIVEQUERY_CONTEXT = '{\"userId\":\"{{ var(\"STUDIO_TEST_USER_ID\") }}\"}';\n    {%- endset -%}\n  {%- do run_query(context) -%}\n{%- endif -%}\n{%- set call -%}\n{{ target.database }}.{{ udf }}({{ args }})\n{%- endset -%}\n,\ntest AS\n(\n    SELECT\n        '{{ udf }}' AS test_name\n        ,[{{ args }}] as parameters\n        ,{{ call }} AS result\n)\n  {% for assertion in assertions %}\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $${{ assertion }}$$ AS assertion,\n    $${{ context ~ \"\\n\" }}SELECT {{ call ~ \"\\n\" }};$$ AS sql\n    FROM test\n    WHERE NOT {{ assertion }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif -%}\n  {%- endfor -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.94016, "supported_languages": null}, "macro.livequery_base.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.livequery_base.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value('BLOCKCHAIN_NAME','LIVEQUERY') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9404292, "supported_languages": null}, "macro.livequery_base.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.livequery_base.create_tag_if_missing", "macro.livequery_base.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9459906, "supported_languages": null}, "macro.livequery_base.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.946799, "supported_languages": null}, "macro.livequery_base.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9483666, "supported_languages": null}, "macro.livequery_base.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9499366, "supported_languages": null}, "macro.livequery_base.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9505448, "supported_languages": null}, "macro.livequery_base.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9511662, "supported_languages": null}, "macro.livequery_base.config_core_live": {"name": "config_core_live", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/live.yaml.sql", "original_file_path": "macros/core/live.yaml.sql", "unique_id": "macro.livequery_base.config_core_live", "macro_sql": "{% macro config_core_live(schema=\"live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          NULL,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          NULL,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n\n- name: {{ schema }}.udf_rpc\n  signature:\n    - [blockchain, STRING]\n    - [network, STRING]\n    - [method, STRING]\n    - [parameters, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n    COMMENT = $$Executes an JSON RPC call on a blockchain.$$\n  sql: |\n    {{ sql_live_rpc_call(\"method\", \"parameters\", \"blockchain\", \"network\") | indent(4) -}}\n\n- name: {{ schema }}.udf_allow_list\n  signature: []\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns a list of allowed domains.$$\n  sql: allowed\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.sql_live_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9522867, "supported_languages": null}, "macro.livequery_base.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.sql", "original_file_path": "macros/core/functions.sql", "unique_id": "macro.livequery_base.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9526978, "supported_languages": null}, "macro.livequery_base.config_core__utils": {"name": "config_core__utils", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/_utils.yaml.sql", "original_file_path": "macros/core/_utils.yaml.sql", "unique_id": "macro.livequery_base.config_core__utils", "macro_sql": "{% macro config_core__utils(schema=\"_utils\") %}\n\n- name: {{ schema }}.udf_introspect\n  signature:\n    - [echo, STRING]\n  func_type: SECURE EXTERNAL\n  return_type: TEXT\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  sql: introspect\n\n- name: {{ schema }}.udf_user_tier\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n- name: {{ schema }}.udf_provider\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n- name: {{ schema }}.udf_whoami\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [user_id, STRING]\n    - [key, STRING]\n  return_type: OBJECT\n  func_type: SECURE EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: secret/register\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9533877, "supported_languages": null}, "macro.livequery_base.config_core_utils": {"name": "config_core_utils", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/utils.yaml.sql", "original_file_path": "macros/core/utils.yaml.sql", "unique_id": "macro.livequery_base.config_core_utils", "macro_sql": "{% macro config_core_utils(schema=\"utils\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_udf_hex_to_int_with_encoding() | indent(4) }}\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ create_udf_evm_text_signature() | indent(4) }}\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ create_udf_keccak256() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n- name: {{ schema }}.udf_int_to_hex\n  signature:\n    - [int, INTEGER]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_object_to_url_query_string\n  signature:\n    - [object, OBJECT]\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: SELECT utils.udf_urlencode(object, FALSE)\n\n- name: {{ schema }}.udf_evm_transform_log\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ python_udf_evm_transform_log() | indent(4) }}\n\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, ARRAY]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, OBJECT]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [hex, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_int_to_binary\n  signature:\n    - [num, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'int_to_binary'\n  sql: |\n    {{ create_udf_int_to_binary() | indent(4) }}\n\n- name: {{ schema }}.udf_binary_to_int\n  signature:\n    - [binary, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'binary_to_int'\n  sql: |\n    {{ create_udf_binary_to_int() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.python_hex_to_int", "macro.livequery_base.python_udf_hex_to_int_with_encoding", "macro.livequery_base.create_udf_evm_text_signature", "macro.livequery_base.create_udf_keccak256", "macro.livequery_base.sql_udf_json_rpc_call", "macro.livequery_base.python_object_to_url_query_string", "macro.livequery_base.python_udf_evm_transform_log", "macro.livequery_base.create_udf_base58_to_hex", "macro.livequery_base.create_udf_hex_to_base58", "macro.livequery_base.create_udf_hex_to_bech32", "macro.livequery_base.create_udf_int_to_binary", "macro.livequery_base.create_udf_binary_to_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9567106, "supported_languages": null}, "macro.livequery_base.config_core_secrets": {"name": "config_core_secrets", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/secrets.yaml.sql", "original_file_path": "macros/core/secrets.yaml.sql", "unique_id": "macro.livequery_base.config_core_secrets", "macro_sql": "{% macro config_core_secrets(schema=\"secrets\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Registers a secret with the given request ID and key. $$\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_get_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns the secret value for the given secret name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME)\n        ):data::OBJECT\n\n- name: {{ schema }}.udf_get_secrets\n  signature: []\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns all secrets for the current user. $$\n  sql: |\n    SELECT\n      {{ schema }}.udf_get_secret('')\n\n- name: {{ schema }}.udf_create_secret\n  signature:\n    - [name, STRING]\n    - [secret, OBJECT]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Creates a new secret with the given name and value. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        SECRET\n        ):status_code::INTEGER\n\n- name: {{ schema }}.udf_delete_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Deletes the secret with the given name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        'DELETE',\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        {},\n        {},\n        ''\n        ):status_code::INTEGER\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9576468, "supported_languages": null}, "macro.livequery_base.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9585078, "supported_languages": null}, "macro.livequery_base.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9587042, "supported_languages": null}, "macro.livequery_base.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9588373, "supported_languages": null}, "macro.livequery_base.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9590347, "supported_languages": null}, "macro.livequery_base.python_object_to_url_query_string": {"name": "python_object_to_url_query_string", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_object_to_url_query_string", "macro_sql": "{% macro python_object_to_url_query_string() %}\nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    {# return type(query) #}\n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.959192, "supported_languages": null}, "macro.livequery_base.python_udf_evm_transform_log": {"name": "python_udf_evm_transform_log", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_udf_evm_transform_log", "macro_sql": "{% macro python_udf_evm_transform_log(schema) %}\nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9593797, "supported_languages": null}, "macro.livequery_base.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9595702, "supported_languages": null}, "macro.livequery_base.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9597347, "supported_languages": null}, "macro.livequery_base.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9599931, "supported_languages": null}, "macro.livequery_base.create_udf_int_to_binary": {"name": "create_udf_int_to_binary", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_int_to_binary", "macro_sql": "{% macro create_udf_int_to_binary() %}\n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9601648, "supported_languages": null}, "macro.livequery_base.create_udf_binary_to_int": {"name": "create_udf_binary_to_int", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_binary_to_int", "macro_sql": "{% macro create_udf_binary_to_int() %}\n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9604445, "supported_languages": null}, "macro.livequery_base.config_core__live": {"name": "config_core__live", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/_live.yaml.sql", "original_file_path": "macros/core/_live.yaml.sql", "unique_id": "macro.livequery_base.config_core__live", "macro_sql": "{% macro config_core__live(schema=\"_live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n  sql: udf_api\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9608276, "supported_languages": null}, "macro.livequery_base.test_test_udf": {"name": "test_test_udf", "resource_type": "macro", "package_name": "livequery_base", "path": "tests/generic/test_udf.sql", "original_file_path": "tests/generic/test_udf.sql", "unique_id": "macro.livequery_base.test_test_udf", "macro_sql": "{% test test_udf(model, column_name, args, assertions) %}\n    {#\n        This is a generic test for UDFs.\n        The udfs are deployed using ephemeral models, as of dbt-core > 1.8\n        we need to use `this.identifier` to extract the schema from for base_test_udf().\n     #}\n    \n    {% set schema = none %}\n    \n    {% if execute %}\n        {# Extract schema based on standard pattern `test__<schema_name>_<test_name> #}\n        {% set test_identifier = this.identifier %}\n        \n        {% if test_identifier.startswith('test_') %}\n            {% set test_identifier = test_identifier[5:] %}\n        {% endif %}\n        \n        {# Handle schemas with underscore prefix #}\n        {% if test_identifier.startswith('_') %}\n            {# For identifiers like _utils_<test_name> #}\n            {% set parts = test_identifier.split('_') %}\n            {% if parts | length > 2 %}\n                {% set schema = '_' ~ parts[1] %}\n            {% else %}\n                {% set schema = parts[0] %}\n            {% endif %}\n        {% else %}\n            {# For identifiers without underscore prefix #}\n            {% set parts = test_identifier.split('_') %}\n            {% if parts | length > 0 %}\n                {% set schema = parts[0] %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    \n    {% set udf = schema ~ \".\" ~ column_name %}\n\n    {{ base_test_udf(model, udf, args, assertions) }}\n{% endtest %}", "depends_on": {"macros": ["macro.livequery_base.base_test_udf"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9631462, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag(extra = {}) -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')(extra=extra)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9641697, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag(extra = {}) -%}\n    {# Get session level query tag #}\n    {% set original_query_tag = get_current_query_tag() %}\n    {% set original_query_tag_parsed = {} %}\n\n    {% if original_query_tag %}\n        {% if fromjson(original_query_tag) is mapping %}\n            {% set original_query_tag_parsed = fromjson(original_query_tag) %}\n        {% endif %}\n    {% endif %}\n\n    {# The env_vars_to_query_tag_list should contain an environment variables list to construct query tag dict #}\n    {% set env_var_query_tags = {} %}\n    {% if var('env_vars_to_query_tag_list', '') %} {# Get a list of env vars from env_vars_to_query_tag_list variable to add additional query tags #}\n        {% for k in var('env_vars_to_query_tag_list') %}\n            {% set v = env_var(k, '') %}\n            {% do env_var_query_tags.update({k.lower(): v}) if v %}\n        {% endfor %}\n    {% endif %}\n\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n    {% do query_tag.update(original_query_tag_parsed) %}\n    {% do query_tag.update(env_var_query_tags) %}\n    {% do query_tag.update(extra) %}\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9669547, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9672527, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9678247, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node, extra = {}) %}\n    {%- set comment_dict = extra -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id,\n        run_started_at=run_started_at.astimezone(modules.pytz.utc).isoformat(),\n        full_refresh=flags.FULL_REFRESH,\n        which=flags.WHICH,\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if dbt_version >= '1.5.0' -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.raw_code is not none and local_md5 -%}\n            {%- do comment_dict.update({\n                \"raw_code_hash\": local_md5(node.raw_code)\n            }) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n        ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747400124.9723291, "supported_languages": null}}, "docs": {"doc.ton_models.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "ton_models", "path": "descriptions/__overview__.md", "original_file_path": "models/descriptions/__overview__.md", "unique_id": "doc.ton_models.__overview__", "block_contents": "# Welcome to the Flipside Crypto TON Models Documentation\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the TON blockchain tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/) For more information on how these models are built, please see [the github repository.](https://github.com/flipsideCrypto/ton-models/)\n\n## **How do I use these docs?**\nThe easiest way to navigate this documentation is to use the Quick Links below. These links will take you to the documentation for each table, which contains a description, a list of the columns, and other helpful information.\n\nIf you are experienced with dbt docs, feel free to use the sidebar to navigate the documentation, as well as explore the relationships between tables and the logic building them.\n\nThere is more information on how to use dbt docs in the last section of this document.\n\n## **Quick Links to Table Documentation**\n\n**Click on the links below to jump to the documentation for each schema.**\n\n### Core Fact Tables (`ton`.`CORE`.`<table_name>`)\n- [dim_labels](#!/model/model.ton_models.core__dim_labels)\n- [fact_account_states](#!/model/model.ton_models.core__fact_account_states)\n- [fact_balances](#!/model/model.ton_models.core__fact_balances)\n- [fact_blocks](#!/model/model.ton_models.core__fact_blocks)\n- [fact_jetton_events](#!/model/model.ton_models.core__fact_jetton_events)\n- [fact_jetton_metadata](#!/model/model.ton_models.core__fact_jetton_metadata)\n- [fact_messages](#!/model/model.ton_models.core__fact_messages)\n- [fact_transactions](#!/model/model.ton_models.core__fact_transactions)\n\n### DeFi Tables (`ton`.`DEFI`.`<table_name>`)\n- [fact_dex_pools](#!/model/model.ton_models.defi__fact_dex_pools)\n- [fact_dex_trades](#!/model/model.ton_models.defi__fact_dex_trades)\n\n### NFT Tables (`ton`.`NFT`.`<table_name>`)\n- [fact_nft_events](#!/model/model.ton_models.nft__fact_nft_events)\n- [fact_nft_items](#!/model/model.ton_models.nft__fact_nft_items)\n- [fact_nft_metadata](#!/model/model.ton_models.nft__fact_nft_metadata)\n- [fact_nft_sales](#!/model/model.ton_models.nft__fact_nft_sales)\n- [fact_nft_transfers](#!/model/model.ton_models.nft__fact_nft_transfers)\n\n\nThe TON models are built using three layers of SQL models: **bronze, silver, and gold (or core/defi/nft).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core/defi/nft): Final views and tables that are available publicly\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. These views are built to make it easier to query the data.\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Studio](https://flipsidecrypto.xyz/studio/)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/ton-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.livequery_base.__livequery_models__": {"name": "__livequery_models__", "resource_type": "doc", "package_name": "livequery_base", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "unique_id": "doc.livequery_base.__livequery_models__", "block_contents": "# Welcome to the Flipside Crypto LiveQuery Models Documentation!\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the LiveQuery functions available via [Flipside Crypto](https://flipsidecrypto.xyz/). For more information on how these functions are built, please see [the github repository.](https://github.com/FlipsideCrypto/livequery-models)\n\n### **Overview of Available Functions**\n\n#### **UTILS Functions**\n\n- `livequery.utils.hex_to_int`: Use this UDF to transform any hex string to integer\n    ```\n    ex: Curve Swaps\n\n    SELECT\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        livequery.utils.hex_to_int(segmented_data [1] :: STRING) :: INTEGER AS tokens_sold\n    FROM\n        optimism.core.fact_event_logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0x8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd97140',\n            '0xd013ca23e77a65003c2c659c5442c00c805371b7fc1ebd4c206c41d1536bd90b'\n        )\n    ```\n- `livequery.utils.hex_encode_function` (coming soon)(Function VARCHAR): Use this UDF to hex encode any string\n    ```\n    ex: Decimals Function Signature\n\n    SELECT\n        `decimals` AS function_name,\n        livequery.utils.hex_encode_function(`decimals()`) :: STRING AS text_sig,\n        LEFT(text_sig,10) AS function_sig,\n        '0x313ce567' AS expected_sig\n    ```\n- `livequery.utils.evm_decode_logs` (coming soon)\n- `livequery.utils.udf_register_secret`\n\n#### **LIVE Functions & Examples**\n\n- `livequery.live.udf_api`(Method STRING, URL STRING, Headers OBJECT, Data OBJECT): Use this UDF to make a GET or POST request on any API\n    ```\n    ex: Defillama GET request -> working with the output (JSON flatten)\n\n    WITH chain_base AS (\n        SELECT\n            livequery.live.udf_api(\n                'GET','https://api.llama.fi/chains',{},{}\n            ) AS read\n    )\n\n    SELECT\n        VALUE:chainId::STRING AS chain_id,\n        VALUE:name::STRING AS chain,\n        VALUE:tokenSymbol::STRING AS token_symbol\n    FROM chain_base,\n        LATERAL FLATTEN (input=> read:data)\n\n    ex: Solana Token Metadata\n\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            'https://public-api.solscan.io/token/meta?tokenAddress=SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR',\n            { },\n            { }\n        );\n\n    ex: Running with multiple token addresses at the same time\n\n    WITH solana_addresses AS (\n        SELECT\n            'SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR' AS address\n        UNION\n        SELECT\n            '4KbzSz2VF1LCvEaw8viq1335VgWzNjMd8rwQMsCkKHip'\n    )\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            concat(\n                'https://public-api.solscan.io/token/meta?tokenAddress=',\n                address\n            ),\n            { },\n            { }\n        )\n    FROM\n        solana_addresses;\n\n    ex: Hit Quicknode (see instructions below for how to register an API Key with Flipside securely)\n\n    SELECT\n        livequery.live.udf_api(\n            'POST',\n            concat(\n                'http://sample-endpoint-name.network.quiknode.pro/',\n                '{my_key}'\n            ),\n            {},\n            { 'method' :'eth_blockNumber',\n              'params' :[],\n                'id' :1,\n                'jsonrpc' :'2.0' },\n            'quicknode'\n        );\n    ```\n\n##### **Registering and Using LiveQuery Credentials to Query Quicknode**\nWith LiveQuery you can safely store encrypted credentials, such as an API key, with Flipside, and query blockchain nodes directly via our SQL interface. Here\u2019s how:\n1. Sign up for a free [Quicknode API Account](https://www.quicknode.com/core-api)\n2. Navigate to ***Endpoints*** on the left hand side then click the ***Get Started*** tab and ***Copy*** the HTTP Provider Endpoint. Do not adjust the Setup or Security parameters.\n3. Visit [Ephit](https://science.flipsidecrypto.xyz/ephit) to obtain an Ephemeral query that will securely link your API Endpoint to Flipside's backend. This will allow you to refer to the URL securely in our application without referencing it or exposing keys directly.\n4. Fill out the form and click ***Submit this Credential***\n5. Paste the provided query into [Flipside](https://flipside.new) and query your node directly in the app with your submitted Credential (`{my_key}`).\n\n##### **API Endpoints available for use with LiveQuery:**\nPlease visit the Flipside discord or open a ticket for questions, concerns or more information.\n\n- Snapshot: [https://hub.snapshot.org/graphql](https://docs.snapshot.org/graphql-api)\n- Defillama: [https://api.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://yields.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://stablecoins.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://bridges.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://coins.llama.fi/](https://defillama.com/docs/api)\n- zkSync: [https://api.zksync.io/api/v0.2/](https://docs.zksync.io/apiv02-docs/)\n- DeepNFT Value: [https://api.deepnftvalue.com/v1](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api)\n- Zapper: [https://api.zapper.fi/v2/](https://api.zapper.fi/api/static/index.html#/Apps/AppsController_getApps)\n- Helius: [https://api.helius.xyz](https://docs.helius.xyz/introduction/why-helius)\n- Stargaze Name Service: [https://rest.stargaze-apis.com](https://github.com/public-awesome/names/blob/main/API.md)\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/external-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.ton_models.silver__messages": [{"database": "TON", "schema": "silver", "name": "silver__messages", "resource_type": "model", "package_name": "ton_models", "path": "silver/core/silver__messages.sql", "original_file_path": "models/silver/core/silver__messages.sql", "unique_id": "model.ton_models.silver__messages", "fqn": ["ton_models", "silver", "core", "silver__messages"], "alias": "messages", "checksum": {"name": "sha256", "checksum": "c143f0eb8c0a5b9ec4363c497c26fed10fc7537bebcdaec9eb10db7195ce4f8a"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "microbatch", "batch_size": "day", "lookback": 1, "begin": "2024-01-01", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"]}, "tags": ["scheduled_core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "incremental_strategy": "microbatch", "event_time": "block_date", "begin": "2024-01-01", "batch_size": "day", "cluster_by": ["block_date::DATE", "modified_timestamp::DATE"], "tags": ["scheduled_core"], "enabled": false}, "created_at": 1747400126.0866468, "relation_name": "TON.silver.messages", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'microbatch',\n    event_time = 'block_date',\n    begin = '2024-01-01',\n    batch_size = 'day',\n    cluster_by = ['block_date::DATE','modified_timestamp::DATE'],\n    tags = ['scheduled_core'],\n    enabled = false\n) }}\n\nWITH pre_final AS (\n\n    SELECT\n        block_date,\n        msg_hash,\n        ihr_disabled,\n        tx_now,\n        opcode,\n        created_lt,\n        tx_hash,\n        bounce,\n        bounced,\n        COMMENT,\n        init_state_hash,\n        import_fee,\n        _VALUE,\n        fwd_fee,\n        tx_lt,\n        ihr_fee,\n        source,\n        trace_id,\n        direction,\n        body_hash,\n        created_at,\n        destination,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__messages') }}\n        {# qualify ROW_NUMBER() over (\n        PARTITION BY tx_hash,\n        msg_hash\n    ORDER BY\n        _inserted_timestamp DESC\n) = 1 #}\n)\nSELECT\n    block_date,\n    msg_hash,\n    ihr_disabled,\n    tx_now,\n    opcode,\n    created_lt,\n    tx_hash,\n    bounce,\n    bounced,\n    COMMENT,\n    init_state_hash,\n    import_fee,\n    _VALUE,\n    fwd_fee,\n    tx_lt,\n    ihr_fee,\n    source,\n    trace_id,\n    direction,\n    body_hash,\n    created_at,\n    destination,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_hash','msg_hash']\n    ) }} AS messages_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    pre_final", "language": "sql", "refs": [{"name": "bronze__messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze__messages": [{"database": "TON", "schema": "bronze", "name": "bronze__messages", "resource_type": "model", "package_name": "ton_models", "path": "bronze/core/bronze__messages.sql", "original_file_path": "models/bronze/core/bronze__messages.sql", "unique_id": "model.ton_models.bronze__messages", "fqn": ["ton_models", "bronze", "core", "bronze__messages"], "alias": "messages", "checksum": {"name": "sha256", "checksum": "7bccc2e73f79babfc9153c71f35f6576bc97b296ade47231651eea21a736afd7"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": "block_date", "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ton_models://models/bronze/core/bronze_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "event_time": "block_date", "materialized": "view", "enabled": false}, "created_at": 1747400127.8927689, "relation_name": "TON.bronze.messages", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'messages_tdl',\n    partition_function = \"TO_DATE(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '=', 2), 'YYYYMMDD')\",\n    partition_name = \"block_date\",\n    other_cols = \"MSG_HASH,IHR_DISABLED,TX_NOW,OPCODE,CREATED_LT,TX_HASH,BOUNCE,BOUNCED,COMMENT,INIT_STATE_HASH,IMPORT_FEE,_VALUE,FWD_FEE,TX_LT,IHR_FEE,SOURCE,TRACE_ID,DIRECTION,BODY_HASH,CREATED_AT,DESTINATION\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "messages_tdl"], ["bronze_streamline", "messages_tdl"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze_streamline__shards_FR": [{"database": "TON", "schema": "bronze_streamline", "name": "bronze_streamline__shards_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/streamline/bronze_streamline__shards_FR.sql", "original_file_path": "models/bronze/streamline/bronze_streamline__shards_FR.sql", "unique_id": "model.ton_models.bronze_streamline__shards_FR", "fqn": ["ton_models", "bronze", "streamline", "bronze_streamline__shards_FR"], "alias": "shards_FR", "checksum": {"name": "sha256", "checksum": "6ddae51879b804970a4463b7352975f78cfaa9929f01834398e69c00644e3a70"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "enabled": false}, "created_at": 1747400126.3490868, "relation_name": "TON.bronze_streamline.shards_FR", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'shards',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\",\n    partition_name = \"partition_key\",\n    other_cols = \"value:SEQUENCE_NUMBER::BIGINT as SEQUENCE_NUMBER\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "shards"], ["bronze_streamline", "shards"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze_streamline__shards": [{"database": "TON", "schema": "bronze_streamline", "name": "bronze_streamline__shards", "resource_type": "model", "package_name": "ton_models", "path": "bronze/streamline/bronze_streamline__shards.sql", "original_file_path": "models/bronze/streamline/bronze_streamline__shards.sql", "unique_id": "model.ton_models.bronze_streamline__shards", "fqn": ["ton_models", "bronze", "streamline", "bronze_streamline__shards"], "alias": "shards", "checksum": {"name": "sha256", "checksum": "6517aa2784a249cab81780441a19d17fa79a1f2c7a5892ff183baf2ff3ccd615"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "enabled": false}, "created_at": 1747400126.3539922, "relation_name": "TON.bronze_streamline.shards", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_query_v2(\n    model = 'shards',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\",\n    partition_name = \"partition_key\",\n    other_cols = \"value:SEQUENCE_NUMBER::BIGINT as SEQUENCE_NUMBER\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "shards"], ["bronze_streamline", "shards"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze_streamline__blocks_FR": [{"database": "TON", "schema": "bronze_streamline", "name": "bronze_streamline__blocks_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/streamline/bronze_streamline__blocks_FR.sql", "original_file_path": "models/bronze/streamline/bronze_streamline__blocks_FR.sql", "unique_id": "model.ton_models.bronze_streamline__blocks_FR", "fqn": ["ton_models", "bronze", "streamline", "bronze_streamline__blocks_FR"], "alias": "blocks_FR", "checksum": {"name": "sha256", "checksum": "3db62a41427ceeb931851464be196d30b58336277b44bec07cda3100f18ffcea"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "enabled": false}, "created_at": 1747400126.36222, "relation_name": "TON.bronze_streamline.blocks_FR", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'blocks',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\",\n    partition_name = \"partition_key\",\n    other_cols = \"value:SEQUENCE_NUMBER::BIGINT as SEQUENCE_NUMBER, value:SHARD::STRING as SHARD, value:WORKCHAIN::INT as WORKCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "blocks"], ["bronze_streamline", "blocks"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze_streamline__blocks": [{"database": "TON", "schema": "bronze_streamline", "name": "bronze_streamline__blocks", "resource_type": "model", "package_name": "ton_models", "path": "bronze/streamline/bronze_streamline__blocks.sql", "original_file_path": "models/bronze/streamline/bronze_streamline__blocks.sql", "unique_id": "model.ton_models.bronze_streamline__blocks", "fqn": ["ton_models", "bronze", "streamline", "bronze_streamline__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "6d05c9e6977d31ec8b5b0376a9bbeb76db29980c13a8184e8bb4d85210bdcdb0"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "enabled": false}, "created_at": 1747400126.3671072, "relation_name": "TON.bronze_streamline.blocks", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_query_v2(\n    model = 'blocks',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\",\n    partition_name = \"partition_key\",\n    other_cols = \"value:SEQUENCE_NUMBER::BIGINT as SEQUENCE_NUMBER, value:SHARD::STRING as SHARD, value:WORKCHAIN::INT as WORKCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "blocks"], ["bronze_streamline", "blocks"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze_streamline__transactions": [{"database": "TON", "schema": "bronze_streamline", "name": "bronze_streamline__transactions", "resource_type": "model", "package_name": "ton_models", "path": "bronze/streamline/bronze_streamline__transactions.sql", "original_file_path": "models/bronze/streamline/bronze_streamline__transactions.sql", "unique_id": "model.ton_models.bronze_streamline__transactions", "fqn": ["ton_models", "bronze", "streamline", "bronze_streamline__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "941073ec17d6f700ec690ead63fd1c76de0f4518d5d64b494d4b6733632856b2"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "enabled": false}, "created_at": 1747400126.3718674, "relation_name": "TON.bronze_streamline.transactions", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_query_v2(\n    model = 'transactions',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\",\n    partition_name = \"partition_key\",\n    other_cols = \"value:SEQUENCE_NUMBER::BIGINT as SEQUENCE_NUMBER, value:SHARD::STRING as SHARD, value:WORKCHAIN::INT as WORKCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "transactions"], ["bronze_streamline", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.bronze_streamline__transactions_FR": [{"database": "TON", "schema": "bronze_streamline", "name": "bronze_streamline__transactions_FR", "resource_type": "model", "package_name": "ton_models", "path": "bronze/streamline/bronze_streamline__transactions_FR.sql", "original_file_path": "models/bronze/streamline/bronze_streamline__transactions_FR.sql", "unique_id": "model.ton_models.bronze_streamline__transactions_FR", "fqn": ["ton_models", "bronze", "streamline", "bronze_streamline__transactions_FR"], "alias": "transactions_FR", "checksum": {"name": "sha256", "checksum": "aaa7bfeaea33bf1bf6d341f005381fc0b146af9fa843a8efb8c87c9eaeb708e4"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "enabled": false}, "created_at": 1747400126.376741, "relation_name": "TON.bronze_streamline.transactions_FR", "raw_code": "{{ config (\n    materialized = 'view',\n    enabled = false\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = 'transactions',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\",\n    partition_name = \"partition_key\",\n    other_cols = \"value:SEQUENCE_NUMBER::BIGINT as SEQUENCE_NUMBER, value:SHARD::STRING as SHARD, value:WORKCHAIN::INT as WORKCHAIN\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "transactions"], ["bronze_streamline", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.ton_models.streamline_external_table_FR_query_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__chainhead": [{"database": "TON", "schema": "streamline", "name": "streamline__chainhead", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/streamline__chainhead.sql", "original_file_path": "models/streamline/core/streamline__chainhead.sql", "unique_id": "model.ton_models.streamline__chainhead", "fqn": ["ton_models", "streamline", "core", "streamline__chainhead"], "alias": "chainhead", "checksum": {"name": "sha256", "checksum": "7985060c45d46dc16a9b23645aca481ea0ca13a58315ce2f8161708c27f2abe3"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_view"], "enabled": false}, "created_at": 1747400126.3862762, "relation_name": "TON.streamline.chainhead", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view'],\n    enabled = false\n) }}\n\nSELECT\n    {{ target.database }}.live.udf_api(\n        'GET',\n        '{Service}/{Authentication}/getMasterchainInfo',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json',\n            'fsc-quantum-state',\n            'livequery'\n        ),\n        OBJECT_CONSTRUCT(),\n        'Vault/prod/ton/quicknode/mainnet'\n    ) :data: \"result\" :\"last\" :\"seqno\" AS sequence_number", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__sequences": [{"database": "TON", "schema": "streamline", "name": "streamline__sequences", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/streamline__sequences.sql", "original_file_path": "models/streamline/core/streamline__sequences.sql", "unique_id": "model.ton_models.streamline__sequences", "fqn": ["ton_models", "streamline", "core", "streamline__sequences"], "alias": "sequences", "checksum": {"name": "sha256", "checksum": "9528414121168f4437198c0736cfa5dac95f43b4ad6f5d43a5dc391304f30ad4"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_view"], "enabled": false}, "created_at": 1747400126.3910565, "relation_name": "TON.streamline.sequences", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view'],\n    enabled = false\n) }}\n\nSELECT\n    0 AS sequence_number\nUNION\nSELECT\n    _id AS sequence_number\nFROM\n    {{ source(\n        'crosschain_silver',\n        'number_sequence'\n    ) }}\nWHERE\n    _id <= (\n        SELECT\n            MAX(sequence_number)\n        FROM\n            {{ ref('streamline__chainhead') }}\n    )", "language": "sql", "refs": [{"name": "streamline__chainhead", "package": null, "version": null}], "sources": [["crosschain_silver", "number_sequence"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__blocks": [{"database": "TON", "schema": "streamline", "name": "streamline__blocks", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/streamline__blocks.sql", "original_file_path": "models/streamline/core/streamline__blocks.sql", "unique_id": "model.ton_models.streamline__blocks", "fqn": ["ton_models", "streamline", "core", "streamline__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "5a71f21c080e432b4647636692ad9f981133a34400b1a83dbb684cd9a7b987ad"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_view"], "enabled": false}, "created_at": 1747400126.3978307, "relation_name": "TON.streamline.blocks", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view'],\n    enabled = false\n) }}\n\nSELECT\n    sequence_number AS mastechain_sequence_number,\n    VALUE :seqno AS sequence_number,\n    VALUE :shard :: STRING AS shard,\n    VALUE :workchain AS workchain\nFROM\n    {{ ref('streamline__shards_complete') }},\n    LATERAL FLATTEN(shards)\nUNION ALL\nSELECT\n    sequence_number AS mastechain_sequence_number,\n    sequence_number AS sequence_number,\n    '8000000000000000' AS shard,\n    -1 AS workchain\nFROM\n    {{ ref('streamline__sequences') }}", "language": "sql", "refs": [{"name": "streamline__shards_complete", "package": null, "version": null}, {"name": "streamline__sequences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__blocks_complete": [{"database": "TON", "schema": "streamline", "name": "streamline__blocks_complete", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/complete/streamline__blocks_complete.sql", "original_file_path": "models/streamline/core/complete/streamline__blocks_complete.sql", "unique_id": "model.ton_models.streamline__blocks_complete", "fqn": ["ton_models", "streamline", "core", "complete", "streamline__blocks_complete"], "alias": "blocks_complete", "checksum": {"name": "sha256", "checksum": "a6bfe1dd27149a0f43e2e9210fcdfa87206d3fd4c4aa73c0a23af55e2c32acad"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["sequence_number", "shard", "workchain"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": "ROUND(sequence_number, -5)", "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["sequence_number", "shard", "workchain"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": "ROUND(sequence_number, -5)", "tags": ["streamline_realtime"], "enabled": false}, "created_at": 1747400126.4029365, "relation_name": "TON.streamline.blocks_complete", "raw_code": "-- depends_on: {{ ref('bronze__blocks') }}\n-- depends_on: {{ ref('bronze__blocks_FR') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = ['sequence_number','shard','workchain'],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = \"ROUND(sequence_number, -5)\",\n    tags = ['streamline_realtime'],\n    enabled = false\n) }}\n\nSELECT\n    sequence_number,\n    shard,\n    workchain,\n    partition_key,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    '{{ invocation_id }}' AS _invocation_id,\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__blocks') }}\n{% else %}\n    {{ ref('bronze__blocks_FR') }}\n{% endif %}\nWHERE\n    DATA :ok = TRUE\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n        AND DATA IS NOT NULL\n    {% endif %}\n\n    qualify ROW_NUMBER() over (\n        PARTITION BY sequence_number,\n        shard,\n        workchain\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__blocks", "package": null, "version": null}, {"name": "bronze__blocks_FR", "package": null, "version": null}, {"name": "bronze__blocks_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__transactions_complete": [{"database": "TON", "schema": "streamline", "name": "streamline__transactions_complete", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/complete/streamline__transactions_complete.sql", "original_file_path": "models/streamline/core/complete/streamline__transactions_complete.sql", "unique_id": "model.ton_models.streamline__transactions_complete", "fqn": ["ton_models", "streamline", "core", "complete", "streamline__transactions_complete"], "alias": "transactions_complete", "checksum": {"name": "sha256", "checksum": "3a1465707caaa4652f5a4e921c17a132bc2c6c8656927a0cec1c24eec5e1cead"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["sequence_number", "shard", "workchain"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": "ROUND(sequence_number, -5)", "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["sequence_number", "shard", "workchain"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": "ROUND(sequence_number, -5)", "tags": ["streamline_realtime"], "enabled": false}, "created_at": 1747400126.409613, "relation_name": "TON.streamline.transactions_complete", "raw_code": "-- depends_on: {{ ref('bronze__transactions') }}\n-- depends_on: {{ ref('bronze__transactions_FR') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = ['sequence_number','shard','workchain'],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = \"ROUND(sequence_number, -5)\",\n    tags = ['streamline_realtime'],\n    enabled = false\n) }}\n\nSELECT\n    sequence_number,\n    shard,\n    workchain,\n    partition_key,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    '{{ invocation_id }}' AS _invocation_id,\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__transactions') }}\n{% else %}\n    {{ ref('bronze__transactions_FR') }}\n{% endif %}\nWHERE\n    VALUE :\"result.incomplete\" = FALSE\n    AND VALUE :ok = TRUE\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n        AND DATA IS NOT NULL\n    {% endif %}\n\n    qualify ROW_NUMBER() over (\n        PARTITION BY sequence_number,\n        shard,\n        workchain\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__transactions", "package": null, "version": null}, {"name": "bronze__transactions_FR", "package": null, "version": null}, {"name": "bronze__transactions_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__shards_complete": [{"database": "TON", "schema": "streamline", "name": "streamline__shards_complete", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/complete/streamline__shards_complete.sql", "original_file_path": "models/streamline/core/complete/streamline__shards_complete.sql", "unique_id": "model.ton_models.streamline__shards_complete", "fqn": ["ton_models", "streamline", "core", "complete", "streamline__shards_complete"], "alias": "shards_complete", "checksum": {"name": "sha256", "checksum": "ad0b4da63b84f4aed1ef9b931195075a166ca906f21e307228bd08e454570397"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "sequence_number", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": "ROUND(sequence_number, -5)", "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "sequence_number", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": "ROUND(sequence_number, -5)", "tags": ["streamline_realtime"], "enabled": false}, "created_at": 1747400126.4162495, "relation_name": "TON.streamline.shards_complete", "raw_code": "-- depends_on: {{ ref('bronze__shards') }}\n-- depends_on: {{ ref('bronze__shards_FR') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = 'sequence_number',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = \"ROUND(sequence_number, -5)\",\n    tags = ['streamline_realtime'],\n    enabled = false\n) }}\n\nSELECT\n    sequence_number AS sequence_number,\n    partition_key,\n    DATA :result :shards AS shards,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id,\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__shards') }}\n{% else %}\n    {{ ref('bronze__shards_FR') }}\n{% endif %}\nWHERE\n    DATA :ok = TRUE\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n        AND DATA IS NOT NULL\n    {% endif %}\n\n    qualify ROW_NUMBER() over (\n        PARTITION BY sequence_number\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__shards", "package": null, "version": null}, {"name": "bronze__shards_FR", "package": null, "version": null}, {"name": "bronze__shards_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__shards_realtime": [{"database": "TON", "schema": "streamline", "name": "streamline__shards_realtime", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/realtime/streamline__shards_realtime.sql", "original_file_path": "models/streamline/core/realtime/streamline__shards_realtime.sql", "unique_id": "model.ton_models.streamline__shards_realtime", "fqn": ["ton_models", "streamline", "core", "realtime", "streamline__shards_realtime"], "alias": "shards_realtime", "checksum": {"name": "sha256", "checksum": "c021b6ca0ae334b9363762d3837af8fe80beb0a487bb5a214db9283243d5e951"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_realtime"], "enabled": false, "post-hook": "\n    \n        \n    SELECT\n        NULL\n    \n"}, "created_at": 1747400126.4225764, "relation_name": "TON.streamline.shards_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = fsc_utils.if_data_call_function_v2(\n        func = 'streamline.udf_bulk_rest_api_v2',\n        target = \"{{this.schema}}.{{this.identifier}}\",\n        params ={ \"external_table\" :\"shards\",\n        \"sql_limit\" :\"100000\",\n        \"producer_batch_size\" :\"100000\",\n        \"worker_batch_size\" :\"50000\",\n        \"sql_source\" :\"{{this.identifier}}\",\n        \"order_by_column\": \"sequence_number DESC\" }\n    ),\n    tags = ['streamline_realtime'],\n    enabled = false\n) }}\n\nWITH sequences AS (\n\n    SELECT\n        sequence_number\n    FROM\n        {{ ref(\"streamline__sequences\") }}\n    EXCEPT\n    SELECT\n        sequence_number\n    FROM\n        {{ ref(\"streamline__shards_complete\") }}\n)\nSELECT\n    sequence_number,\n    ROUND(\n        sequence_number,\n        -5\n    ) :: INT AS partition_key,\n    {{ target.database }}.live.udf_api(\n        'GET',\n        '{Service}/{Authentication}/shards?seqno=' || sequence_number,\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(),\n        'Vault/prod/ton/quicknode/mainnet'\n    ) AS request\nFROM\n    sequences", "language": "sql", "refs": [{"name": "streamline__sequences", "package": null, "version": null}, {"name": "streamline__shards_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.if_data_call_function_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__blocks_realtime": [{"database": "TON", "schema": "streamline", "name": "streamline__blocks_realtime", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/realtime/streamline__blocks_realtime.sql", "original_file_path": "models/streamline/core/realtime/streamline__blocks_realtime.sql", "unique_id": "model.ton_models.streamline__blocks_realtime", "fqn": ["ton_models", "streamline", "core", "realtime", "streamline__blocks_realtime"], "alias": "blocks_realtime", "checksum": {"name": "sha256", "checksum": "cd1ce7983eb44c64ac2a2ac1dac102b7515d49bd461271eac4d9139f8937cfe0"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_realtime"], "enabled": false, "post-hook": "\n    \n        \n    SELECT\n        NULL\n    \n"}, "created_at": 1747400126.4318597, "relation_name": "TON.streamline.blocks_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = fsc_utils.if_data_call_function_v2(\n        func = 'streamline.udf_bulk_rest_api_v2',\n        target = \"{{this.schema}}.{{this.identifier}}\",\n        params ={ \"external_table\" :\"blocks\",\n        \"sql_limit\" :\"100000\",\n        \"producer_batch_size\" :\"100000\",\n        \"worker_batch_size\" :\"50000\",\n        \"sql_source\" :\"{{this.identifier}}\",\n        \"order_by_column\": \"sequence_number DESC\" }\n    ),\n    tags = ['streamline_realtime'],\n    enabled = false\n) }}\n\nWITH shards AS (\n\n    SELECT\n        sequence_number,\n        shard,\n        workchain\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    EXCEPT\n    SELECT\n        sequence_number,\n        shard,\n        workchain\n    FROM\n        {{ ref(\"streamline__blocks_complete\") }}\n)\nSELECT\n    sequence_number,\n    shard,\n    workchain,\n    ROUND(\n        sequence_number,\n        -5\n    ) :: INT AS partition_key,\n    {{ target.database }}.live.udf_api(\n        'GET',\n        '{Service}/{Authentication}/getBlockHeader?workchain=' || workchain || '&shard=' || shard || '&seqno=' || sequence_number,\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(),\n        'Vault/prod/ton/quicknode/mainnet'\n    ) AS request\nFROM\n    shards", "language": "sql", "refs": [{"name": "streamline__blocks", "package": null, "version": null}, {"name": "streamline__blocks_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.if_data_call_function_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.ton_models.streamline__transactions_realtime": [{"database": "TON", "schema": "streamline", "name": "streamline__transactions_realtime", "resource_type": "model", "package_name": "ton_models", "path": "streamline/core/realtime/streamline__transactions_realtime.sql", "original_file_path": "models/streamline/core/realtime/streamline__transactions_realtime.sql", "unique_id": "model.ton_models.streamline__transactions_realtime", "fqn": ["ton_models", "streamline", "core", "realtime", "streamline__transactions_realtime"], "alias": "transactions_realtime", "checksum": {"name": "sha256", "checksum": "f53d6b738b05a8e0935bd0610ecc044818aa5c0d1d453d61176006ee008a1a18"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_realtime"], "enabled": false, "post-hook": "\n    \n        \n    SELECT\n        NULL\n    \n"}, "created_at": 1747400126.439663, "relation_name": "TON.streamline.transactions_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = fsc_utils.if_data_call_function_v2(\n        func = 'streamline.udf_bulk_rest_api_v2',\n        target = \"{{this.schema}}.{{this.identifier}}\",\n        params ={ \"external_table\" :\"transactions\",\n        \"sql_limit\" :\"100000\",\n        \"producer_batch_size\" :\"20000\",\n        \"worker_batch_size\" :\"5000\",\n        \"exploded_key\": tojson([\"result.transactions\"]),\n        \"include_top_level_json\": tojson([\"result.incomplete\",\"ok\"]),\n        \"sql_source\" :\"{{this.identifier}}\",\n        \"order_by_column\": \"sequence_number DESC\" }\n    ),\n    tags = ['streamline_realtime'],\n    enabled = false\n) }}\n\nWITH shards AS (\n\n    SELECT\n        sequence_number,\n        shard,\n        workchain\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    EXCEPT\n    SELECT\n        sequence_number,\n        shard,\n        workchain\n    FROM\n        {{ ref(\"streamline__transactions_complete\") }}\n)\nSELECT\n    sequence_number,\n    shard,\n    workchain,\n    ROUND(\n        sequence_number,\n        -5\n    ) :: INT AS partition_key,\n    {{ target.database }}.live.udf_api(\n        'GET',\n        '{Service}/{Authentication}/getBlockTransactionsExt?workchain=' || workchain || '&shard=' || shard || '&seqno=' || sequence_number || '&count=256',\n        --256 appears to be the max number of transactions per block that QN support - tbd on if there are blockc with > 256 transactions\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(),\n        'Vault/prod/ton/quicknode/mainnet'\n    ) AS request\nFROM\n    shards", "language": "sql", "refs": [{"name": "streamline__blocks", "package": null, "version": null}, {"name": "streamline__transactions_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.if_data_call_function_v2"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.livequery_base.secrets": [{"database": "TON", "schema": "secrets", "name": "secrets", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/secrets.sql", "original_file_path": "models/deploy/core/secrets.sql", "unique_id": "model.livequery_base.secrets", "fqn": ["livequery_base", "deploy", "core", "secrets"], "alias": "", "checksum": {"name": "sha256", "checksum": "ec1f117cc419f648463c64fca28b91e20fff87fa5b6f982ab8d75e74a3d1b052"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_register_secret": {"name": "udf_register_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_get_secret": {"name": "udf_get_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_get_secrets": {"name": "udf_get_secrets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_create_secret": {"name": "udf_create_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "udf_delete_secret": {"name": "udf_delete_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/secrets.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "enabled": "{{ true if env_var(\"ENABLE_SNOWFLAKE_SECRETS\", \"\") else false }}", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1747400128.230673, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('live') }}\n{% set config = config_core_secrets %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}]}, "parent_map": {"model.ton_models.defi__fact_dex_pools": ["model.ton_models.silver__dex_pools"], "model.ton_models.defi__fact_dex_trades": ["model.ton_models.silver__dex_trades"], "model.ton_models.nft__fact_nft_transfers": ["model.ton_models.silver__nft_transfers"], "model.ton_models.nft__fact_nft_sales": ["model.ton_models.silver__nft_sales"], "model.ton_models.nft__fact_nft_metadata": ["model.ton_models.silver__nft_metadata"], "model.ton_models.nft__fact_nft_items": ["model.ton_models.silver__nft_items"], "model.ton_models.nft__fact_nft_events": ["model.ton_models.silver__nft_events"], "model.ton_models.core__fact_jetton_events": ["model.ton_models.silver__jetton_events"], "model.ton_models.core__fact_jetton_metadata": ["model.ton_models.silver__jetton_metadata"], "model.ton_models.core__fact_messages": ["model.ton_models.silver__messages_with_data"], "model.ton_models.core__fact_balances": ["model.ton_models.silver__balances_history"], "model.ton_models.core__fact_account_states": ["model.ton_models.silver__account_states"], "model.ton_models.core__dim_labels": ["model.ton_models.silver__crosschain_labels"], "model.ton_models.core__fact_transactions": ["model.ton_models.silver__transactions"], "model.ton_models.core__fact_blocks": ["model.ton_models.silver__blocks"], "model.ton_models.silver__dex_pools": ["model.ton_models.bronze__dex_pools"], "model.ton_models.silver__blocks": ["model.ton_models.bronze__blocks"], "model.ton_models.silver__nft_sales": ["model.ton_models.bronze__nft_sales"], "model.ton_models.silver__dex_trades": ["model.ton_models.bronze__dex_trades"], "model.ton_models.silver__account_states": ["model.ton_models.bronze__account_states"], "model.ton_models.silver__nft_transfers": ["model.ton_models.bronze__nft_transfers"], "model.ton_models.silver__jetton_metadata": ["model.ton_models.bronze__jetton_metadata"], "model.ton_models.silver__nft_events": ["model.ton_models.bronze__nft_events"], "model.ton_models.silver__messages_with_data": ["model.ton_models.bronze__messages_with_data"], "model.ton_models.silver__jetton_events": ["model.ton_models.bronze__jetton_events"], "model.ton_models.silver__nft_metadata": ["model.ton_models.bronze__nft_metadata"], "model.ton_models.silver__nft_items": ["model.ton_models.bronze__nft_items"], "model.ton_models.silver__balances_history": ["model.ton_models.bronze__balances_history"], "model.ton_models.silver__transactions": ["model.ton_models.bronze__transactions"], "model.ton_models.silver__labels": ["model.ton_models.bronze_api__labels"], "model.ton_models.silver__crosschain_labels": ["source.ton_models.crosschain_silver.labels_combined"], "model.ton_models.bronze__blocks": ["source.ton_models.bronze_streamline.blocks_tdl"], "model.ton_models.bronze__nft_transfers": ["source.ton_models.bronze_streamline.nft_transfers_tdl"], "model.ton_models.bronze__jetton_events": ["source.ton_models.bronze_streamline.jetton_events_tdl"], "model.ton_models.bronze__nft_metadata": ["source.ton_models.bronze_streamline.nft_metadata_tdl"], "model.ton_models.bronze__balances_history": ["source.ton_models.bronze_streamline.balances_history_tdl"], "model.ton_models.bronze__transactions": ["source.ton_models.bronze_streamline.transactions_tdl"], "model.ton_models.bronze__nft_events": ["source.ton_models.bronze_streamline.nft_events_tdl"], "model.ton_models.bronze__dex_pools": ["source.ton_models.bronze_streamline.dex_pools_tdl"], "model.ton_models.bronze__account_states": ["source.ton_models.bronze_streamline.account_states_tdl"], "model.ton_models.bronze__jetton_metadata": ["source.ton_models.bronze_streamline.jetton_metadata_tdl"], "model.ton_models.bronze__nft_items": ["source.ton_models.bronze_streamline.nft_items_tdl"], "model.ton_models.bronze__nft_sales": ["source.ton_models.bronze_streamline.nft_sales_tdl"], "model.ton_models.bronze__dex_trades": ["source.ton_models.bronze_streamline.dex_trades_tdl"], "model.ton_models.bronze__messages_with_data": ["source.ton_models.bronze_streamline.messages_with_data_tdl"], "model.ton_models.bronze__jetton_metadata_FR": ["source.ton_models.bronze_streamline.jetton_metadata_tdl"], "model.ton_models.bronze__dex_trades_FR": ["source.ton_models.bronze_streamline.dex_trades_tdl"], "model.ton_models.bronze__messages_FR": ["source.ton_models.bronze_streamline.messages_tdl"], "model.ton_models.bronze__nft_metadata_FR": ["source.ton_models.bronze_streamline.nft_metadata_tdl"], "model.ton_models.bronze__nft_items_FR": ["source.ton_models.bronze_streamline.nft_items_tdl"], "model.ton_models.bronze__balances_history_FR": ["source.ton_models.bronze_streamline.balances_history_tdl"], "model.ton_models.bronze__blocks_FR": ["source.ton_models.bronze_streamline.blocks_tdl"], "model.ton_models.bronze__nft_events_FR": ["source.ton_models.bronze_streamline.nft_events_tdl"], "model.ton_models.bronze__transactions_FR": ["source.ton_models.bronze_streamline.transactions_tdl"], "model.ton_models.bronze__jetton_events_FR": ["source.ton_models.bronze_streamline.jetton_events_tdl"], "model.ton_models.bronze__messages_with_data_FR": ["source.ton_models.bronze_streamline.messages_with_data_tdl"], "model.ton_models.bronze__dex_pools_FR": ["source.ton_models.bronze_streamline.dex_pools_tdl"], "model.ton_models.bronze__nft_transfers_FR": ["source.ton_models.bronze_streamline.nft_transfers_tdl"], "model.ton_models.bronze__account_states_FR": ["source.ton_models.bronze_streamline.account_states_tdl"], "model.ton_models.bronze__nft_sales_FR": ["source.ton_models.bronze_streamline.nft_sales_tdl"], "model.ton_models.bronze_api__labels": [], "operation.ton_models.ton_models-on-run-start-0": [], "operation.ton_models.ton_models-on-run-start-1": [], "operation.ton_models.ton_models-on-run-end-0": [], "model.fsc_utils._datashare___create_udfs": [], "model.fsc_utils._datashare___create_gold": [], "model.livequery_base.live__allow_list": ["model.livequery_base.live"], "model.livequery_base.utils": ["model.livequery_base._utils"], "model.livequery_base._utils": [], "model.livequery_base.live": ["model.livequery_base._live", "model.livequery_base._utils", "model.livequery_base.utils"], "model.livequery_base._live": [], "analysis.livequery_base.test_create_or_drop_function_from_config": [], "analysis.livequery_base.test_functions": [], "analysis.livequery_base.test_functions_py": [], "seed.livequery_base.live__verified_api_endpoints": [], "operation.livequery_base.livequery_base-on-run-start-0": [], "operation.livequery_base.livequery_base-on-run-end-0": [], "test.ton_models.unique_defi__fact_dex_pools_fact_dex_pools_id.c2c880c286": ["model.ton_models.defi__fact_dex_pools"], "test.ton_models.dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30.99f0a3f538": ["model.ton_models.defi__fact_dex_pools"], "test.ton_models.unique_defi__fact_dex_trades_fact_dex_trades_id.23533d3f63": ["model.ton_models.defi__fact_dex_trades"], "test.ton_models.dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30.d43566a6ae": ["model.ton_models.defi__fact_dex_trades"], "test.ton_models.unique_nft__fact_nft_events_fact_nft_events_id.2799c147da": ["model.ton_models.nft__fact_nft_events"], "test.ton_models.dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30.f73753d297": ["model.ton_models.nft__fact_nft_events"], "test.ton_models.unique_nft__fact_nft_items_fact_nft_items_id.0b4990aee6": ["model.ton_models.nft__fact_nft_items"], "test.ton_models.dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30.102f1a59b8": ["model.ton_models.nft__fact_nft_items"], "test.ton_models.unique_nft__fact_nft_metadata_fact_nft_metadata_id.3d06c85292": ["model.ton_models.nft__fact_nft_metadata"], "test.ton_models.dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30.bdda24c277": ["model.ton_models.nft__fact_nft_metadata"], "test.ton_models.unique_nft__fact_nft_sales_fact_nft_sales_id.48bd59ae9a": ["model.ton_models.nft__fact_nft_sales"], "test.ton_models.dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30.3bd153af21": ["model.ton_models.nft__fact_nft_sales"], "test.ton_models.unique_nft__fact_nft_transfers_fact_nft_transfers_id.ec967d00b8": ["model.ton_models.nft__fact_nft_transfers"], "test.ton_models.dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30.b6e4eb4a12": ["model.ton_models.nft__fact_nft_transfers"], "test.ton_models.dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30.7b04942c81": ["model.ton_models.core__fact_account_states"], "test.ton_models.unique_core__fact_balances_fact_balances_history_id.bfbf9dfbee": ["model.ton_models.core__fact_balances"], "test.ton_models.dbt_utils_recency_core__fact_balances_hour__block_timestamp__30.4f01cbcecb": ["model.ton_models.core__fact_balances"], "test.ton_models.unique_core__fact_blocks_fact_blocks_id.2038fcd6bf": ["model.ton_models.core__fact_blocks"], "test.ton_models.dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30.59ae4d55e3": ["model.ton_models.core__fact_blocks"], "test.ton_models.unique_core__fact_jetton_events_fact_jetton_events_id.be6c022e7d": ["model.ton_models.core__fact_jetton_events"], "test.ton_models.dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30.f9cfce62bc": ["model.ton_models.core__fact_jetton_events"], "test.ton_models.unique_core__fact_jetton_metadata_fact_jetton_metadata_id.199e1de2a7": ["model.ton_models.core__fact_jetton_metadata"], "test.ton_models.dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30.9641a1cc97": ["model.ton_models.core__fact_jetton_metadata"], "test.ton_models.unique_core__fact_messages_fact_messages_id.7e30617689": ["model.ton_models.core__fact_messages"], "test.ton_models.dbt_utils_recency_core__fact_messages_hour__block_timestamp__30.b8c62f421d": ["model.ton_models.core__fact_messages"], "test.ton_models.unique_core__fact_transactions_fact_transactions_id.9760742361": ["model.ton_models.core__fact_transactions"], "test.ton_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30.78a2309a3c": ["model.ton_models.core__fact_transactions"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS.1501e0ea66": ["model.ton_models.core__dim_labels"], "test.ton_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN.8557883709": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR.d5181598d8": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE.c9d9d14a55": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE.dc4b4a781a": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL.457ab8a792": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME.fabaa88044": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID.9ca3f8b086": ["model.ton_models.core__dim_labels"], "test.ton_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225": ["model.ton_models.core__dim_labels"], "test.ton_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16": ["model.ton_models.core__dim_labels"], "test.ton_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a": ["model.ton_models.core__dim_labels"], "test.livequery_base.test___utils_udf_introspect.79bd27a18b": ["model.livequery_base._utils"], "test.livequery_base.test__utils_udf_json_rpc_call.0b87c6050e": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_true_2.764afd6db8": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_true_space.11f0932fc3": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_true_special.4eef6cb355": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_true_array.614d53ca8a": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_false_1.e2e07ad77a": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_false_2.58739709ab": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_false_space.1167d3f089": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_false_special.0cd3cb5826": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_false_array.9524cea2e8": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_1.1d75f92e0e": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_2.60da312d8c": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_space.d5e1917fd6": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_special.6f25d30fd9": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_dict_array.25f6af5cf8": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_true_1.f1dc90fd5d": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_true_2.4c09ca3de2": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_true_space.c150fa3544": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_true_special.14abbd82f3": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_true_array.559475a80a": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_false_1.ffe0d93235": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_false_2.f6e4d9a06a": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_false_space.c46a422a10": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_false_special.ad3b4ce496": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_false_array.979bfafd11": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_1.bae96ece17": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_2.ff2898d4a2": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_space.67b6f51498": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_special.746423269a": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_urlencode_array_array.3d05dcb6a9": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_int_to_binary.46856460db": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_int_to_binary_large_number.feba996e3b": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_binary_to_int.907b20f381": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_binary_to_int_large_number.926bff44e9": ["model.livequery_base.utils"], "test.livequery_base.test__utils_udf_evm_decode_log.b6fedb07e9": ["model.livequery_base.utils"], "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456": ["model.livequery_base.live"], "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8": ["model.livequery_base.live"], "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb": ["model.livequery_base.live"], "test.livequery_base.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_base.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_base.test_secrets__udf_delete_secret.9f28745276": [], "source.ton_models.bronze_streamline.account_states_tdl": [], "source.ton_models.bronze_streamline.balances_history_tdl": [], "source.ton_models.bronze_streamline.blocks_tdl": [], "source.ton_models.bronze_streamline.dex_pools_tdl": [], "source.ton_models.bronze_streamline.dex_trades_tdl": [], "source.ton_models.bronze_streamline.jetton_events_tdl": [], "source.ton_models.bronze_streamline.jetton_metadata_tdl": [], "source.ton_models.bronze_streamline.messages_tdl": [], "source.ton_models.bronze_streamline.messages_with_data_tdl": [], "source.ton_models.bronze_streamline.nft_events_tdl": [], "source.ton_models.bronze_streamline.nft_items_tdl": [], "source.ton_models.bronze_streamline.nft_metadata_tdl": [], "source.ton_models.bronze_streamline.nft_sales_tdl": [], "source.ton_models.bronze_streamline.nft_transfers_tdl": [], "source.ton_models.bronze_streamline.transactions_tdl": [], "source.ton_models.bronze_streamline.shards": [], "source.ton_models.bronze_streamline.blocks": [], "source.ton_models.bronze_streamline.transactions": [], "source.ton_models.crosschain.address_tags": [], "source.ton_models.crosschain.dim_dates": [], "source.ton_models.crosschain_silver.number_sequence": [], "source.ton_models.crosschain_silver.complete_native_prices": [], "source.ton_models.crosschain_silver.labels_combined": [], "source.livequery_base.crosschain.dim_date_hours": [], "source.livequery_base.crosschain.dim_contracts": [], "source.livequery_base.crosschain.dim_evm_event_abis": [], "source.livequery_base.ethereum_core.fact_event_logs": [], "source.livequery_base.ethereum_core.ez_decoded_event_logs": []}, "child_map": {"model.ton_models.defi__fact_dex_pools": ["test.ton_models.dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30.99f0a3f538", "test.ton_models.unique_defi__fact_dex_pools_fact_dex_pools_id.c2c880c286"], "model.ton_models.defi__fact_dex_trades": ["test.ton_models.dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30.d43566a6ae", "test.ton_models.unique_defi__fact_dex_trades_fact_dex_trades_id.23533d3f63"], "model.ton_models.nft__fact_nft_transfers": ["test.ton_models.dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30.b6e4eb4a12", "test.ton_models.unique_nft__fact_nft_transfers_fact_nft_transfers_id.ec967d00b8"], "model.ton_models.nft__fact_nft_sales": ["test.ton_models.dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30.3bd153af21", "test.ton_models.unique_nft__fact_nft_sales_fact_nft_sales_id.48bd59ae9a"], "model.ton_models.nft__fact_nft_metadata": ["test.ton_models.dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30.bdda24c277", "test.ton_models.unique_nft__fact_nft_metadata_fact_nft_metadata_id.3d06c85292"], "model.ton_models.nft__fact_nft_items": ["test.ton_models.dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30.102f1a59b8", "test.ton_models.unique_nft__fact_nft_items_fact_nft_items_id.0b4990aee6"], "model.ton_models.nft__fact_nft_events": ["test.ton_models.dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30.f73753d297", "test.ton_models.unique_nft__fact_nft_events_fact_nft_events_id.2799c147da"], "model.ton_models.core__fact_jetton_events": ["test.ton_models.dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30.f9cfce62bc", "test.ton_models.unique_core__fact_jetton_events_fact_jetton_events_id.be6c022e7d"], "model.ton_models.core__fact_jetton_metadata": ["test.ton_models.dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30.9641a1cc97", "test.ton_models.unique_core__fact_jetton_metadata_fact_jetton_metadata_id.199e1de2a7"], "model.ton_models.core__fact_messages": ["test.ton_models.dbt_utils_recency_core__fact_messages_hour__block_timestamp__30.b8c62f421d", "test.ton_models.unique_core__fact_messages_fact_messages_id.7e30617689"], "model.ton_models.core__fact_balances": ["test.ton_models.dbt_utils_recency_core__fact_balances_hour__block_timestamp__30.4f01cbcecb", "test.ton_models.unique_core__fact_balances_fact_balances_history_id.bfbf9dfbee"], "model.ton_models.core__fact_account_states": ["test.ton_models.dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30.7b04942c81"], "model.ton_models.core__dim_labels": ["test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS.1501e0ea66", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME.fabaa88044", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN.8557883709", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR.d5181598d8", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID.9ca3f8b086", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL.457ab8a792", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE.dc4b4a781a", "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE.c9d9d14a55", "test.ton_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a", "test.ton_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.ton_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225", "test.ton_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16"], "model.ton_models.core__fact_transactions": ["test.ton_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30.78a2309a3c", "test.ton_models.unique_core__fact_transactions_fact_transactions_id.9760742361"], "model.ton_models.core__fact_blocks": ["test.ton_models.dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30.59ae4d55e3", "test.ton_models.unique_core__fact_blocks_fact_blocks_id.2038fcd6bf"], "model.ton_models.silver__dex_pools": ["model.ton_models.defi__fact_dex_pools"], "model.ton_models.silver__blocks": ["model.ton_models.core__fact_blocks"], "model.ton_models.silver__nft_sales": ["model.ton_models.nft__fact_nft_sales"], "model.ton_models.silver__dex_trades": ["model.ton_models.defi__fact_dex_trades"], "model.ton_models.silver__account_states": ["model.ton_models.core__fact_account_states"], "model.ton_models.silver__nft_transfers": ["model.ton_models.nft__fact_nft_transfers"], "model.ton_models.silver__jetton_metadata": ["model.ton_models.core__fact_jetton_metadata"], "model.ton_models.silver__nft_events": ["model.ton_models.nft__fact_nft_events"], "model.ton_models.silver__messages_with_data": ["model.ton_models.core__fact_messages"], "model.ton_models.silver__jetton_events": ["model.ton_models.core__fact_jetton_events"], "model.ton_models.silver__nft_metadata": ["model.ton_models.nft__fact_nft_metadata"], "model.ton_models.silver__nft_items": ["model.ton_models.nft__fact_nft_items"], "model.ton_models.silver__balances_history": ["model.ton_models.core__fact_balances"], "model.ton_models.silver__transactions": ["model.ton_models.core__fact_transactions"], "model.ton_models.silver__labels": [], "model.ton_models.silver__crosschain_labels": ["model.ton_models.core__dim_labels"], "model.ton_models.bronze__blocks": ["model.ton_models.silver__blocks"], "model.ton_models.bronze__nft_transfers": ["model.ton_models.silver__nft_transfers"], "model.ton_models.bronze__jetton_events": ["model.ton_models.silver__jetton_events"], "model.ton_models.bronze__nft_metadata": ["model.ton_models.silver__nft_metadata"], "model.ton_models.bronze__balances_history": ["model.ton_models.silver__balances_history"], "model.ton_models.bronze__transactions": ["model.ton_models.silver__transactions"], "model.ton_models.bronze__nft_events": ["model.ton_models.silver__nft_events"], "model.ton_models.bronze__dex_pools": ["model.ton_models.silver__dex_pools"], "model.ton_models.bronze__account_states": ["model.ton_models.silver__account_states"], "model.ton_models.bronze__jetton_metadata": ["model.ton_models.silver__jetton_metadata"], "model.ton_models.bronze__nft_items": ["model.ton_models.silver__nft_items"], "model.ton_models.bronze__nft_sales": ["model.ton_models.silver__nft_sales"], "model.ton_models.bronze__dex_trades": ["model.ton_models.silver__dex_trades"], "model.ton_models.bronze__messages_with_data": ["model.ton_models.silver__messages_with_data"], "model.ton_models.bronze__jetton_metadata_FR": [], "model.ton_models.bronze__dex_trades_FR": [], "model.ton_models.bronze__messages_FR": [], "model.ton_models.bronze__nft_metadata_FR": [], "model.ton_models.bronze__nft_items_FR": [], "model.ton_models.bronze__balances_history_FR": [], "model.ton_models.bronze__blocks_FR": [], "model.ton_models.bronze__nft_events_FR": [], "model.ton_models.bronze__transactions_FR": [], "model.ton_models.bronze__jetton_events_FR": [], "model.ton_models.bronze__messages_with_data_FR": [], "model.ton_models.bronze__dex_pools_FR": [], "model.ton_models.bronze__nft_transfers_FR": [], "model.ton_models.bronze__account_states_FR": [], "model.ton_models.bronze__nft_sales_FR": [], "model.ton_models.bronze_api__labels": ["model.ton_models.silver__labels"], "operation.ton_models.ton_models-on-run-start-0": [], "operation.ton_models.ton_models-on-run-start-1": [], "operation.ton_models.ton_models-on-run-end-0": [], "model.fsc_utils._datashare___create_udfs": [], "model.fsc_utils._datashare___create_gold": [], "model.livequery_base.live__allow_list": [], "model.livequery_base.utils": ["model.livequery_base.live", "test.livequery_base.test__utils_udf_binary_to_int.907b20f381", "test.livequery_base.test__utils_udf_binary_to_int_large_number.926bff44e9", "test.livequery_base.test__utils_udf_evm_decode_log.b6fedb07e9", "test.livequery_base.test__utils_udf_int_to_binary.46856460db", "test.livequery_base.test__utils_udf_int_to_binary_large_number.feba996e3b", "test.livequery_base.test__utils_udf_json_rpc_call.0b87c6050e", "test.livequery_base.test__utils_udf_urlencode_array_1.bae96ece17", "test.livequery_base.test__utils_udf_urlencode_array_2.ff2898d4a2", "test.livequery_base.test__utils_udf_urlencode_array_array.3d05dcb6a9", "test.livequery_base.test__utils_udf_urlencode_array_false_1.ffe0d93235", "test.livequery_base.test__utils_udf_urlencode_array_false_2.f6e4d9a06a", "test.livequery_base.test__utils_udf_urlencode_array_false_array.979bfafd11", "test.livequery_base.test__utils_udf_urlencode_array_false_space.c46a422a10", "test.livequery_base.test__utils_udf_urlencode_array_false_special.ad3b4ce496", "test.livequery_base.test__utils_udf_urlencode_array_space.67b6f51498", "test.livequery_base.test__utils_udf_urlencode_array_special.746423269a", "test.livequery_base.test__utils_udf_urlencode_array_true_1.f1dc90fd5d", "test.livequery_base.test__utils_udf_urlencode_array_true_2.4c09ca3de2", "test.livequery_base.test__utils_udf_urlencode_array_true_array.559475a80a", "test.livequery_base.test__utils_udf_urlencode_array_true_space.c150fa3544", "test.livequery_base.test__utils_udf_urlencode_array_true_special.14abbd82f3", "test.livequery_base.test__utils_udf_urlencode_dict_1.1d75f92e0e", "test.livequery_base.test__utils_udf_urlencode_dict_2.60da312d8c", "test.livequery_base.test__utils_udf_urlencode_dict_array.25f6af5cf8", "test.livequery_base.test__utils_udf_urlencode_dict_false_1.e2e07ad77a", "test.livequery_base.test__utils_udf_urlencode_dict_false_2.58739709ab", "test.livequery_base.test__utils_udf_urlencode_dict_false_array.9524cea2e8", "test.livequery_base.test__utils_udf_urlencode_dict_false_space.1167d3f089", "test.livequery_base.test__utils_udf_urlencode_dict_false_special.0cd3cb5826", "test.livequery_base.test__utils_udf_urlencode_dict_space.d5e1917fd6", "test.livequery_base.test__utils_udf_urlencode_dict_special.6f25d30fd9", "test.livequery_base.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b", "test.livequery_base.test__utils_udf_urlencode_dict_true_2.764afd6db8", "test.livequery_base.test__utils_udf_urlencode_dict_true_array.614d53ca8a", "test.livequery_base.test__utils_udf_urlencode_dict_true_space.11f0932fc3", "test.livequery_base.test__utils_udf_urlencode_dict_true_special.4eef6cb355"], "model.livequery_base._utils": ["model.livequery_base.live", "model.livequery_base.utils", "test.livequery_base.test___utils_udf_introspect.79bd27a18b"], "model.livequery_base.live": ["model.livequery_base.live__allow_list", "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8", "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456", "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb"], "model.livequery_base._live": ["model.livequery_base.live"], "analysis.livequery_base.test_create_or_drop_function_from_config": [], "analysis.livequery_base.test_functions": [], "analysis.livequery_base.test_functions_py": [], "seed.livequery_base.live__verified_api_endpoints": [], "operation.livequery_base.livequery_base-on-run-start-0": [], "operation.livequery_base.livequery_base-on-run-end-0": [], "test.ton_models.unique_defi__fact_dex_pools_fact_dex_pools_id.c2c880c286": [], "test.ton_models.dbt_utils_recency_defi__fact_dex_pools_hour__block_timestamp_last_updated__30.99f0a3f538": [], "test.ton_models.unique_defi__fact_dex_trades_fact_dex_trades_id.23533d3f63": [], "test.ton_models.dbt_utils_recency_defi__fact_dex_trades_hour__block_timestamp__30.d43566a6ae": [], "test.ton_models.unique_nft__fact_nft_events_fact_nft_events_id.2799c147da": [], "test.ton_models.dbt_utils_recency_nft__fact_nft_events_hour__block_timestamp__30.f73753d297": [], "test.ton_models.unique_nft__fact_nft_items_fact_nft_items_id.0b4990aee6": [], "test.ton_models.dbt_utils_recency_nft__fact_nft_items_hour__block_timestamp__30.102f1a59b8": [], "test.ton_models.unique_nft__fact_nft_metadata_fact_nft_metadata_id.3d06c85292": [], "test.ton_models.dbt_utils_recency_nft__fact_nft_metadata_hour__update_timestamp_onchain__30.bdda24c277": [], "test.ton_models.unique_nft__fact_nft_sales_fact_nft_sales_id.48bd59ae9a": [], "test.ton_models.dbt_utils_recency_nft__fact_nft_sales_hour__block_timestamp__30.3bd153af21": [], "test.ton_models.unique_nft__fact_nft_transfers_fact_nft_transfers_id.ec967d00b8": [], "test.ton_models.dbt_utils_recency_nft__fact_nft_transfers_hour__block_timestamp__30.b6e4eb4a12": [], "test.ton_models.dbt_utils_recency_core__fact_account_states_hour__block_timestamp__30.7b04942c81": [], "test.ton_models.unique_core__fact_balances_fact_balances_history_id.bfbf9dfbee": [], "test.ton_models.dbt_utils_recency_core__fact_balances_hour__block_timestamp__30.4f01cbcecb": [], "test.ton_models.unique_core__fact_blocks_fact_blocks_id.2038fcd6bf": [], "test.ton_models.dbt_utils_recency_core__fact_blocks_hour__block_timestamp__30.59ae4d55e3": [], "test.ton_models.unique_core__fact_jetton_events_fact_jetton_events_id.be6c022e7d": [], "test.ton_models.dbt_utils_recency_core__fact_jetton_events_hour__block_timestamp__30.f9cfce62bc": [], "test.ton_models.unique_core__fact_jetton_metadata_fact_jetton_metadata_id.199e1de2a7": [], "test.ton_models.dbt_utils_recency_core__fact_jetton_metadata_hour__update_timestamp_onchain__30.9641a1cc97": [], "test.ton_models.unique_core__fact_messages_fact_messages_id.7e30617689": [], "test.ton_models.dbt_utils_recency_core__fact_messages_hour__block_timestamp__30.b8c62f421d": [], "test.ton_models.unique_core__fact_transactions_fact_transactions_id.9760742361": [], "test.ton_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__30.78a2309a3c": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS.1501e0ea66": [], "test.ton_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_BLOCKCHAIN.8557883709": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_CREATOR.d5181598d8": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_TYPE.c9d9d14a55": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL_SUBTYPE.dc4b4a781a": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_LABEL.457ab8a792": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_ADDRESS_NAME.fabaa88044": [], "test.ton_models.dbt_expectations_expect_column_to_exist_core__dim_labels_DIM_LABELS_ID.9ca3f8b086": [], "test.ton_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225": [], "test.ton_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16": [], "test.ton_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a": [], "test.livequery_base.test___utils_udf_introspect.79bd27a18b": [], "test.livequery_base.test__utils_udf_json_rpc_call.0b87c6050e": [], "test.livequery_base.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b": [], "test.livequery_base.test__utils_udf_urlencode_dict_true_2.764afd6db8": [], "test.livequery_base.test__utils_udf_urlencode_dict_true_space.11f0932fc3": [], "test.livequery_base.test__utils_udf_urlencode_dict_true_special.4eef6cb355": [], "test.livequery_base.test__utils_udf_urlencode_dict_true_array.614d53ca8a": [], "test.livequery_base.test__utils_udf_urlencode_dict_false_1.e2e07ad77a": [], "test.livequery_base.test__utils_udf_urlencode_dict_false_2.58739709ab": [], "test.livequery_base.test__utils_udf_urlencode_dict_false_space.1167d3f089": [], "test.livequery_base.test__utils_udf_urlencode_dict_false_special.0cd3cb5826": [], "test.livequery_base.test__utils_udf_urlencode_dict_false_array.9524cea2e8": [], "test.livequery_base.test__utils_udf_urlencode_dict_1.1d75f92e0e": [], "test.livequery_base.test__utils_udf_urlencode_dict_2.60da312d8c": [], "test.livequery_base.test__utils_udf_urlencode_dict_space.d5e1917fd6": [], "test.livequery_base.test__utils_udf_urlencode_dict_special.6f25d30fd9": [], "test.livequery_base.test__utils_udf_urlencode_dict_array.25f6af5cf8": [], "test.livequery_base.test__utils_udf_urlencode_array_true_1.f1dc90fd5d": [], "test.livequery_base.test__utils_udf_urlencode_array_true_2.4c09ca3de2": [], "test.livequery_base.test__utils_udf_urlencode_array_true_space.c150fa3544": [], "test.livequery_base.test__utils_udf_urlencode_array_true_special.14abbd82f3": [], "test.livequery_base.test__utils_udf_urlencode_array_true_array.559475a80a": [], "test.livequery_base.test__utils_udf_urlencode_array_false_1.ffe0d93235": [], "test.livequery_base.test__utils_udf_urlencode_array_false_2.f6e4d9a06a": [], "test.livequery_base.test__utils_udf_urlencode_array_false_space.c46a422a10": [], "test.livequery_base.test__utils_udf_urlencode_array_false_special.ad3b4ce496": [], "test.livequery_base.test__utils_udf_urlencode_array_false_array.979bfafd11": [], "test.livequery_base.test__utils_udf_urlencode_array_1.bae96ece17": [], "test.livequery_base.test__utils_udf_urlencode_array_2.ff2898d4a2": [], "test.livequery_base.test__utils_udf_urlencode_array_space.67b6f51498": [], "test.livequery_base.test__utils_udf_urlencode_array_special.746423269a": [], "test.livequery_base.test__utils_udf_urlencode_array_array.3d05dcb6a9": [], "test.livequery_base.test__utils_udf_int_to_binary.46856460db": [], "test.livequery_base.test__utils_udf_int_to_binary_large_number.feba996e3b": [], "test.livequery_base.test__utils_udf_binary_to_int.907b20f381": [], "test.livequery_base.test__utils_udf_binary_to_int_large_number.926bff44e9": [], "test.livequery_base.test__utils_udf_evm_decode_log.b6fedb07e9": [], "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456": [], "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8": [], "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb": [], "test.livequery_base.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_base.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_base.test_secrets__udf_delete_secret.9f28745276": [], "source.ton_models.bronze_streamline.account_states_tdl": ["model.ton_models.bronze__account_states", "model.ton_models.bronze__account_states_FR"], "source.ton_models.bronze_streamline.balances_history_tdl": ["model.ton_models.bronze__balances_history", "model.ton_models.bronze__balances_history_FR"], "source.ton_models.bronze_streamline.blocks_tdl": ["model.ton_models.bronze__blocks", "model.ton_models.bronze__blocks_FR"], "source.ton_models.bronze_streamline.dex_pools_tdl": ["model.ton_models.bronze__dex_pools", "model.ton_models.bronze__dex_pools_FR"], "source.ton_models.bronze_streamline.dex_trades_tdl": ["model.ton_models.bronze__dex_trades", "model.ton_models.bronze__dex_trades_FR"], "source.ton_models.bronze_streamline.jetton_events_tdl": ["model.ton_models.bronze__jetton_events", "model.ton_models.bronze__jetton_events_FR"], "source.ton_models.bronze_streamline.jetton_metadata_tdl": ["model.ton_models.bronze__jetton_metadata", "model.ton_models.bronze__jetton_metadata_FR"], "source.ton_models.bronze_streamline.messages_tdl": ["model.ton_models.bronze__messages_FR"], "source.ton_models.bronze_streamline.messages_with_data_tdl": ["model.ton_models.bronze__messages_with_data", "model.ton_models.bronze__messages_with_data_FR"], "source.ton_models.bronze_streamline.nft_events_tdl": ["model.ton_models.bronze__nft_events", "model.ton_models.bronze__nft_events_FR"], "source.ton_models.bronze_streamline.nft_items_tdl": ["model.ton_models.bronze__nft_items", "model.ton_models.bronze__nft_items_FR"], "source.ton_models.bronze_streamline.nft_metadata_tdl": ["model.ton_models.bronze__nft_metadata", "model.ton_models.bronze__nft_metadata_FR"], "source.ton_models.bronze_streamline.nft_sales_tdl": ["model.ton_models.bronze__nft_sales", "model.ton_models.bronze__nft_sales_FR"], "source.ton_models.bronze_streamline.nft_transfers_tdl": ["model.ton_models.bronze__nft_transfers", "model.ton_models.bronze__nft_transfers_FR"], "source.ton_models.bronze_streamline.transactions_tdl": ["model.ton_models.bronze__transactions", "model.ton_models.bronze__transactions_FR"], "source.ton_models.bronze_streamline.shards": [], "source.ton_models.bronze_streamline.blocks": [], "source.ton_models.bronze_streamline.transactions": [], "source.ton_models.crosschain.address_tags": [], "source.ton_models.crosschain.dim_dates": [], "source.ton_models.crosschain_silver.number_sequence": [], "source.ton_models.crosschain_silver.complete_native_prices": [], "source.ton_models.crosschain_silver.labels_combined": ["model.ton_models.silver__crosschain_labels"], "source.livequery_base.crosschain.dim_date_hours": [], "source.livequery_base.crosschain.dim_contracts": [], "source.livequery_base.crosschain.dim_evm_event_abis": [], "source.livequery_base.ethereum_core.fact_event_logs": [], "source.livequery_base.ethereum_core.ez_decoded_event_logs": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}